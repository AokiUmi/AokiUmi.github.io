<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aoki_Umi</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-13T13:54:14.797Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aoki Umi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>信号与系统学习笔记</title>
    <link href="http://yoursite.com/2021/11/11/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2021/11/11/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-11T13:37:22.000Z</published>
    <updated>2021-11-13T13:54:14.797Z</updated>
    
    <content type="html"><![CDATA[<p>大二期中复习</p><hr><h1 id="基础数学"><a href="#基础数学" class="headerlink" title="基础数学"></a>基础数学</h1><p><img src="/2021/11/11/信号与系统学习笔记/1.png" alt=""></p><p>$e^{j\theta}=cos(\theta)+jsin(\theta)$</p><p>$cos(\theta)=\frac{e^{j\theta}+e^{-j\theta }}{2}$</p><p>$sin(\theta)=\frac{e^{j\theta}-e^{-j\theta }}{2j}$<br>$$<br>\sum_{n=0}^{\infty}{(z_0)^n=\frac{1}{1-z_0}} ,|z_0|&lt;1<br>$$</p><h1 id="连续信号与离散信号"><a href="#连续信号与离散信号" class="headerlink" title="连续信号与离散信号"></a>连续信号与离散信号</h1><p><strong>信号的分类</strong><br>$$<br>E_{\infty}=\int_{-\infty}^{\infty}|x(t)|^2dt<br>=\sum_{n=-\infty}^{\infty}|x[n]|^2<br>$$</p><p>$$<br>P_{\infty}=\lim_{N \rightarrow \infty}\frac{1}{2T}\int_{-T}^{T}|x(t)|^2dt=<br>\lim_{N \rightarrow \infty}\frac{1}{2N+1}\sum_{-N}^{N}|x[t]|^2<br>$$</p><ul><li>有限能量信号（Finite‐energy signal）:$E_{\infty}&lt;\infty,P_{\infty}=0$</li><li>有限功率信号（Finite‐power signal）：$P_{\infty}&lt;\infty,E_{\infty}=\infty$</li><li>无限功率能量信号（Infinite energy &amp; power signal ）：$P_{\infty}\rightarrow\infty,E_{\infty}\rightarrow\infty$</li></ul><p><strong>信号的偶部与奇部</strong></p><p>$x(t)=x_e(t)+x_o(t)$</p><p>$x_e(t)=E_v{x(t)}=1/2[x(t)+x(-t)]$</p><p>$x_o(t)=O_d{x(t)}=1/2[x(t)-x(-t)]$</p><p><strong>信号的频率与周期</strong></p><p>对于连续信号$x(t)=e^{jw_0t}$，有$\frac{2\pi}{|k|w_0}=\frac{T_0}{|k|}$</p><p>对于离散信号$x[n]=e^{jw_0n}$有$\frac{w_0}{2\pi}=\frac{m}{N}$，周期满足$N=m(2\pi/w_0)$ 整数</p><p>区别就是离散信号N一定为正整数</p><h2 id="基础信号"><a href="#基础信号" class="headerlink" title="基础信号"></a>基础信号</h2><p>单位脉冲信号与单位阶跃信号</p><p>离散时间的定义</p><p><img src="/2021/11/11/信号与系统学习笔记/2.png" alt=""></p><p>一些性质     </p><ul><li>$\delta[n]=u[n]-u[n-1]$</li><li><p>$u[n]=\sum_{m=\infty}^{n}\delta[m]$</p></li><li><p>$x[n]\delta[n-n_0]=x[n_0]\delta[n-n_0]$</p></li></ul><p>连续时间的定义：</p><p><img src="/2021/11/11/信号与系统学习笔记/3.png" alt=""></p><p><img src="/2021/11/11/信号与系统学习笔记/4.png" alt=""></p><p>一些性质：</p><ul><li>$u(t)=\int_{-\infty}^{t}\delta(\tau )d\tau$</li><li>$\delta(t)=\frac{du(t)}{dt}$</li><li>$x(t)\delta(t-t_0)=x(t_0)\delta(t-t_0)$</li></ul><h2 id="基本信号的性质"><a href="#基本信号的性质" class="headerlink" title="基本信号的性质"></a>基本信号的性质</h2><ul><li><p>记忆系统：输出决定于现在和以前的输入，非记忆就是只和现在状态相关</p><p>例子：$y[n]=\sum_{k=-\infty}^{n}x[k],y[n]=x[n-1]$</p></li><li><p>可逆性：不同输入对应不同输出</p><p>例子：$y[n]=0,y(t)=x^2(t)$不可逆</p></li><li><p>因果性：任何时间的输出都<strong>只由</strong>现在和以前的<strong>状态</strong>决定，注意和记忆区别</p><p>例子：$y[n]=x[n]-x[n+1],y(t)=x(t+1)$非因果</p></li><li><p>稳定性：输入有界，则输出有界一定稳定</p></li><li><p>时不变性：时间平移造成相同的输出平移</p><p><img src="/2021/11/11/信号与系统学习笔记/5.png" alt=""></p></li><li><p>线性：$x_1(t)-&gt;y_1(t),x_2(t)-&gt;y_2(t)$有$ax_1(t)+bx_2(t)-&gt;ay_1(t)+by_2(t)$</p></li></ul><p>易错例子：</p><p>$y(t)=\frac{dx(t)}{dt}=\lim_{\Delta t \rightarrow 0}\frac{x(t+\Delta t)-x(t)}{\Delta x}$</p><p>是记忆，不可逆，非因果，不稳定，时不变，非线性系统（因果用定义判断）</p><h1 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>已知x,y系统的关系，求$h(t)$就是把$x$换成$\delta$</p><p><strong>离散时间</strong></p><p><img src="/2021/11/11/信号与系统学习笔记/6.png" alt=""></p><p>例子：</p><p><img src="/2021/11/11/信号与系统学习笔记/7.png" alt=""></p><p><strong>连续时间</strong></p><p>$\int_{-\infty}^{\infty}x(\tau)h(t-\tau)d\tau=x(t)*h(t)$</p><p>同理</p><p><img src="/2021/11/11/信号与系统学习笔记/9.png" alt=""></p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p><strong>核心：以$t/n$的大小分类讨论</strong></p><p>一般习惯用画图法，画出$h(t-\tau)$的图来和$x(\tau)$相乘分类讨论</p><p>例子如下：</p><p><img src="/2021/11/11/信号与系统学习笔记/8.png" alt=""></p><p>若$h(t)=f(-t+a)$则画图时候还是处理成$\tau$不用取反，位移看成$h(\tau-(t-a))$，于是对应的位移坐标是$t-a$</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>以连续时间为例子，离散时间同理</p><ul><li><p>交换律：$x(t)<em>h(t)=h(t)</em>x(t)$</p></li><li><p>分配律：$x(t)<em>(h_1(t)+h_2(t))=x(t)</em>h_1(t)+x(t)*h_2(t)$</p></li><li><p>结合律：$x(t)<em>(h_1(t)</em>h_2(t))=(x(t)<em>h_1(t))</em>h_2(t))$</p></li><li><p>当且仅当$h(t)=0,\forall t \neq 0$，该系统是没有记忆的很好理解因为$x(t)*h(t-\tau)$ 要保证$h(t-\tau)$只有$h(t)$有值</p></li><li><p>如果$h_0(t)*h_1(t)=\delta(t)$则$h_1(t)$是$h_0(t)$的逆系统</p><p>例子：$y(t)=x(t-t_0)$逆系统表达$y_1(t)=x(t+t_0)$因为$\delta(t-t_0)<em>\delta(t+t_0)=\delta(t)$对应$h(t)</em>h_1(t)=\delta(t)$</p></li><li><p>当$h(t)=0 ,t&lt;0$时，$y(t)=x(t)*h(t)$系统是因果的</p><p>这个条件相当于$h(t-\tau)=0,t-\tau &lt;0$ </p></li><li><p>当$h(t)$绝对可积，则该系统稳定$\int_{-\infty}^{\infty}|h(\tau)|d\tau &lt; \infty$</p></li><li><p>单位阶跃响应$s(t)$就是把$x(t)=u(t)$计算得到的值，即$s(t)=\int_{-\infty}^th(\tau)d\tau$</p></li></ul><h2 id="差分与求导"><a href="#差分与求导" class="headerlink" title="差分与求导"></a>差分与求导</h2><p>本质好像就是求微分方程，先根据形式猜测特解，再找出齐次通解，最后用条件求解</p><p><img src="/2021/11/11/信号与系统学习笔记/10.png" alt=""></p><p><img src="/2021/11/11/信号与系统学习笔记/11.png" alt=""></p><p><strong>注意课件上最后带入的时候写错了，负号消失了</strong></p><p>至于差分就是等比\等差数列求解</p><p>然后有一个画图表示的</p><p><img src="/2021/11/11/信号与系统学习笔记/12.png" alt=""></p><p><img src="/2021/11/11/信号与系统学习笔记/13.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大二期中复习&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基础数学&quot;&gt;&lt;a href=&quot;#基础数学&quot; class=&quot;headerlink&quot; title=&quot;基础数学&quot;&gt;&lt;/a&gt;基础数学&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/11/11/信号与系统学习笔记/1.png&quot; alt=</summary>
      
    
    
    
    <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="信号与系统" scheme="http://yoursite.com/tags/信号与系统/"/>
    
  </entry>
  
  <entry>
    <title>算法复习</title>
    <link href="http://yoursite.com/2021/11/08/%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/11/08/%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-11-08T13:37:22.000Z</published>
    <updated>2021-11-09T13:49:08.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h1><h2 id="链表-List"><a href="#链表-List" class="headerlink" title="链表(List)"></a>链表(List)</h2><p>记录头尾指针代表链表的开始和结束，中间用next表示前后关系的线性结构。</p><h3 id="支持的操作与其复杂度"><a href="#支持的操作与其复杂度" class="headerlink" title="支持的操作与其复杂度"></a>支持的操作与其复杂度</h3><p>· 头尾插入元素$O(1)$，删除尾部$O(n)$</p><p>· 其他位置插入删除都是$O(n)$（先要找到这个元素再在前后插入，知道位置只用$O(1)$)</p><p>双向链表就是多记录了一个$pre$，没啥大区别</p><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p><img src="/2021/11/08/算法复习/1.png" alt=""></p><p>尾进尾出的结构，一般只需要一个指针，画成竖直状态比较方便理解</p><p>具体运用：逆波兰表达式，树的深度优先遍历</p><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><p>尾进头出的结构，有头尾两个指针的线性结构</p><p><img src="/2021/11/08/算法复习/2.png" alt=""></p><p>环形队列</p><p><img src="/2021/11/08/算法复习/3.png" alt=""></p><h2 id="哈希表-Hash-List"><a href="#哈希表-Hash-List" class="headerlink" title="哈希表(Hash List)"></a>哈希表(Hash List)</h2><p>自定义一种哈希方式，得到对应的哈希数，然后放在对应的数组格子里面。</p><p>但如果对应格子已经满了，就采用线性或者更跳跃的方式往后找空余的格子</p><p>线性探查(probe)——直接一个一个往后找</p><p>二次探查——$ (k+k*k)/2$     1，2，4，7，11 优点为花费时间更少</p><h2 id="树-Trees"><a href="#树-Trees" class="headerlink" title="树(Trees)"></a>树(Trees)</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>深度(depth)：<strong>根节点记为深度0</strong>，树的高度指最大深度</li><li>父亲(parent)与孩子(children)节点：从根节点往下遍历，由一条边相连的两个节点互为父亲与孩子节点，深度小的为父亲</li><li>度数(degree)：父亲节点的孩子数量</li><li>叶子节点(leaf)：孩子数量为0即度数为0的节点</li><li>根节点(root)：没有父亲的节点</li><li>祖先(ancestor)与子孙(descendant)：<strong>此概念均包括节点自己</strong>，子孙指以该节点为根的子树里所有的节点，祖先指从该节点到根节点路径上经过的所有节点</li></ul><h3 id="遍历方法-traversal"><a href="#遍历方法-traversal" class="headerlink" title="遍历方法(traversal)"></a>遍历方法(traversal)</h3><h4 id="广度优先遍历-Breadth-First-Traversal-BFS"><a href="#广度优先遍历-Breadth-First-Traversal-BFS" class="headerlink" title="广度优先遍历(Breadth-First Traversal) BFS"></a>广度优先遍历(Breadth-First Traversal) BFS</h4><p><img src="/2021/11/08/算法复习/8.png" alt=""></p><p>很显然的遍历，运用queue队列来进行，每次先pop对头节点，再push进去当前对头节点所有的孩子</p><h4 id="深度优先搜索-Depth-first-Traversal-DFS"><a href="#深度优先搜索-Depth-first-Traversal-DFS" class="headerlink" title="深度优先搜索(Depth-first Traversal) DFS"></a>深度优先搜索(Depth-first Traversal) DFS</h4><p>每次pop出栈头节点，push进去其孩子节点（<strong>从右到左</strong>）</p><p>用栈stack来实现</p><p><img src="/2021/11/08/算法复习/9.png" alt=""></p><h3 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h3><p>一种孩子最多只有两个的结构</p><h4 id="二叉树的深度遍历"><a href="#二叉树的深度遍历" class="headerlink" title="二叉树的深度遍历"></a>二叉树的深度遍历</h4><ul><li>前序遍历(pre-order)：根左右</li><li>中序遍历(in-order)：左根右</li><li>后序遍历(post-order)：左右根</li></ul><p><strong>都是以根的位置而记忆的</strong></p><h4 id="易混淆概念"><a href="#易混淆概念" class="headerlink" title="易混淆概念"></a>易混淆概念</h4><ul><li>满二叉树(full binary tree)：只要有孩子就必须满足两个，要么就没有</li></ul><p>​       性质：$n $ 个叶子节点，$2n-1$ 所有节点</p><ul><li><p>完美二叉树(perfect binary tree)：每层的节点全部是满的</p><p>性质：节点为$n=2^{h+1}-1$，高度为$h=\Theta(lnn)$，该层有$2^h$个叶子节点</p></li><li><p>完全二叉树(complete binary tree)：倒数第二层前都满足完美二叉树性质，最后一层可以不满</p><p>性质：节点为n，高度为$h=\lfloor lg(n) \rfloor$ </p></li></ul><h1 id="复杂度计算"><a href="#复杂度计算" class="headerlink" title="复杂度计算"></a>复杂度计算</h1><p><img src="/2021/11/08/算法复习/4.png" alt=""></p><p><img src="/2021/11/08/算法复习/5.png" alt=""></p><h1 id="算法复习"><a href="#算法复习" class="headerlink" title="算法复习"></a>算法复习</h1><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>逆序对定义：原先数组内和排序后数组顺序相反的数对</p><p>计算逆序对：用归并排序</p><h3 id="插入排序-Insertion-Sort"><a href="#插入排序-Insertion-Sort" class="headerlink" title="插入排序(Insertion Sort)"></a>插入排序(Insertion Sort)</h3><p>将序列分为有序序列和无序序列两段，每次将无序序列开头的数插入前面的有序序列中，直到所有数都有序</p><p>复杂度：最坏$O(n^2)$,平均$O(n+d)$，原地排序，稳定排序</p><p>若有$d$对逆序对，则时间为$\Theta (n+d)$ </p><p>若$d=O(n)$，时间为$\Theta(n)$</p><h3 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h3><p>从前到后比较相邻两个数的大小，交换逆序对</p><p>同时分带不带flag判断，带的话有最优复杂度，不带就没有</p><p>复杂度：最坏$O(n^2)$ 最优$O(n)$ ，原地排序，稳定排序</p><h3 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序(Merge Sort)"></a>归并排序(Merge Sort)</h3><p>归并思路，合并两个子数列的时候就是利用队列合并，所以需要新开一个数组来合并序列</p><p>复杂度：$O(nlogn)$ 非原地排序，空间$O(n)$，稳定排序</p><p>计算逆序对，直接在$b_j&lt;a_i$时候$ans+=mid-i+1$</p><h3 id="快速排序-Quick-Sort"><a href="#快速排序-Quick-Sort" class="headerlink" title="快速排序(Quick Sort)"></a>快速排序(Quick Sort)</h3><p>每次选一个pivot找到他正确的位置，然后以pivot为中心再分为两个子序列，于是剩下的就是分治思路。</p><p>找位置的方法是，从pivot开始从左到右找第一个比pivot大的数，从右到左找第一个比pivot小的数</p><p>同时每次把pivot找到的正确位置之后，就是建立一颗二叉搜索树。</p><p>从这个角度思考复杂度$a_i,a_j$会被比较到的概率为$2/j-i+1$，只有互为孩子父亲才会被比较到</p><p>故复杂度就为所有数对的可能性相加  $2n(lnn+1)$</p><p>复杂度：平均$O(nlogn)$ 最坏$O(n^2)$，原地排序，非稳定排序</p><h3 id="堆排序-Heap-Sort"><a href="#堆排序-Heap-Sort" class="headerlink" title="堆排序(Heap Sort)"></a>堆排序(Heap Sort)</h3><p>先把数据建成大根堆，每次再将堆头和最末尾的元素交换，然后pop掉这个最大的元素，再重新调成大根堆结构，这样保证每次操作都能找到现在无序序列中最大的元素，依次把大根堆规模变小，使无序序列长度逐渐变小为0。</p><p>复杂度：$O(nlogn)$，非原地排序，非稳定排序</p><h3 id="选择排序-Selection-Sort"><a href="#选择排序-Selection-Sort" class="headerlink" title="选择排序(Selection Sort)"></a>选择排序(Selection Sort)</h3><p>每次从前往后找出无序序列中最小的一个数和无序序列第一个数交换位置，暴力找，很慢。</p><p>复杂度：$O(n^2)$，原地排序，非稳定排序</p><h3 id="Master-Theorem"><a href="#Master-Theorem" class="headerlink" title="Master Theorem"></a>Master Theorem</h3><p>一个在归并算法中运用的求复杂度的理论<br>$$<br>T(n)=aT(\frac{n}{b})+f(n),T(0)=0,T(1)=\Theta(1)<br>$$<br>a代表子问题的数量，n/b指子问题的大小，f(n)是divide and combine</p><p><img src="/2021/11/08/算法复习/6.png" alt=""></p><p>这个理论运用的实例：求矩阵乘法</p><p><img src="/2021/11/08/算法复习/7.png" alt=""></p><h2 id="哈夫曼编码-Huffman-Coding"><a href="#哈夫曼编码-Huffman-Coding" class="headerlink" title="哈夫曼编码(Huffman Coding)"></a>哈夫曼编码(Huffman Coding)</h2><p>一种按字符出现频率来实现编码的方式，以此来节省空间，利用二叉树，优先队列来存储</p><p>先用优先队列记录每个字符的出现频率，频率越高在优先队列中优先级越低，就放在队列越后面</p><p><img src="/2021/11/08/算法复习/11.png" alt=""></p><p>建树过程使从前到后两两合并，得到的子树顺次插入序列，期中单字符优先级大于多个字符</p><p><img src="/2021/11/08/算法复习/12.png" alt=""></p><h2 id="二叉堆与优先队列-Heap"><a href="#二叉堆与优先队列-Heap" class="headerlink" title="二叉堆与优先队列(Heap)"></a>二叉堆与优先队列(Heap)</h2><p>优先队列就是队头固定最大最小值的数组，感觉就是排好序的数列</p><p>二叉堆的性质：大根堆就是父亲节点大于左右孩子，但左右孩子大小关系不确定，小根堆就是大小关系反一下</p><p>堆是一个完全二叉树，将数据储存在数组里的，利用下标一个父亲节点为$n$则左孩子为$2n$，右孩子$2n+1$</p><h3 id="操作与复杂度"><a href="#操作与复杂度" class="headerlink" title="操作与复杂度"></a>操作与复杂度</h3><ul><li><p>push：直接先新节点顺次加入树的最后一个节点，然后执行percolate操作，我的理解是向上翻，每次比较第$\lceil n/2 \rceil(n&gt;&gt;1)$节点和自己的大小，若不符合定义就交换。</p></li><li><p>pop：将需要pop的节点与当前堆最后一个元素交换，直接抛弃现在最后一个元，再执行percolate操作，在这里是下沉，再从根节点往下比较自己孩子$(2n,2n+1)$与自己的大小，不符合定义就交换。</p></li><li><p>build：push每个元素或者用Floyd’s Method $O(nlogn)$</p><p>大体看push和pop都当成$O(nlogn)$</p></li></ul><p>空间都是$O(n)$</p><p><img src="/2021/11/08/算法复习/10.png" alt=""></p><p>Floyd’s Method将小根堆调成为大根堆（或者将普通堆调整），就是思路是先从上往下找到所有不符合定义的根节点，从编号最大的节点依次往上做percolate操作调成，依次调整完就行。</p><h2 id="二叉搜索树-Binary-Search-Trees"><a href="#二叉搜索树-Binary-Search-Trees" class="headerlink" title="二叉搜索树(Binary Search Trees)"></a>二叉搜索树(Binary Search Trees)</h2><p>满足根节点的左子树所有值都小于自己，右子树所有值都大于自己的二叉数</p><p>理解：$BST$的结构主要和插入元素的顺序有关，优不优化完全取决顺序，所以才有了$AVL$树</p><h3 id="操作与复杂度-1"><a href="#操作与复杂度-1" class="headerlink" title="操作与复杂度"></a>操作与复杂度</h3><ul><li>Insert：总的来说就是顺着根节点往下比较，每次看是比当前节点大还是小，小就往左边走，大就往右边走，知道找到一个空位置就行</li><li>Find：和插入同理，顺着树往下走就完了</li><li>Erase：这个分三种情况，若该节点为叶子节点直接删除就行，如果有一个子树，把这个子树接上去就行，如果有两个子树，找到右子树中最小的元素和根换位置再删掉根就行，这样能保证现在右子树所有值还是大于根（最小元素），左子树所有值也小于根。同时这个最小的值一定只有一个子树或者右节点可以证明，因为使最小的不可能有左子树</li></ul><p>由于所有操作都等于$O(h)$，但高度决定于顺序所以没有定值，但最优$O(lognn)$，最坏$O(n)$</p><p><strong>一些进阶设计</strong></p><p>设计$next$边：如果该节点有右子树，根向右子树最小的值连next边</p><p>设计$previous$边：如果该节点没有右子树，找到第一个大于自己的节点向他连一条边</p><p>这个课件里没有讲有啥用，我感觉就和AC自动机一样，但不知道有啥实际运用</p><p>感觉是next在删除中比较有用吧</p><p>用$BST$找第k大：直接看根节点左右子树大小，若左子树大小$l=k$，就是root。若$l&gt;k$继续在左子树中找最大的，否则在右子树中找$k-l-1$大的，就是一个递归思路</p><h2 id="二叉平衡搜索树-AVL-Trees"><a href="#二叉平衡搜索树-AVL-Trees" class="headerlink" title="二叉平衡搜索树(AVL Trees)"></a>二叉平衡搜索树(AVL Trees)</h2><p><del>就你是我以前天天写到吐的玩意是吧！</del></p><p>就是$BST$升级版，需要保证左右子树高度差距不大于1，于是所有操作的复杂度就能在$O(logn)$了</p><p>完全二叉搜索树=平衡树</p><p>计算满足高度为h的最小平衡树$F(h)$：可得此为斐波那契数列</p><p><img src="/2021/11/08/算法复习/13.png" alt=""></p><p>得到$F(h)\approx 1.8994\phi ^h-1,\phi \approx 1.6180$</p><p>$F(h)=\Theta (\phi ^h)$</p><p>所以可得高度为h的最大平衡树$log_{\phi}{(\frac{n+1}{1.8944})}=log_{\phi}{(n+1)-1.3277}=1.4404*lg(n+1)-1.3277$</p><h3 id="操作与复杂度-2"><a href="#操作与复杂度-2" class="headerlink" title="操作与复杂度"></a>操作与复杂度</h3><p>所有操作和$BST$一样，只是插入和删除都多了一个维和操作，这里具体分析如何维护也就是$Splay$核心，同时维护都是$O(1)$</p><p>基本操作分为左旋和右旋</p><p>右旋</p><p><img src="/2021/11/08/算法复习/15.jpg" alt=""></p><p>左旋</p><p><img src="/2021/11/08/算法复习/16.jpg" alt=""></p><p>核心是找到处于不平衡状态的根，看是怎么样子不平衡</p><h4 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h4><p>左子树大于右子树两个高度，直接右旋一次就行</p><p><img src="/2021/11/08/算法复习/14.jpg" alt=""></p><h4 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h4><p>右子树大于左子树两个高度，直接左旋一次就行</p><p><img src="/2021/11/08/算法复习/17.jpg" alt=""></p><h4 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h4><p>将新的节点插入到了 n 的左孩子的右子树上导致的不平衡的情况。这时我们需要的是先对 i 进行一次左旋再对 n 进行一次右旋。</p><p><img src="/2021/11/08/算法复习/18.jpg" alt=""></p><h4 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h4><p>和LR同理不知道为啥没有图给我偷了（</p><p>总之是将新的节点插入到了 n 的右孩子的左子树上导致的不平衡的情况。这时我们需要的是先对 i 进行一次右旋再对 n 进行一次左旋。</p><p>再来看基本操作</p><ul><li>Insertion 只可能需要一次维护 $O(1)$</li><li>Erase 可能需要$O(h)$次数，需要沿着删除的节点从下到上沿着到根节点的路径往上检查节点是否需要为维护 故复杂度$O(log n)$</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础结构&quot;&gt;&lt;a href=&quot;#基础结构&quot; class=&quot;headerlink&quot; title=&quot;基础结构&quot;&gt;&lt;/a&gt;基础结构&lt;/h1&gt;&lt;h2 id=&quot;链表-List&quot;&gt;&lt;a href=&quot;#链表-List&quot; class=&quot;headerlink&quot; title=&quot;链表(</summary>
      
    
    
    
    <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="算法分析" scheme="http://yoursite.com/tags/算法分析/"/>
    
  </entry>
  
  <entry>
    <title>数学分析II总结归纳</title>
    <link href="http://yoursite.com/2021/04/23/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90II%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2021/04/23/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90II%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-23T13:37:22.000Z</published>
    <updated>2021-06-19T09:19:31.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常微分方程"><a href="#常微分方程" class="headerlink" title="常微分方程"></a>常微分方程</h1><h2 id="常规解法"><a href="#常规解法" class="headerlink" title="常规解法"></a>常规解法</h2><ol><li>分离变量法 ：$\frac{dy}{dx}=g(x)h(y) \rightarrow \int {\frac{dy}{h(y)}}=\int {g(x)dx}$</li><li>令$ u=\frac{y}{x},y’=u+xu’$</li><li>令$u=x+y,y’=u’-1$</li></ol><h2 id="一阶线性方程"><a href="#一阶线性方程" class="headerlink" title="一阶线性方程"></a>一阶线性方程</h2><p>形如$y’+P(x)y=Q(x)$ 公式$y=e^{-\int P(x)dx}(\int Q(x)e^{\int P(x)dx}dx+C)$</p><p>$Berroulli$方程形如$y’+P(x)y=Q(x)y^n (n \neq 0,1)$令$u=y^{1-n}$  有$u’+(1-n)P(x)u=(1-n)Q(x)$</p><p>有$y^{1-n}=e^{-(1-n)\int P(x)dx}(\int (1-n)Q(x)e^{\int (1-n)P(x)dx}dx+C)$</p><ul><li>可降阶微分方程</li></ul><ol><li>无y型，令$p=y’,y’’=p’$先求$y’$</li><li>无x型，令$p=y’,y’’=p \frac{dp}{dy}$</li></ol><h2 id="二阶线性方程"><a href="#二阶线性方程" class="headerlink" title="二阶线性方程"></a>二阶线性方程</h2><p>基本定义：$y’’+P(x)y’+Q(x)y=f(x)(NHL)$     $y’’+P(x)y’+Q(x)y=0(HL)$</p><p>唯一性定理：若函数p(x),q(x),f(x)在区间I上连续，$x_0 \in I $，则对任何给定的数值$\alpha ,\beta$有</p><p>$$\begin{cases} y’’+p(x)y’+q(x)y=f(x)&amp; \y(x_0)=\alpha,y’(x_0)=\beta&amp;  \end{cases}$$</p><p>存在唯一解y(x)，当$\alpha =\beta =0$该(HL)只有零解</p><p>线性相关：对函数$y_1(x),y_2(x)$若存在不全为零的常数$c_1,c_2$使$c_1y_1(x)+c_2y_2(x)\equiv 0 (x\in I)$,则这两个函数线性相关，否则使线性无关。</p><p>若$W(x)\equiv 0 \Leftrightarrow$$y_1(x),y_2(x)$线性相关</p><p>定理：设$y_1(x),y_2(x)$为HL的解，有$Liouville$公式$W(x)=W(x_0)e^{-\int_x^{x_0} p(t)dt}$</p><h3 id="解的结构"><a href="#解的结构" class="headerlink" title="解的结构"></a>解的结构</h3><p>$Liouville$公式：先找出非零特解$y_1(x)$，有$y_2(x)=y_1(x)\int  \frac{1}{y_1^2} e^{\int p(x)dx}$</p><p>一般带$x^m,e^{ax},sinmx,cosmx$ </p><h2 id="常数变易法"><a href="#常数变易法" class="headerlink" title="常数变易法"></a>常数变易法</h2><p>针对(NHL)，非齐次通解=非齐次特解+齐次通解</p><p>NHL $ y’’+p(x)y’+q(x)y=f(x)$</p><p>步骤：</p><ol><li><p>先求出齐次通解$y_1(x),y_2(x)$</p></li><li><p>求出行列式$W(x)$，求出$c_1’(x)=\frac{-y_2(x)f(x)}{W(x)},c_2’(x)=\frac{y_1(x)f(x)}{W(x)}$</p></li><li>得到非齐次特解$y^*=c_1(x)y_1(x)+c_2(x)y_2(x)$</li><li>非齐次通解$y=y^*+c_1y_1(x)+c_2y_2(x)$</li></ol><h3 id="二阶常系数齐次线性方程"><a href="#二阶常系数齐次线性方程" class="headerlink" title="二阶常系数齐次线性方程"></a>二阶常系数齐次线性方程</h3><p>形式$y’’+py’+qy=0$ 有特征方程$\lambda^2+p\lambda+q=0  $</p><table><thead><tr><th style="text-align:center">特征根</th><th style="text-align:center">通解</th></tr></thead><tbody><tr><td style="text-align:center">相异实根$\lambda_1 ,\lambda_2$</td><td style="text-align:center">$c_1e^{\lambda_1x}+c_2e^{\lambda_2x}$</td></tr><tr><td style="text-align:center">相同实根$\lambda$</td><td style="text-align:center">$c_1e^{\lambda x}+c_2xe^{\lambda x}$</td></tr><tr><td style="text-align:center">共轭复根$\alpha ,\beta$</td><td style="text-align:center">$c_1e^{\alpha x}cos\beta x+c_2e^{\alpha x}sin\beta x$</td></tr></tbody></table><p>高于二阶的方程 以此类推</p><h1 id="空间解析几何"><a href="#空间解析几何" class="headerlink" title="空间解析几何"></a>空间解析几何</h1><p>此章主要是计算，就不多写了</p><p>混合积$(\vec{a} \times \vec{b})·\vec{c}=|\vec{a} \times\vec{b}||\vec{c}|cos\theta(\vec{a} \times\vec{b},\vec{c}) $几何意义：以$\vec{a},\vec{b},\vec{c}$为同顶点三条棱的平行六面体的体积</p><p>叉乘预算律：反交换律，结合律，分配律</p><p>异面直线距离$d=\frac{|(\vec{s_1} \times \vec{s_2})\overrightarrow{p_1 p_2}}{|\vec{s_1} \times \vec{s_2}|}$</p><p>点到直线距离$d=\frac{|\overrightarrow{p_1 p_2}\times\vec{s}|}{|\vec{s}|}$</p><h1 id="多变量函数的微分学"><a href="#多变量函数的微分学" class="headerlink" title="多变量函数的微分学"></a>多变量函数的微分学</h1><p>拓扑学相关暂不列举（）</p><h2 id="多变量函数的极限"><a href="#多变量函数的极限" class="headerlink" title="多变量函数的极限"></a>多变量函数的极限</h2><p>对$\forall \varepsilon &gt;0$，当$M(x,y)\in D,\exist \delta&gt;0$,满足$0&lt;\rho(M,M_0)&lt;\delta$或者$0&lt;|x-x_0|&lt;\delta,0&lt;|y-y_0|&lt;\delta$时，有$|f(M)-a|&lt;\varepsilon$ 记为$\lim\limits_{M\rightarrow M_0} f(x)=a$</p><p>常用结论：$\lim\limits_{x\rightarrow 0,y \rightarrow 0}\frac{xy}{x+y}$不存在 令$y=-x+kx^2$得到极限为$-\frac{1}{k}$</p><p>$\lim\limits_{x\rightarrow 0,y \rightarrow 0}\frac{x^2y}{x^4+y^2}$不存在，令$y=kx,y=x^2$</p><p>$\lim\limits_{x\rightarrow 0,y \rightarrow 0}\frac{xy}{x^2+y^2}$不存在，令$y=kx$ 但有累次极限</p><p>累次极限：若存在首次极限，$\phi(x)=\lim\limits_{y\rightarrow y_0} f(x,y),\lim\limits_{x\rightarrow x_0} \phi(x)=a$则称其累次极限为a，记为$\lim\limits_{x \rightarrow x_0}\lim\limits_{y\rightarrow y_0} f(x,y)=a$</p><p><strong>技巧</strong>：遇到$x^2+y^2$ 形式的，令$x=rcos\theta,y=rsin\theta$来计算极限</p><h2 id="多变量函数的连续性"><a href="#多变量函数的连续性" class="headerlink" title="多变量函数的连续性"></a>多变量函数的连续性</h2><p>定义：$\forall \varepsilon &gt;0,\exist \delta&gt;0,\forall M\in B(M_0,\delta)=|f(M)-f(M_0)|&lt;\varepsilon$,即$\lim\limits_{M\rightarrow M_0} f(M)=f(M_0)$则称$f(M)$在$M_0$连续</p><p>类似的还有一致连续性，参考数分I就不列举了</p><h2 id="多变量函数的微分"><a href="#多变量函数的微分" class="headerlink" title="多变量函数的微分"></a>多变量函数的微分</h2><h3 id="偏微商"><a href="#偏微商" class="headerlink" title="偏微商"></a>偏微商</h3><p>偏导数定义：$f_x(x,y)=\lim\limits_{\Delta x \rightarrow 0}\frac{f(x_0+ \Delta x,y_0)-f(x_0,y_0)}{\Delta x}$ </p><p>可偏导未必连续,其他的东西再后面一并写出</p><p>定理：若$f(x,y)$的二阶混合偏导数在 $(x,y)$连续，则$f_{xy}’’(x,y)=f_{yx}’’(x,y)$</p><h3 id="可微性"><a href="#可微性" class="headerlink" title="可微性"></a>可微性</h3><p>全微分：$df(x,y)=f_x’(x,y)dx+f_y’(x,y)dy$</p><p>判断是否可微 $\lim \limits_{\Delta x \rightarrow 0,\Delta y \rightarrow 0} \frac{f(x+\Delta x,y+\Delta y)-f(x,y)-f_x’( x,y)\Delta x-f_y’( x, y)\Delta y}{\sqrt{\Delta x^2+\Delta y^2}} =0$ 则可微</p><p>若不存在或者不为0，则不可微</p><p>这几个概念的关系如图</p><p><img src="/2021/04/23/数学分析II总结/数学分析II总结\0.jpg" alt=""></p><h2 id="方向导数和梯度"><a href="#方向导数和梯度" class="headerlink" title="方向导数和梯度"></a>方向导数和梯度</h2><p>方向导数的定义：设$\vec{e}=(cos \alpha,cos\beta)$, 函数在点$(x_0,y_0)$处沿e的方向导数的定义：$\frac{\eth f}{\eth \vec{e}}(x_0,y_0)=\lim \limits_{t \rightarrow 0}\frac{f(x_0+tcos\alpha,y_0+tcos\beta)-f(x_0,y_0)}{t}$ </p><p>若f<strong>可微</strong>，$\frac{\eth f}{\eth \vec{e}}(x_0,y_0)=f_x’(x_0,y_0)cos\alpha+f_y’(x_0,y_0)cos\beta$</p><p>梯度定义：$grad f(x_0,y_0)=(f_x’(x_0,y_0),f_y’(x_0,y_0))$</p><p><strong>梯度方向使方向导数取最大值时的方向，其模就是方向导数的最大值</strong></p><h2 id="复合函数的微分"><a href="#复合函数的微分" class="headerlink" title="复合函数的微分"></a>复合函数的微分</h2><p><strong>链式法则</strong> 懂得都懂，式子太长不写了</p><p>$Laplace$方程 $\frac{\eth^2u}{\eth^2 x} +\frac{\eth^2u}{\eth^2 y}+ \frac{\eth^2u}{\eth^2 z}=0 $</p><h2 id="向量值函数的微商和微分"><a href="#向量值函数的微商和微分" class="headerlink" title="向量值函数的微商和微分"></a>向量值函数的微商和微分</h2><p>定义：$r’(t)=\lim \limits_{\Delta t \rightarrow 0}\frac{r(t+\Delta t) -r(t)}{\Delta t}$</p><p>性质：</p><ol><li>$\frac{d}{dt}(fa)=f\frac{da}{dt}+\frac{df}{dt}a$</li><li>$\frac{d}{dt}(a·b)=\frac{da}{dt}·b+a·\frac{db}{dt}$</li><li>$\frac{d}{dt}(a \times b)=\frac{da}{dt} \times b+a \times \frac{db}{dt}$</li></ol><p>$Jacobi$行列式$J_x(f)=\frac{\eth(y_1,y_2,···,y_n)}{\eth(x_1,x_2,···,x_n)}$</p><h2 id="隐函数和逆映射定理"><a href="#隐函数和逆映射定理" class="headerlink" title="隐函数和逆映射定理"></a>隐函数和逆映射定理</h2><p>隐函数存在定理：F在$M(x_0,y_0)$邻域内有连续偏导，且$F_x’(x,y) \neq 0,F_y’(x,y) \neq 0，F(x_0,y_0)=0$ ，隐函数$y=f(x)$满足$F(x,f(x))=0,y_0=f(x_0)$ 则$\frac{dy}{dx}=-\frac{F_x’(x,y)}{F_y’(x,y)}$</p><p>有$\begin{cases} F(x,y,u,v)=0 \ G(x,y,u,v)=0\end{cases}$，存在隐映射$$\begin{cases} u=u(x,y) \ v=v(x,y) \end{cases}$$ 则</p><p>$\frac{\eth u}{\eth x}=-\frac{1}{J}\frac{\eth (F,G)}{\eth (x,v)}$$\frac{\eth u}{\eth y}=-\frac{1}{J}\frac{\eth (F,G)}{\eth (y,v)}$ $\frac{\eth v}{\eth x}=-\frac{1}{J}\frac{\eth (F,G)}{\eth (u,x)}$ $\frac{\eth u}{\eth x}=-\frac{1}{J}\frac{\eth (F,G)}{\eth (u,y)}$ </p><h2 id="参数曲线"><a href="#参数曲线" class="headerlink" title="参数曲线"></a>参数曲线</h2><h3 id="空间曲线切线-法平面"><a href="#空间曲线切线-法平面" class="headerlink" title="空间曲线切线/法平面"></a>空间曲线切线/法平面</h3><p>参数式 ：$x=x(t),y=y(t),z=z(t),\vec{\iota}=(x’(t),y’(t),z’(t))$</p><p>一般式：$\begin{cases} F(x,y,u,v)=0 \ G(x,y,u,v)=0\end{cases}，\vec{\iota}=(\frac{\eth(F,G)}{\eth(y,z)},\frac{\eth(F,G)}{\eth(z,x)},\frac{\eth(F,G)}{\eth(x,y)})$</p><h3 id="平面隐式曲线"><a href="#平面隐式曲线" class="headerlink" title="平面隐式曲线"></a>平面隐式曲线</h3><p>$F(x,y)=0,(x-x_0)F_x’+(y-y_0)Fy’=0$</p><h3 id="空间曲面切平面-法线"><a href="#空间曲面切平面-法线" class="headerlink" title="空间曲面切平面/法线"></a>空间曲面切平面/法线</h3><p>隐式：$F(x,y,z)=0,\vec{n}=(F’_x,F’_y,F’_z)$</p><p>显式：$z=f(x,y),\vec{n}=(f_x’,f_y’-1)$</p><p>参数式：$\begin{cases} x=x(u,v) \ y=y(u,v) \ z=z(u,v) \end{cases},\vec{n}=(\frac{\eth(y,z)}{\eth(u,v)},\frac{\eth(z,x)}{\eth(u,v)},\frac{\eth(x,y)}{\eth(u,v)})$ </p><h2 id="多元函数的Taylor公式与极值"><a href="#多元函数的Taylor公式与极值" class="headerlink" title="多元函数的Taylor公式与极值"></a>多元函数的Taylor公式与极值</h2><p>二元函数的微分中值定理：$f(x,y)$在凸区域D内有连续的偏导数，则对D内任何两点$(x_1,y_1),(x_2,y_2)$的直线段上一点$(\xi,\zeta)$有$f(x_2,y_2)-f(x_1,y_1)=(x_2-x_1)f_x’(\xi,\zeta)+(y_2-y_1)f_y’(\xi,\zeta)$</p><p>二元函数的Taylor展开公式：$f(x,y)=f(x_0+\Delta x,y_0+\Delta y)=\sum_{m=0}^{n}\frac{1}{m!}D^mf(x_0,y_0)+R_n,R_n=\frac{1}{(n+1)!}D^{n+1}f(x_0+\theta\Delta y,y_0+\theta\Delta y)$</p><p>其中$D=\Delta x \frac{\eth}{\eth x}+\Delta y \frac{\eth}{\eth y},0&lt;\theta &lt;1$</p><h3 id="二元函数的极值"><a href="#二元函数的极值" class="headerlink" title="二元函数的极值"></a>二元函数的极值</h3><h4 id="极值的必要条件"><a href="#极值的必要条件" class="headerlink" title="极值的必要条件"></a>极值的必要条件</h4><p>$f(x,y)$在$(x_0,y_0)$处取到极值，则$f’_x(x_0,y_0)=f’_y(x_0,y_0)=0$</p><h4 id="极值的充分条件"><a href="#极值的充分条件" class="headerlink" title="极值的充分条件"></a>极值的充分条件</h4><p>记Hesse矩阵 $H=\begin{pmatrix} A=f_{xx} &amp; B=f_{xy} \ B=f_{yx} &amp; C=f_{yy} \end{pmatrix}\ Q(h,k)=\begin{pmatrix} h &amp;k \end{pmatrix}H\begin{pmatrix} h \k \end{pmatrix}=Ah^2+2Bhk+Ck^2 ,\Delta=|H|=AC-B^2$</p><ol><li>当$\Delta &gt;0,A&gt;(&lt;)0$时，即Q为正（负）定矩阵，$(x_0,y_0)$为极小（极大）值</li><li>当$\Delta &lt;0$时，即Q为不定矩阵，$(x_0,y_0)$不是极值点</li><li>当$\Delta  =0$时，即Q为半定矩阵，判断失效</li></ol><h4 id="条件极值"><a href="#条件极值" class="headerlink" title="条件极值"></a>条件极值</h4><ul><li><p>直接法</p><p>如果可以从约束条件$\phi(x,y,z)=0$解出一个变量$z=z(x,y)$则可求$u=f(x,y,z(x,y))$的无条件极值</p></li><li><p>$Lagrange$乘数法</p><p>令$L(x,y,z)=f(x,y,z)+\lambda \phi(x,y,z)$ 求其无条件极值的必要条件，即</p><p>$\begin{cases} L’_x=0 \ L’_y=0 \ L’<em>z=0 \L’</em>\lambda=0 \end{cases}$</p></li></ul><h3 id="二元函数的最值"><a href="#二元函数的最值" class="headerlink" title="二元函数的最值"></a>二元函数的最值</h3><p>原则：有界闭区域上的可微函数的最值在内部驻点或边界点取到</p><p>实际：若在区域内取驻点唯一，此为最值点</p><p>一般就考虑边界和内部，分类讨论，或者一些特殊的没有偏导数的点</p><h2 id="向量场的微商"><a href="#向量场的微商" class="headerlink" title="向量场的微商"></a>向量场的微商</h2><p>$Nabla /Hamilta$算子 $\nabla \phi =grad\phi=\frac{\eth \phi}{\eth x}\vec{i}+\frac{\eth \phi}{\eth y}\vec{j}+\frac{\eth \phi}{\eth z}\vec{k}$</p><p>设有向量场$\vec {v}(x,y,z)=P(x,y,z)\vec{i}+Q(x,y,z)\vec{j}+R(x,y,z)\vec{k}$</p><p>散度定义：$div \vec{v}=\nabla ·\vec{v}=\frac{\eth P}{\eth x}+\frac{\eth Q}{\eth y}+\frac{\eth R}{\eth z}$</p><p>故向量场的散度为数量场</p><p>旋度定义：$rot\vec{v}=\nabla \times \vec{v}=\begin{vmatrix}\vec{i} &amp; \vec{j} &amp;\vec{k} \ \frac{\eth}{\eth x} &amp; \frac{\eth}{\eth y} &amp;\frac{\eth}{\eth z}  \ P &amp; Q &amp; R \end{vmatrix}$</p><p>故向量场的旋度为向量场</p><p>运算律：</p><ol><li>$\nabla(\phi +f)=\nabla \phi+\nabla f$</li><li>$\nabla ·(\vec{a}+\vec{b})=\nabla · \vec{a}+\nabla · \vec{b}$</li><li>$\nabla \times(\vec{a}+\vec{b})=\nabla \times \vec{a}+\nabla \times \vec{b}$</li><li>$\nabla (\phi f)=\phi \nabla f+f\nabla \phi $</li><li>$\nabla (\phi \vec{a})=\phi \nabla ·\vec{a}+\vec{a} ·\nabla \phi $</li><li>$\nabla (\vec{a}\times\vec{b})=\vec{b}·\nabla \times \vec{a}-\vec{a}·\nabla \times \vec{b}$</li><li>$\nabla \times (\phi \vec{a})=\nabla \phi \times \vec{a}+\phi \nabla  \times \vec{a}$</li></ol><h1 id="二重积分"><a href="#二重积分" class="headerlink" title="二重积分"></a>二重积分</h1><p>定义：$f(x,y)$在有界闭界上定义$D=[a,b]\times [c,d]$,若对其任取矩形分割$( (\varepsilon _i \eta <em>i)\in D</em>{ij}$总有$\lim \limits_{|T| \rightarrow 0}\sum_{i=1}^{n}\sum_{j=1}^{m}f(\varepsilon _i \eta <em>i)\Delta \sigma</em>{ij}=I$</p><p>性质：</p><ol><li>线性</li><li>可加性  </li><li>单调性 $f(x,y) \leq g(x,y),\iint_D f(x,y)d\sigma \leq \iint_D g(x,y)d\sigma$</li><li>绝对值不等式 $|\iint_D f(x,y)d\sigma| \leq \iint_D |f(x,y)|d\sigma$</li><li>中值定理 $f(x,y) \in C(D) ,\exist (\xi ,\eta ) \in D , \iint_Df(x,y)d\sigma =f(\xi,\eta)A_D$</li></ol><p>计算方法：$\iint_{[a,b]\times [c,d]}f(x,y)d\sigma = \int_a^bdx\int_c^df(x,y)dy$</p><p><strong>先画图，再划分区域</strong></p><h1 id="三重积分"><a href="#三重积分" class="headerlink" title="三重积分"></a>三重积分</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常微分方程&quot;&gt;&lt;a href=&quot;#常微分方程&quot; class=&quot;headerlink&quot; title=&quot;常微分方程&quot;&gt;&lt;/a&gt;常微分方程&lt;/h1&gt;&lt;h2 id=&quot;常规解法&quot;&gt;&lt;a href=&quot;#常规解法&quot; class=&quot;headerlink&quot; title=&quot;常规解法&quot;</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="数学分析" scheme="http://yoursite.com/tags/数学分析/"/>
    
  </entry>
  
  <entry>
    <title>C&amp;C++复习笔记</title>
    <link href="http://yoursite.com/2021/01/29/C&amp;C++%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2021/01/29/C&amp;C++%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-29T07:11:08.000Z</published>
    <updated>2021-11-08T12:00:49.771Z</updated>
    
    <content type="html"><![CDATA[<p><del>清完稿子终于有时间来干正事了</del> 时隔快一个月俺终于开坑了</p><p>主要目的是复习一下C&amp;C++相关的知识</p><p>为下学期的cs100准备一下</p><p>顺便带上基础算法复习 排序算法(10种)，二分，堆栈模拟，贪心等</p><p>题目以模拟为主</p><p>首先是C&amp;C++部分的 比较预习x</p><p><del>以及因为懒栗子我基本照搬菜鸟教程（</del></p><p>会的东西不会提及大概是注重以前没注意过的</p><p>最近好像C#很流行？也许会顺带看一下</p><h1 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C&amp;C++"></a>C&amp;C++</h1><p>首先个人认为表面上看这俩最大区别是STL库</p><p>c++因为有了很多快捷的算法和函数之类的东西</p><p>还是先复习变量</p><p><strong>ps：如果是c和c++共通的东西，会用c来举例子</strong></p><p>如果不同会分两种写的</p><h2 id="基本变量"><a href="#基本变量" class="headerlink" title="基本变量"></a>基本变量</h2><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">通常是一个字节（八位）, 这是一个整数类型。</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">整型，4 个字节，取值范围 -2147483648 到 2147483647。</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。<img src="/2021/01/29/C&C++复习笔记/1.png" alt="img"></td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">双精度浮点值。双精度是1位符号，11位指数，52位小数。<img src="/2021/01/29/C&C++复习笔记/2.png" alt="img"></td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">表示类型的缺失。</td></tr><tr><td style="text-align:left">long long</td><td style="text-align:left">- 9223372036854775808 ~ 9223372036854775807（20位十进制数）</td></tr></tbody></table><h2 id="关于C-amp-C-的关键字"><a href="#关于C-amp-C-的关键字" class="headerlink" title="关于C&amp;C++的关键字"></a>关于C&amp;C++的关键字</h2><p><img src="/2021/01/29/C&C++复习笔记/15.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/16.jpg" alt=""></p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><h3 id="1．转换说明符"><a href="#1．转换说明符" class="headerlink" title="1．转换说明符"></a>1．转换说明符</h3><p>   %a(%A)   浮点数、十六进制数字和p-(P-)记数法(C99)<br>   %c       字符<br>   %d       有符号十进制整数<br>   %f       浮点数(包括float和double)<br>   %e(%E)   浮点数指数输出[e-(E-)记数法]<br>   %g(%G)   浮点数不显无意义的零”0”<br>   %i       有符号十进制整数(与%d相同)<br>   %u       无符号十进制整数<br>   %o       八进制整数  e.g.   0123<br>   %x(%X)   十六进制整数<br>   %p       指针<br>   %s       字符串<br>   %%      “%”</p><h3 id="2．标志"><a href="#2．标志" class="headerlink" title="2．标志"></a>2．标志</h3><p>   左对齐：”-“  e.g.  “%-20s”<br>   右对齐：”+” e.g.  “%+20s”<br>   空格：若符号为正，则显示空格，负则显示”-“  e.g.  “% “<br>   #：对c,s,d,u类无影响；对o类，在输出时加前缀o；对x类，在输出时加前缀0x；<br>      对e,g,f 类当结果有小数时才给出小数点。</p><h3 id="3．格式字符串（格式）"><a href="#3．格式字符串（格式）" class="headerlink" title="3．格式字符串（格式）"></a>3．格式字符串（格式）</h3><p>   ［标志］［输出最少宽度］［．精度］［长度］类型<br>   “％-md” ：左对齐，若m比实际少时，按实际输出。<br>   “%m.ns”：输出m位，取字符串(左起)n位，左补空格，当n&gt;m or m省略时m=n<br>           e.g.  “%7.2s”  输入CHINA<br>                 　      输出”   CH”<br>   “%m.nf”：输出浮点数，m为宽度，n为小数点右边数位<br>           e.g.  “%”  输入3852.99<br>                        输出3853.0<br>   长度：为ｈ短整形量,ｌ为长整形量</p><p>printf的格式控制的完整格式：<br>% - .n l或h 格式字符<br>下面对组成格式说明的各项加以说明：<br>①%：表示格式说明的起始符号，不可缺少。<br>②-：有-表示左对齐输出，如省略表示右对齐输出。<br>③0：有0表示指定空位填0,如省略表示指定空位不填。<br>④m.n：m指域宽，即对应的输出项在输出设备上所占的字符数。N指精度。用于说明输出的实型数的小数位数。为指定n时，隐含的精度为n=6位。<br>⑤l或h:l对整型指long型，对实型指double型。h用于将整型的格式字符修正为short型。</p><h2 id="关于extern"><a href="#关于extern" class="headerlink" title="关于extern"></a>关于extern</h2><p>extern用于声明某一个变量而并非定义</p><p>个人感觉和py的global很像，很tm适合出题？？</p><p>但好像只有这一个extern是用来声明全局变量？基本就是一个global的感觉</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token comment" spellcheck="true">// 函数外定义变量 x 和 y</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数内声明变量 x 和 y 为外部变量</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给外部变量（全局变量）x 和 y 赋值</span>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用函数 addtwonum</span>    result <span class="token operator">=</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result 为: %d\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token operator">&lt;&lt;</span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3</span>    <span class="token comment" spellcheck="true">// 1 2</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依旧感觉没什么卵用md</p><p>但感谢菜鸟教程告诉我了一个用途，在引用自己写的类似包？的时候的用的</p><p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p><p>addtwonum.c 文件代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token comment" spellcheck="true">/*外部变量声明*/</span> <span class="token keyword">extern</span> <span class="token keyword">int</span> x <span class="token punctuation">;</span> <span class="token keyword">extern</span> <span class="token keyword">int</span> y <span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.c 文件代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>   </span><span class="token comment" spellcheck="true">/*定义两个全局变量*/</span> <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result 为: %d\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-cpp"><code class="language-cpp">$ gcc addtwonum<span class="token punctuation">.</span>c test<span class="token punctuation">.</span>c <span class="token operator">-</span>o main$ <span class="token punctuation">.</span><span class="token operator">/</span>mainresult 为<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文件的读入与写入"><a href="#文件的读入与写入" class="headerlink" title="文件的读入与写入"></a>文件的读入与写入</h2><p>c++的话很方便</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>很简单在main的开头加两句就行</p><p>c的话有点麻烦</p><p><strong>写入文件</strong></p><p>首先是有几个模式</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">r</td><td style="text-align:left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left">打开一个文本文件，允许读写文件。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先是创建一个文件指针？</span>   fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"This is testing for fprintf...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"This is testing for fputs...\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两种用法</span>   <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读入文件</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个遇到第一个空格和换行符时，它会停止读取。</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1: %s\n"</span><span class="token punctuation">,</span> buff <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This</span>   <span class="token function">fgets</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>FILE<span class="token operator">*</span><span class="token punctuation">)</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数 fgets() 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 buf，并在最后追加一个 null 字符来终止字符串。如果这个函数在读取最后一个字符之前就遇到一个换行符 '\n' 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2: %s\n"</span><span class="token punctuation">,</span> buff <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//is testing for fprintf...</span>   <span class="token function">fgets</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>FILE<span class="token operator">*</span><span class="token punctuation">)</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3: %s\n"</span><span class="token punctuation">,</span> buff <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//This is testing for fputs...</span>   <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于和字符，字符串有关的读入复习</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常用的字符读入，读到空格为止，空格不会被跳过</span><span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读到换行符为止，不读换行符会跳过</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这几个一起读入的时候，适当getchar()来处理空格问题</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%7s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只读前7位，后面输入的不管</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//一直读入，知道遇到EOF为止，在windows里面是CTRL+Z</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>就是常用的if语句，简短精炼，但可读性极差</p><p>复习一下规则</p><p><img src="/2021/01/29/C&C++复习笔记/3.png" alt=""></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>C中一个很神奇的定义，虽然我觉得用处不大，但是没有见过还是写一下</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">enum</span> DAY <span class="token comment" spellcheck="true">//名称可以省略</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token comment" spellcheck="true">//默认后一个值为前一个+1，徐洪剑可以跳跃赋值</span><span class="token punctuation">}</span> day<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 2 3 4 10 11 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际调用如下</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">enum</span> DAY day<span class="token punctuation">;</span>    day <span class="token operator">=</span> WED<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>day <span class="token operator">=</span> MON<span class="token punctuation">;</span> day <span class="token operator">&lt;=</span> SUN<span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"枚举元素：%d \n"</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只有连续的枚举可以遍历</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>每一个储存的变量，都有一个与其对应的储存地址，指针便是指向这个地址，调用该地址的用途</p><p>简单的例子</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 实际变量的声明 */</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ip<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 指针变量的声明 */</span>   ip <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 在指针变量中存储 var 的地址 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"var 变量的地址: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>var  <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 在指针变量中存储的地址 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ip 变量存储的地址: %p\n"</span><span class="token punctuation">,</span> ip <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 使用指针访问值 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*ip 变量的值: %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ip <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//var 变量的地址: 0x7ffeeef168d8</span>    <span class="token comment" spellcheck="true">//ip 变量存储的地址: 0x7ffeeef168d8</span>    <span class="token comment" spellcheck="true">//*ip 变量的值: 20</span>    <span class="token comment" spellcheck="true">//sizeof(&amp;var) 查询指针的大小</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NULL指针"><a href="#NULL指针" class="headerlink" title="NULL指针"></a>NULL指针</h3><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p><p>NULL 指针是一个定义在标准库中的值为零的常量。</p><p>举个栗子</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ptr 的地址是 %p\n"</span><span class="token punctuation">,</span> ptr  <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//ptr 的地址是 0x0</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针的算术运算"><a href="#指针的算术运算" class="headerlink" title="指针的算术运算"></a>指针的算术运算</h3><p>指针支持++，–，+，- 总的来说就是可以对地址进行加减来实现遍历作用</p><p>举个栗子</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  i<span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 指针中的数组地址 */</span>   ptr <span class="token operator">=</span> var<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最开始默认为一个数字的位置</span>   <span class="token comment" spellcheck="true">//ptr = &amp;var[MAX-1];最后一个位置</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"存储地址：var[%d] = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> ptr <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"存储值：var[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>ptr <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 指向下一个位置 */</span>      ptr<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针可以用关系运算符进行比较，如 ==、&lt; 和 &gt;</p><p>这个很好理解 不解释了</p><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>数组的地址就是储存第一位的地址</p><p>指针指向的内容可以是数字或者字符</p><p>都可以自己定义</p><p>试了一下好像如果是数字不能随便乱搞？</p><p>int指向int是不行的，反正有问题 ，要用只能用系统的地址不能瞎搞</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 赋值为整数的地址 */</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of var[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>                   <span class="token string">"Zara Ali"</span><span class="token punctuation">,</span>                   <span class="token string">"Hina Ali"</span><span class="token punctuation">,</span>                   <span class="token string">"Nuha Ali"</span><span class="token punctuation">,</span>                   <span class="token string">"Sara Ali"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义指针指向字符串</span>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of names[%d] = %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"loc of names[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//储存地址打印</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*Value of names[0] = Zara Ali    loc of names[0] = 90    Value of names[1] = Hina Ali    loc of names[1] = 72    Value of names[2] = Nuha Ali    loc of names[2] = 78    Value of names[3] = Sara Ali    loc of names[3] = 83*/</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很有趣的是用指针定义的字符串和直接用数组定义的字符串，他们两个的地址差距很大x</p><h3 id="多重指针"><a href="#多重指针" class="headerlink" title="多重指针"></a>多重指针</h3><p><img src="/2021/01/29/C&C++复习笔记/4.png" alt=""></p><p>总之还是很好理解的，能套很多层</p><h3 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h3><p>函数里也允许定义和传递指针，这个也很好理解</p><p>也允许函数的返回值是指针</p><p>但有一个要注意的地方</p><p><strong>C&amp;C++不支持在调用函数时返回局部变量的地址，除非定义局部变量为 static 变量。</strong></p><p>栗子</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> </span><span class="token comment" spellcheck="true">/* 要生成和返回随机数的函数 */</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">getRandom</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">int</span>  r<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须这样写</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 设置种子 */</span>   <span class="token function">srand</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 要调用上面定义函数的主函数 */</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 一个指向整数的指针 */</span>   <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(p + [%d]) : %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C 不支持在调用函数时返回局部变量的地址，除非定义局部变量为 static 变量。</p><p>因为局部变量是存储在内存的栈区内，当函数调用结束后，局部变量所占的内存地址便被释放了，因此当其函数执行完毕后，函数内的变量便不再拥有那个内存地址，所以不能返回其指针。</p><p>除非将其变量定义为 static 变量，static 变量的值存放在内存中的静态数据区，不会随着函数执行的结束而被清除，故能返回其地址。</p><p>感觉理解的不算很透彻，后期再继续补充</p><h3 id="手写swap"><a href="#手写swap" class="headerlink" title="手写swap"></a>手写swap</h3><p>用了指针的写法，反正很绕</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>         tmp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>         <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>         <span class="token operator">*</span>b<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h2 id="一个无语的东西"><a href="#一个无语的东西" class="headerlink" title="一个无语的东西"></a>一个无语的东西</h2><p>在写c代码的时候，无意中发现nmd为什么c不支持定义的时候直接赋值？？？实属弱智操作，每次写循环tmd都要把i放在外面写，乌鱼子 （原来是我没有c11,小丑竟是我自己（</p><p>补充,c没有class气死我了</p><h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><p><code>malloc()</code>函数，用于向系统申请内存</p><p><code>free()</code>释放<code>malloc</code>或<code>calloc、realloc</code>函数给指针变量分配的内存空间的函数使用后该指针变量一定要重新指向NULL，防止野指针出现，有效 规避误操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>pArray<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    pArray<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将size大小的float空间赋给指针</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*access the array*/</span>    <span class="token function">free</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法复习"><a href="#算法复习" class="headerlink" title="算法复习"></a>算法复习</h1><p><strong>用于练习，不做特殊说明都用c来编写</strong></p><h2 id="十大排序算法"><a href="#十大排序算法" class="headerlink" title="十大排序算法"></a>十大排序算法</h2><p>首先写一下基本的相关定义</p><p>1、稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 仍然在 b 的前面，则为稳定排序。</p><p>2、非稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 可能不在 b 的前面，则为非稳定排序。</p><p>3、原地排序：原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。</p><p>4、非原地排序：需要利用额外的数组来辅助排序。</p><p><a href="https://www.cnblogs.com/itsharehome/p/11058010.html" target="_blank" rel="noopener">参考1</a><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">参考2</a></p><p><strong>ps:由于原po很作死想写伪sort代替，于是引入了begin和end参数，导致某些过程变得十分复杂，大家千万不要学我</strong></p><p><strong>一下代码全部是原po自己手撸的，一定不是最简写法，也不好看，就是很好理解，简单来说就是：下面请欣赏Aoki_Umi用作死的c手撸十大排序算法~</strong></p><p>介绍也比较通俗XD</p><p>为什么缩进这么奇怪：\别问，问就是vs自带的</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>冒泡排序作为一种比较经典的算法也算是很好理解的，每次遍历找出最大的数把它依次排在末尾，找到最大的数的方式就是比较相邻两个数的大小，越大的数越往后面移动，全遍历找一遍就行了</p><p><img src="/2021/01/29/C&C++复习笔记/1.gif" alt=""></p><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(n^2)$ 最优$O(n)$空间$O(1)$ 总的来说还是很慢的</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>稳定排序  ，原地排序</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>普通版本：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_Bubble</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">></span> begin<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> j<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> begin<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                           <span class="token punctuation">{</span>                                    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>                                    tmp<span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                    num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                                    num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                           <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化版本：</p><p>假如从开始的第一对到结尾的最后一对，相邻的元素之间都没有发生交换的操作，这意味着右边的元素总是大于等于左边的元素，此时的数组已经是有序的了，我们无需再对剩余的元素重复比较下去了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_Bubble</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">></span> begin<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> j<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> begin<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                           <span class="token punctuation">{</span>                                    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>                                    tmp<span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                    num<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                                    num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                           <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="算法介绍-1"><a href="#算法介绍-1" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>冒泡排序是选最大往后堆，那么选择排序就是每次找最小的往前堆。找的方法为，把序列分为有序列$R1[1,2,…,i]$与无序列（没有排序过的原始序列）$R2[i+1,i+2,…,n]$两大段，每次找出无序列中最小的元素与无序列中第一个元素交换位置，如此有序列长度逐渐增加直到整个序列有序。</p><p><img src="/2021/01/29/C&C++复习笔记/2.gif" alt=""></p><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(n^2)$无论如何都是$O(n^2)$，空间$O(1)$，实在是慢</p><h4 id="稳定性-1"><a href="#稳定性-1" class="headerlink" title="稳定性"></a>稳定性</h4><p>非稳定排序  ，原地排序</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_selection</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> j<span class="token punctuation">,</span>min<span class="token punctuation">;</span>                  min <span class="token operator">=</span> i<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>num<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>                           <span class="token punctuation">{</span>                                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>                  tmp <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                  num<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="算法介绍-2"><a href="#算法介绍-2" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>这个算法形象说就是每次把后面一个没排过序的元素不断往有序的元素里面插，从后往前扫，<del>为啥觉得越来越低效了（bushi</del> 这玩意需要手写队列。。。。说实话用c++堆好像是不是好很多（其实就是快乐的优先队列）越来越复杂了x</p><p><img src="/2021/01/29/C&C++复习笔记/3.gif" alt=""></p><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(n^2)$无论如何都是$O(n^2)$，空间$O(1)$，实在是慢</p><h4 id="稳定性-2"><a href="#稳定性-2" class="headerlink" title="稳定性"></a>稳定性</h4><p>稳定排序  ，原地排序</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort_insertion</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>                  tmp <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> j<span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//由于我多了参数为了防止意外我写了特判x</span>                           j <span class="token operator">=</span> begin <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span>begin<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>                                    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>tmp<span class="token punctuation">)</span>                                             <span class="token keyword">break</span><span class="token punctuation">;</span>                                             <span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true">//j+1是要插入的位置</span>                  <span class="token keyword">int</span> k<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">></span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>                           num<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="算法介绍-3"><a href="#算法介绍-3" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>是插入排序的优化版本，每次把序列分成len/2组，每组跨元素相邻如图所示，每次按组来进行插入排序，以达到优化的效果</p><p><img src="/2021/01/29/C&C++复习笔记/4.jpg" alt=""></p><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(n^{1.3})$最优$O(n)$最坏$O(n^2)$空间$O(1)$ 玄学的东西</p><h4 id="稳定性-3"><a href="#稳定性-3" class="headerlink" title="稳定性"></a>稳定性</h4><p>非稳定排序 ，原地排序</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>此代码我撸的异常艰辛，主要是因为，太绕了。。。，加了奇怪的参数后</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort_shell</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> gap<span class="token punctuation">;</span>         <span class="token keyword">void</span> <span class="token function">I_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> new_begin<span class="token punctuation">,</span><span class="token keyword">int</span> new_end<span class="token punctuation">,</span><span class="token keyword">int</span> g<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> i<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> new_begin<span class="token operator">+</span>g<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> new_end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>                           tmp <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                           <span class="token keyword">int</span> j<span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>new_begin<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                                    j <span class="token operator">=</span> new_begin <span class="token operator">-</span> g<span class="token punctuation">;</span>                           <span class="token keyword">else</span>                           <span class="token punctuation">{</span>                                    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">-</span>g<span class="token punctuation">;</span> j <span class="token operator">>=</span>new_begin<span class="token punctuation">;</span>j<span class="token operator">-</span><span class="token operator">=</span>g<span class="token punctuation">)</span>                                             <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>tmp<span class="token punctuation">)</span>                                                      <span class="token keyword">break</span><span class="token punctuation">;</span>                                                      <span class="token punctuation">}</span>                           <span class="token comment" spellcheck="true">//j+1是要插入的位置</span>                           <span class="token keyword">int</span> k<span class="token punctuation">;</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">></span> j <span class="token operator">+</span> g<span class="token punctuation">;</span>k<span class="token operator">-</span><span class="token operator">=</span>g<span class="token punctuation">)</span>                                    num<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>k <span class="token operator">-</span> g<span class="token punctuation">]</span><span class="token punctuation">;</span>                           num<span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">int</span> len<span class="token punctuation">;</span>         len <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>gap<span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>gap<span class="token operator">/</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">,</span>j<span class="token operator">=</span>end<span class="token operator">-</span>gap<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> begin <span class="token operator">+</span> gap<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                           <span class="token function">I_sort</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="算法介绍-4"><a href="#算法介绍-4" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>一款很线段树的排序算法x分治思想易于理解。</p><p>主要思路是把区间每次一分为二，不断拆分成小的区间，每次大区间由两个已经有序的小区间合并，不断变得有序的过程。</p><p>问题是如何实现合并呢，这里用到的就是两个队列了。由于子区间一定有序，每次只要比较两个队列队头的大小，将小的加入新队列并将其弹出，直到一个队列元素全部弹完停止循环，就很好理解。</p><p><img src="/2021/01/29/C&C++复习笔记/5.gif" alt=""></p><h4 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(nlogn)$空间$O(n)$<del>这很线段树</del></p><h4 id="稳定性-4"><a href="#稳定性-4" class="headerlink" title="稳定性"></a>稳定性</h4><p>稳定排序 ，非原地排序</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>一举成功，一气呵成，爽</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort_merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> fr1<span class="token punctuation">,</span> fr2<span class="token punctuation">,</span>tl1<span class="token punctuation">,</span>tl2<span class="token punctuation">;</span>                  fr1 <span class="token operator">=</span> l<span class="token punctuation">;</span>                  fr2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                  tl1 <span class="token operator">=</span> mid<span class="token punctuation">;</span>                  tl2 <span class="token operator">=</span> r<span class="token punctuation">;</span>                  <span class="token keyword">int</span> new<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>flag<span class="token punctuation">;</span>                  flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>fr1<span class="token operator">></span>tl1<span class="token punctuation">)</span>                           <span class="token punctuation">{</span>                                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>fr2<span class="token operator">></span>tl2<span class="token punctuation">)</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>fr1<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">[</span>fr2<span class="token punctuation">]</span><span class="token punctuation">)</span>                           <span class="token punctuation">{</span>                                    new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>fr2<span class="token punctuation">]</span><span class="token punctuation">;</span>                                    fr2<span class="token operator">++</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                           <span class="token keyword">else</span>                            <span class="token punctuation">{</span>                                    new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>fr1<span class="token punctuation">]</span><span class="token punctuation">;</span>                                    fr1<span class="token operator">++</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>fr1<span class="token operator">++</span><span class="token punctuation">)</span>                                    new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>fr1<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">else</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>fr2<span class="token operator">++</span><span class="token punctuation">)</span>                                    new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>fr2<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">int</span> j<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                           num<span class="token punctuation">[</span>l <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> new<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>                           <span class="token keyword">return</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> mid<span class="token punctuation">;</span>                  mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                  <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">split</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">merge</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">split</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="算法介绍-5"><a href="#算法介绍-5" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>其实写这篇的主要原因就是你校夏令营面试的题目。。。。当初他让我介绍快速排序，然而我对快排一无所知。。于是就一直很想写一个排序算法介绍orz</p><p>快排是一个运用很广泛的排序算法吧，主要思想也是分治，但叙述起来比较麻烦。</p><p>主要分为三步：①找一个基准（普通来说直接选区间第一个）②通过位置的比较交换让该基准左边数都小于他，右边数都大于他，于是该数的位置就确定了③再把两边的区间重复这个操作直到每个数都找到自己的位置x</p><p>比较抽象的就是<strong>如何让他左边都大于自己，右边都小于自己</strong>（说实话下面这个图我看不懂）</p><p>我看到的另一种解释比较容易理解：将序列看作也该双端队列两个指针fr，tl分别指向队头和队尾，以及一个当前变量x。</p><p>首先令<code>x=a[fr]</code>也就是先把第一个当作基准</p><p>再从队尾往前扫找到比x小的第一个数，<code>a[fr]=a[tl]</code>将其放在之前x的位置</p><p>再从队头开始往后扫找到比x大的第一个数，<code>a[tl]=a[fr]</code>将其放在之前队尾指向的位置</p><p>如此不断循环直到<code>fr==tl,a[fr]=a[tl]=x</code>如此这般，x就找到位置了。</p><p>通俗来讲就是用小的数填充靠前的位置，大的数填充靠后的位置，最后剩下的就是x的位置了</p><p>这个就很好理解，手撸应该挺容易x</p><p><img src="/2021/01/29/C&C++复习笔记/6.gif" alt=""></p><h4 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(nlogn)$最坏$O(n^2)$空间$O(nlogn)$</p><h4 id="稳定性-5"><a href="#稳定性-5" class="headerlink" title="稳定性"></a>稳定性</h4><p>非稳定排序，原地排序</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><p>有些头尾端点情况判断也要注意，稍微调一下就行</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort_quick</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> <span class="token function">find_place</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> x<span class="token punctuation">,</span> fr<span class="token punctuation">,</span> tl<span class="token punctuation">;</span>                  x <span class="token operator">=</span> num<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                  fr <span class="token operator">=</span> l<span class="token punctuation">;</span>                  tl <span class="token operator">=</span> r<span class="token punctuation">;</span>                  <span class="token keyword">while</span><span class="token punctuation">(</span>tl<span class="token operator">></span>fr<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">while</span><span class="token punctuation">(</span>fr<span class="token operator">&lt;</span>tl<span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>tl<span class="token punctuation">]</span><span class="token operator">>=</span>x<span class="token punctuation">)</span>                                    tl<span class="token operator">--</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>tl<span class="token operator">==</span>fr<span class="token punctuation">)</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                           num<span class="token punctuation">[</span>fr<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>tl<span class="token punctuation">]</span><span class="token punctuation">;</span>                           fr<span class="token operator">++</span><span class="token punctuation">;</span>                           <span class="token keyword">while</span><span class="token punctuation">(</span>fr<span class="token operator">&lt;</span>tl<span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">)</span>                                    fr<span class="token operator">++</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>tl<span class="token operator">==</span>fr<span class="token punctuation">)</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                           num<span class="token punctuation">[</span>tl<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>fr<span class="token punctuation">]</span><span class="token punctuation">;</span>                           tl<span class="token operator">--</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  num<span class="token punctuation">[</span>fr<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                  <span class="token keyword">return</span> fr<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span>                           <span class="token keyword">return</span><span class="token punctuation">;</span>                  <span class="token keyword">int</span> loc<span class="token punctuation">;</span>                  loc <span class="token operator">=</span> <span class="token function">find_place</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> loc<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">split</span><span class="token punctuation">(</span>loc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">split</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="算法介绍-6"><a href="#算法介绍-6" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>这个要运用二叉树，大根堆小根堆的知识了，属于比较高级的算法。</p><p>二叉树就不解释了，主要谈谈大根堆和小根堆 <a href="https://www.runoob.com/w3cnote/quick-sort.html" target="_blank" rel="noopener">优质博客</a></p><p><img src="/2021/01/29/C&C++复习笔记/5.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/6.png" alt=""></p><p>大顶堆：<code>arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</code></p><p>小顶堆：<code>arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]</code></p><p>图非常好懂了就不解释了</p><p>而堆排序就是以此为基础的排序算法.</p><p>方法是:①首先以原始序列为基础构建大/小根堆,示例为大根堆.②每次将堆顶与为末尾的<strong>无序元素</strong>交换,并交换后重新调整堆的结构使其仍然是大根堆③不断重复此交换直到序列全部有序</p><p>但怎么建立一个大根堆呢?</p><p><img src="/2021/01/29/C&C++复习笔记/7.png" alt=""></p><p>我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 <code>arr.length/2-1=5/2-1=1</code>，也就是下面的6结点），从左至右，从下至上进行调整。像图例不断交换</p><p><img src="/2021/01/29/C&C++复习笔记/8.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/9.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/10.png" alt=""></p><p>下面是形象表示交换的过程w</p><p><img src="/2021/01/29/C&C++复习笔记/11.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/12.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/13.png" alt=""></p><p><img src="/2021/01/29/C&C++复习笔记/14.png" alt=""></p><h4 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(nlogn)$空间$O(1)$</p><h4 id="稳定性-6"><a href="#稳定性-6" class="headerlink" title="稳定性"></a>稳定性</h4><p>非稳定排序，原地排序</p><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><p>ps:由于个人习惯,堆还是以1开始编号</p><p>这玩意整了很久，，，因为有点忘了</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//由于堆的节点编号与其性质息息相关,把需要排序的部分切出来做排序会比较合适()</span>         <span class="token keyword">int</span> a<span class="token punctuation">[</span>end<span class="token operator">-</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>         cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">void</span> <span class="token function">build_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> ch<span class="token punctuation">;</span>                  ch <span class="token operator">=</span> p<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">;</span> ch <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>len <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>ch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span>                                    ch<span class="token operator">++</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                           <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           p <span class="token operator">=</span> ch<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">int</span> p<span class="token punctuation">;</span>         p <span class="token operator">=</span> cnt <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>                  <span class="token function">build_heap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> cnt<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">build_heap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是所有比较型的排序都搞完了，接下来是计数型排序</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><h4 id="算法介绍-7"><a href="#算法介绍-7" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>看完介绍，我：这算法也太tm暴力了吧。。。。就是开数组打标，看每个数出现的次数再把他全部排一遍。。。好家伙也太暴力了SOS </p><p>好家伙这玩意还不支持负数，太弱鸡了。。。</p><h4 id="复杂度-7"><a href="#复杂度-7" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(n+k)  $空间$O(k)  $ <del>MLE警告阿SOS</del></p><h4 id="稳定性-7"><a href="#稳定性-7" class="headerlink" title="稳定性"></a>稳定性</h4><p>稳定排序，非原地排序</p><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><p>弱智代码.jpg</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sort_count</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> maxx<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>end<span class="token operator">-</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>minn<span class="token punctuation">;</span>         maxx <span class="token operator">=</span> num<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>         minn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>minn<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> flag<span class="token punctuation">[</span>maxx<span class="token operator">-</span>minn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxx<span class="token operator">-</span>minn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                  flag<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minn<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>         cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxx<span class="token operator">-</span>minn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">int</span> j<span class="token punctuation">;</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                                    ans<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span>minn<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>         cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h4 id="算法介绍-8"><a href="#算法介绍-8" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>感觉是比较迷惑的算法，据说很快很牛逼，确实也挺牛的。但由于我不会链表，俺还是用 c++ vector来实现。。</p><p>是计数排序的高级版，总的来说就是把序列所有数据的区间分段，相当于分为多个桶，然后把数据一次按区间分别放到各个桶中，在每个桶中分别排序，最后将其合并就完了。</p><p>至于怎么查找区间内的所有数，来人，上二分！x</p><p>感觉很玄学不知道为啥这样就快很多了，据说数据越多越快x</p><p><img src="/2021/01/29/C&C++复习笔记/9.jpg" alt=""></p><h4 id="复杂度-8"><a href="#复杂度-8" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(n+k)  $最坏$O(n^2)$空间$O(n+k)  $ </p><h4 id="稳定性-8"><a href="#稳定性-8" class="headerlink" title="稳定性"></a>稳定性</h4><p>稳定排序，非原地排序</p><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><p>注意奇怪的细节（</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_bucket</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> len <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> maxx <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">int</span> d <span class="token operator">=</span> maxx <span class="token operator">-</span> minn<span class="token punctuation">;</span>         <span class="token keyword">int</span> bucket_cnt <span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> bucket<span class="token punctuation">[</span>bucket_cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> list<span class="token punctuation">[</span>bucket_cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bucket_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minn <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">int</span> loc <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>list <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> bucket_cnt<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>list<span class="token number">-1</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>loc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>loc<span class="token operator">++</span><span class="token punctuation">;</span>                   bucket<span class="token punctuation">[</span>loc<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">int</span> cnt <span class="token operator">=</span> begin<span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bucket_cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                   <span class="token function">sort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                           num<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h4 id="算法介绍-9"><a href="#算法介绍-9" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>总的来说也是一种比较神奇的桶排，然后呢也比较鸡肋，只适合小范围的数据排序。</p><p>准备10个桶分别代表数字0-9，以个位数为第一个基准，将所有的数据按个位数字投进10个桶中，再按0-9的顺序将数据倒出来，接下来按十位，百位，依次类推，直到最高位，就挺好玩的x</p><p>由于c没有动态数组，还是用c++写</p><p><img src="/2021/01/29/C&C++复习笔记/10.gif" alt=""></p><h4 id="复杂度-9"><a href="#复杂度-9" class="headerlink" title="复杂度"></a>复杂度</h4><p>时间$O(nk)$空间$O(n+k)$</p><h4 id="稳定性-9"><a href="#稳定性-9" class="headerlink" title="稳定性"></a>稳定性</h4><p>稳定排序，非原地排序（只要是计数类都是这样）</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_radio</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> maxx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                  maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>mod<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>dev<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>maxx<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  maxx <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                  cnt<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> bucket<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>dev<span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>mod<span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> begin<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">;</span>                           bucket<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">int</span> coc <span class="token operator">=</span> begin<span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                                    num<span class="token punctuation">[</span>coc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                           bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于都写完啦撒花~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;del&gt;清完稿子终于有时间来干正事了&lt;/del&gt; 时隔快一个月俺终于开坑了&lt;/p&gt;
&lt;p&gt;主要目的是复习一下C&amp;amp;C++相关的知识&lt;/p&gt;
&lt;p&gt;为下学期的cs100准备一下&lt;/p&gt;
&lt;p&gt;顺便带上基础算法复习 排序算法(10种)，二分，堆栈模拟，贪心等&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    <category term="C&amp;C++" scheme="http://yoursite.com/categories/CS/C-C/"/>
    
    
    <category term="排序" scheme="http://yoursite.com/tags/排序/"/>
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="C&amp;C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>数学分析I总结归纳</title>
    <link href="http://yoursite.com/2020/11/12/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90I%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/11/12/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90I%E6%80%BB%E7%BB%93/</id>
    <published>2020-11-12T13:37:22.000Z</published>
    <updated>2021-04-23T11:29:45.795Z</updated>
    
    <content type="html"><![CDATA[<p>由于马上要数分考试了，所以赶紧来整理一波数分相关知识点来复习x</p><p>大概以每章节的大块知识点进行分类，然后分别围绕知识点总结和体型做法总结。</p><p><del>具体概念目前仅限部分概念的完全罗列x</del></p><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><h2 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h2><h3 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h3><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><ol><li><p>实数公理 与 实数稠密性</p></li><li><p>数列极限的定义:</p><p> $\forall \varepsilon &lt;0,\exists N \in N_*$时 $\forall n&gt;N$ , 有$| a_n-a| &lt; \varepsilon$ 则称${a_n}$的极限为a，记为$lim a_n =a (n -&gt;\inf )$</p></li><li><p>数列有界，上确界和下确界</p></li><li><p>确界原理：非空上（下）有界集必有上（下）确界</p></li><li><p>区间套定理</p></li><li><p>$Stolz$定理</p></li><li><p>$Cauchy$第一定理：算数平均值的极限等于原极限，几何平均值的极限等于原极限</p></li><li><p>$Cauchy$第二定理</p></li></ol><h4 id="性质类"><a href="#性质类" class="headerlink" title="性质类"></a>性质类</h4><ol><li>收敛数列的性质</li></ol><ul><li>极限唯一</li><li>收敛数列必有界</li><li>无界数列必发散</li><li>不等式性（$lim a_n=a,lim b_n=b $ &amp; $a&gt;b$ 则 $a_n &gt; (a+b)/2 &gt; b_n$ )</li><li>保号性（$lim a_n=a,\exists N \in N_* $ 当$n&gt;N$ 有$|a_n &gt;|a|/2&gt;0$)</li><li>夹逼性</li><li>推论1</li><li>推论2</li></ul><ol start="2"><li><p>极限四则运算<strong>（必须为有限项）</strong></p></li><li><p>数列的子列收敛 $\Leftrightarrow$ 数列收敛</p></li><li><p>单调有界数列必收敛（从某项开始）</p></li></ol><h3 id="常用结论"><a href="#常用结论" class="headerlink" title="常用结论"></a>常用结论</h3><p>$$<br>\lim\limits_{x\rightarrow\infty} \sqrt[n]{a}=1(a&gt;0)<br>\lim\limits_{x\rightarrow\infty} \sqrt[n]{n}=1<br>$$</p><p>$$<br>\frac{1}{n+1} &lt;ln(1+\frac{1}{n}) &lt;\frac{1}{n}<br>$$</p><p>$$<br>\lim\limits_{x\rightarrow\infty} (1+\frac{1}{n})^{n} =e<br>$$</p><h2 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h2><ol><li>函数极限的定义：①左右极限②在点$x_0$③在正负无穷</li><li>性质：①唯一性②局部有界性③局部保号性④局部不等式性⑤夹逼性</li><li>四则运算（若有一个函数有未知极限也可以用</li><li>变量替换原则</li><li>$Heine$归并定理（常用于证明极限不存在）</li><li>$Cauchy$收敛准则</li><li>无穷大量与无穷小量</li><li>幂指函数求极限的公式</li><li>有理函数的极限公式</li></ol><p><strong>ps:以下替换只能用于乘除法，加减坚决不行，加减建议使用Taylor展开</strong><br>$$<br>x-&gt;0, x=sinx=tanx=ln(1+x)=e^x-1=arcsinx=arctanx<br>$$</p><p>$$<br>x-&gt;0,(1+x)^a=ax,1-cosx=\frac{1}{2}x^2<br>$$</p><h1 id="单变量函数的连续性"><a href="#单变量函数的连续性" class="headerlink" title="单变量函数的连续性"></a>单变量函数的连续性</h1><ol><li><p>连续的定义：$f:U(x_0)\rightarrow R,\lim\limits_{x\rightarrow x_0} f(x)=f(x_0) $</p></li><li><p>左连续与右连续的定义</p></li><li><p>间断点的定义与分类：①可去间断点：$ f(x_0+0)=f(x_0-0)\neq f(x_0)$②跳跃间断点$f(x_0+0)\neq f(x_0-0)$</p></li><li><p>运算法则：四则运算和代换都可以满足</p><p><strong>闭区间上连续函数的性质</strong></p><ol><li>零点定理：若$ f\in [a,b],f(a)*f(b)&lt;0,\exists  \varepsilon \in(a,b)f(\varepsilon)=0$</li><li>介值定理：若$ f\in [a,b],f(a)&lt;f(b),\forall \mu \in (f(a),f(b)),\exists  \varepsilon \in(a,b)使f(\varepsilon)=\mu$</li><li>有界性</li><li>最值性</li></ol></li></ol><h2 id="一致连续"><a href="#一致连续" class="headerlink" title="一致连续"></a>一致连续</h2><ol><li><p>定义：$\forall \varepsilon &gt;0,\forall x’,x’’ \in I,|x’-x’’|&lt;\delta,|f(x’)-f(x’’)|&lt;\varepsilon $  则f在I 上一致连续</p></li><li><p>$Cantor$定理：$f\in C[a,b] \rightarrow f\in U.C[a,b]$</p></li><li><p>$f \in U.C[a,b],\Leftrightarrow \exists f(a+0),f(b+0)$ </p></li><li><p>命题：$f \in C[a,\infty]\lim\limits_{x\rightarrow\infty} f(x)=A\in R$,则$ f \in U.C[A,\infty]$</p></li></ol><h1 id="单变量函数的微分学"><a href="#单变量函数的微分学" class="headerlink" title="单变量函数的微分学"></a>单变量函数的微分学</h1><p>此章节主要以罗列知识点为主</p><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><ol><li>$Fermat$定理：若f在$x_0$取极值点且在此处可导，则$f’(x)=0$ 导数为0的点叫做驻点</li><li>$Rolle$定理：f在闭区间连续开区间可导则f能去掉区间最大最小值内所有的值</li><li>$Lagrange$（拉格朗日）中值定理：f在闭区间连续开区间可导区间 $\varepsilon \in[a,b]$ 使$ f’(\varepsilon)=\frac{f(b)-f(a)}{b-a}$<ul><li>推论：f在I上连续且对$\forall x$ 有f(x)=0,则f为常值函数</li><li>推论：$|f(x)|&lt;M,|f(x_2 )-f(x_1)|&lt;M|x_2 -x_1|$</li></ul></li><li>$Cauchy$中值定理：f在闭区间连续开区间可导，$\forall x \in(a,b) ,g’(x) \not=0 ,\exists \varepsilon\in(a,b) ,\frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f’(\varepsilon)}{f(\varepsilon_)}  $</li><li>$Darboux$定理：$f \in D[a,b], f’(a)*f’(b)&lt;0 \exists \varepsilon \in(a,b) ,f’(\varepsilon)&gt;0$ </li><li>洛必达法则 0/0,$\infty /\infty$</li><li>$leibniz$法则（n阶导数）</li><li>反函数求导方法</li></ol><h2 id="函数的凸性"><a href="#函数的凸性" class="headerlink" title="函数的凸性"></a>函数的凸性</h2><ol><li>定义$\forall x_1,x_2 \in I,\forall a \in (0,1)f(ax_1+(1-a)x_2)\le af(x_1)+(1-a)f(x_2)$ </li><li>性质：f是区间上凸函数，则$\forall x \in I$ 斜率函数$k(x)=(f(x)-f(x_0))/(x-x_0)$ 在I上单增</li><li>第一充要条件：$f\in C[a,b],D[a,b]$则f(x)是[a,b]上的凸函数$\Leftrightarrow f’(x)$ 在(a,b)上单增</li><li>第二充要条件：f(x)是[a,b]上的凸函数且在[a,b]连续并二阶可导$\Leftrightarrow f’’(x)&gt;0$ </li><li>拐点定义：拐点两边有严格不同的凸凹性，只存在与二阶导数为0或不存在的点</li></ol><h2 id="Taylor展开"><a href="#Taylor展开" class="headerlink" title="Taylor展开"></a>Taylor展开</h2><ol><li><p>基本式子<br>$$<br>f(x)= \sum_{k=0}^n \frac{f^{(k)}(x_0)}{k！}(x-x_0)^k +o(x-x_0)^n   (peano余项)<br>$$</p><p>$$<br>+\frac{f^{(n+1)}(\varepsilon)}{(n+1)!}(x-x_0)^{n+1}(lagrange余项)<br>$$</p></li></ol><ol start="2"><li>$Maclaurin$公式<br>$$<br>f(x)=\sum_{k=0}^n \frac{f^{(k)}(0)}{k！}x^k+\begin{cases}o(x^n) &amp;(x-&gt;0)\ \frac{f^{(n+1)(\theta x)}}{(n+1)!x^{n+1} }&amp;(0&lt;\theta&lt;1)\end{cases}<br>$$</li></ol><ol start="3"><li>常见函数的Taylor展开式（自行手写）</li></ol><p><strong>应用</strong></p><ol><li>用Taylor展开化简求极限</li><li>将函数的n阶导数与原函数建立关系，证明不等式</li></ol><p><strong>ps :积分部分自行总结，东西太多自行手写（接下来上无穷级数</strong></p><h1 id="不定积分求法总结"><a href="#不定积分求法总结" class="headerlink" title="不定积分求法总结"></a>不定积分求法总结</h1><p>​    </p><p><strong>ps：定积分部分过于繁杂自行复习笔记</strong></p><h1 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h1><h2 id="判断级数是否收敛"><a href="#判断级数是否收敛" class="headerlink" title="判断级数是否收敛"></a>判断级数是否收敛</h2><h3 id="普通级数"><a href="#普通级数" class="headerlink" title="普通级数"></a>普通级数</h3><ol><li>$ Cauchy$判别法</li><li>部分和${S_n}$ 有上界</li><li>比较判别法（直接形式，极限形式，比值形式）</li><li>p-判别法（引入$x^p$）</li><li>开n次根号判别法 ($\sqrt[n]{a}$)</li><li>比值判别法（$a_{n+1}/a_n$)</li><li>$Rabbe$判别法</li><li>A-D判别法：①$b_n$单调有界，$a_n$收敛②$b_n$单调趋近于0，$a_n$部分有界</li></ol><h3 id="交错级数"><a href="#交错级数" class="headerlink" title="交错级数"></a>交错级数</h3><p>$leibniz$判别法：$a_n$ 单减且极限趋近于0</p><h3 id="一致收敛"><a href="#一致收敛" class="headerlink" title="一致收敛"></a>一致收敛</h3><ol><li>定义：$\forall  \varepsilon  &gt;0,\exists N=N( \varepsilon ) \in N^*,\forall n&gt;N,\forall x\in I,|f_n(x)-f(x)|&lt; \varepsilon $ 则$f_n(x)$一致收敛于f(x)</li></ol><p><strong>判别法</strong></p><ol><li>区别：点太收敛 $\forall x\in I,\forall  \varepsilon  &gt;0,\exists N=N( \varepsilon ,x) \in N^*,\forall n&gt;N,|f_n(x)-f(x)|&lt; \varepsilon $ 可见一致收敛的条件更严格</li><li>确界定理:  $\lim\limits_{n\rightarrow\infty} sup|f_n(x)-f(x)|=0 \Leftrightarrow$ $f_n(x)$ 一致收敛于$f(x)$ </li><li>$Cauchy$一致收敛准则$\forall  \varepsilon  &gt;0,\exists N=N( \varepsilon ) \in N^*,\forall n&gt;N,\forall p \in N,\forall x\in I,|f_{n+p}(x)-f_n(x)|&lt; \varepsilon $  </li><li>$Weierstrass$ 判别法：$|u_n(x)|&lt;a_n$ 且$ \sum a_n$收敛</li><li>A-D判别法：① $\sum u_n(x)$  <strong>一致</strong>收敛，$v_n(x)$关于n单调且<strong>一致</strong>有界②$\sum u_n(x)$ 的部分和函数$s_n(x)$在I <strong>一致</strong>有界，$\forall $固定$x \in I ,v_n(x)$关于n单减在I上<strong>一致</strong>趋于0</li></ol><p><strong>性质</strong></p><ol><li>连续性</li><li>逐项可积性</li><li>逐项可微性</li><li>部分可以满足极限内外交换（题目中一旦遇到，应该是可以的）</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>若级数收敛，则$a_n$的极限一定为0</li><li>条件收敛与绝对收敛</li><li>满足绝对收敛则一定条件收敛</li><li>级数收敛性有线性加减性</li><li>$Riemann$定理：收敛级数的更序级数仍然收敛</li><li>$Abel$变换</li><li>$Abel$引理</li></ol><h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h2><ol><li>$Abel$第一定理:幂函数在$x_0$收敛则当$|x|&lt;|x_0|$一致收敛，幂函数在$x_0$发散则当$|x|&gt;|x_0|$发散</li><li>幂函数收敛域的情况：①仅在x=0发散②在(-R,R)绝对收敛，在其他范围发散③在R发散</li><li>收敛半径的计算$p=\lim\frac{|a_n|}{|a_{n+1}|} 或\lim\frac{1}{ \sqrt[n]{|a_n|}}$</li><li>$Abel$第二定理</li><li>$Abel$第三定理:在趋于收敛半径极限极限可以内外交换</li></ol><p><strong>性质</strong></p><ol><li>连续性</li><li>逐项可积性</li><li>逐项可微性</li></ol><h3 id="如何求幂级数的和函数"><a href="#如何求幂级数的和函数" class="headerlink" title="如何求幂级数的和函数"></a>如何求幂级数的和函数</h3><ol><li>常见函数：</li></ol><p>$$<br>\sum_{n=1}^{\infty}\frac{x^n}{n}=ln\frac{1}{1-x}<br>\sum_{n=0}^{\infty}x^n=\frac{1}{1-x}<br>\sum_{n=1}^{\infty}x^n=\frac{x}{1-x}<br>$$</p><p>$$<br>\sum_{n=0}^{\infty}nx^n=\frac{x}{(1-x)^2}<br>$$</p><p>$$<br>\sum_{n=0}^{\infty}\frac{x^n}{n!}=e^x<br>$$</p><ol start="2"><li>方法：花式求导，逐项可导性的运用</li></ol><h3 id="如何求幂级数的Taylor展开式"><a href="#如何求幂级数的Taylor展开式" class="headerlink" title="如何求幂级数的Taylor展开式"></a>如何求幂级数的Taylor展开式</h3><ol><li>背熟常见函数的形式（过于复杂不想列举）</li><li>直接法：先求n阶导再进行推导</li><li>间接法：利用已知的函数展开式进行变形</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于马上要数分考试了，所以赶紧来整理一波数分相关知识点来复习x&lt;/p&gt;
&lt;p&gt;大概以每章节的大块知识点进行分类，然后分别围绕知识点总结和体型做法总结。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;具体概念目前仅限部分概念的完全罗列x&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&quot;极限&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="数学分析" scheme="http://yoursite.com/tags/数学分析/"/>
    
  </entry>
  
  <entry>
    <title>SP学习笔记——Matlab使用篇</title>
    <link href="http://yoursite.com/2020/10/19/SP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Matlab%E4%BD%BF%E7%94%A8%E7%AF%87/"/>
    <id>http://yoursite.com/2020/10/19/SP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94Matlab%E4%BD%BF%E7%94%A8%E7%AF%87/</id>
    <published>2020-10-19T06:50:08.722Z</published>
    <updated>2021-09-27T11:40:32.640Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始学习信号处理x</p><p>涉及到matlab的各种使用开坑记录学习</p><p>依旧采用python学习笔记的格式写法</p><hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>有很多读入方法</p><p>读入文件</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token function">load</span><span class="token punctuation">(</span>"xxxx<span class="token punctuation">.</span>mat"<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 一般是，matlabdata格式x</span><span class="token function">imread</span><span class="token punctuation">(</span>"xxx<span class="token punctuation">.</span>jpg"<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 读入图像，返回改图像的矩阵</span>img<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span>"xxx<span class="token punctuation">.</span>jpg"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">img</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">% -> R的矩阵格式</span><span class="token function">img</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">% -> G的矩阵格式</span><span class="token function">img</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">% -> B的矩阵格式</span>x<span class="token operator">=</span><span class="token function">xlsread</span><span class="token punctuation">(</span>"xxx<span class="token punctuation">.</span>xlsx"<span class="token punctuation">)</span><span class="token comment" spellcheck="true">%读入excel</span><span class="token comment" spellcheck="true">%还有很多种读入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户读入</p><pre class="line-numbers language-matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token function">input</span><span class="token punctuation">(</span>"You must write something here"<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">%可以读入整数，字符，矩阵等</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><pre class="line-numbers language-matlab"><code class="language-matlab">figure <span class="token punctuation">,</span> <span class="token function">imshow</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true">% 打开一个窗口->figure 显示图像</span><span class="token comment" spellcheck="true">%普通显示数据只需要</span>x <span class="token comment" spellcheck="true">%不加分号自动显示</span><span class="token function">xlswrite</span><span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span><span class="token string">'Sheet1'</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 输出到表格，（文件名,变量,哪张表,第几行）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>matlab里面好像主要用矩阵比较多</p><p>也能直接生成等比数列构成的数组</p><pre class="line-numbers language-matlab"><code class="language-matlab">a<span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span> # <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>  # <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>  # <span class="token number">10</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span># 以最后一次定义为准<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # <span class="token number">1</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # <span class="token number">1</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # <span class="token number">10</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>矩阵是matlab作业里常用的东西 要熟练运用</p><p>首先是基本定义</p><pre class="line-numbers language-matlab"><code class="language-matlab">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">% ;代表每一行的分割符</span><span class="token comment" spellcheck="true">% 1 2 3</span><span class="token comment" spellcheck="true">% 4 5 6</span>a<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 创建一个几行几列全是0的矩阵</span>a<span class="token operator">=</span><span class="token function">ones</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 创建一个几行几列全是1的矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>数组运算<br><code>+ , - , .*, ./, .\</code><br>对元素执行。<br>x = A./B用 A 的每个元素除以 B 的对应元素。</p><p>x = A.\B 用 B 的每个元素除以 A 的对应元素。</p><p>矩阵运算<br><code>*, /, \, ^ ,‘</code> </p><p>和线性代数的运算规则相同</p><p>直接用x=A\B 算Ax=B 解方程</p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><pre class="line-numbers language-matlab"><code class="language-matlab">a<span class="token operator">=</span><span class="token function">matrix</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token comment" spellcheck="true">% 例子</span>a<span class="token operator">=</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 第一到2行的3到4列</span>a<span class="token operator">=</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 同理 若有3个参数中间为步长两边为区间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>plot，创建 Y 中数据对 X 中对应值的二维线图。 如果 X 和 Y 都是向量，则它们的长度必须相同；<br>stem，绘制离散序列数据；<br>subplot</p><pre class="line-numbers language-matlab"><code class="language-matlab">t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"Color"<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>"LineStyle"<span class="token punctuation">,</span>"<span class="token operator">-</span>"<span class="token punctuation">,</span>"LineWidth"<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hold on<span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"Color"<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>"LineStyle"<span class="token punctuation">,</span>"<span class="token operator">-</span><span class="token operator">-</span>"<span class="token punctuation">,</span>"LineWidth"<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hold off <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>p1    <span class="token function">stem</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>p2<span class="token function">stem</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"filled"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>p3<span class="token function">stem</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"LineStyle"<span class="token punctuation">,</span>"<span class="token operator">-</span><span class="token operator">-</span>"<span class="token punctuation">,</span>"Marker"<span class="token punctuation">,</span>"<span class="token operator">*</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>p4<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"Color"<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>"LineStyle"<span class="token punctuation">,</span>"<span class="token operator">-</span>"<span class="token punctuation">,</span>"LineWidth"<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">stem</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"filled"<span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">stem</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>"LineStyle"<span class="token punctuation">,</span><span class="token string">'none'</span><span class="token punctuation">,</span>"Marker"<span class="token punctuation">,</span>"<span class="token operator">*</span>"<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>p5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/19/SP学习笔记——Matlab使用篇/1.png" alt=""></p><p>​                                                                                   p1</p><p><img src="/2020/10/19/SP学习笔记——Matlab使用篇/2.png" alt=""></p><p>​                                                                                    p2</p><p><img src="/2020/10/19/SP学习笔记——Matlab使用篇/3.png" alt=""></p><p>​                           </p><p>​                                                                                   p3</p><p>​                          <img src="/2020/10/19/SP学习笔记——Matlab使用篇/4.png" alt=""> </p><p>​                                                                                   p4</p><p><img src="/2020/10/19/SP学习笔记——Matlab使用篇/5.png" alt=""></p><p>​                                                                                   p5</p><h1 id="进阶学习"><a href="#进阶学习" class="headerlink" title="进阶学习"></a>进阶学习</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近开始学习信号处理x&lt;/p&gt;
&lt;p&gt;涉及到matlab的各种使用开坑记录学习&lt;/p&gt;
&lt;p&gt;依旧采用python学习笔记的格式写法&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;</summary>
      
    
    
    
    <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    <category term="SIGNAL_PROCESSING" scheme="http://yoursite.com/categories/CS/SIGNAL-PROCESSING/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="信号处理" scheme="http://yoursite.com/tags/信号处理/"/>
    
  </entry>
  
  <entry>
    <title>信号与系统学习笔记</title>
    <link href="http://yoursite.com/2020/10/09/SP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%90%86%E8%AE%BA%E7%AF%87/"/>
    <id>http://yoursite.com/2020/10/09/SP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%90%86%E8%AE%BA%E7%AF%87/</id>
    <published>2020-10-09T02:19:51.814Z</published>
    <updated>2021-11-11T07:13:46.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="傅里叶变换Fourier-Transform"><a href="#傅里叶变换Fourier-Transform" class="headerlink" title="傅里叶变换Fourier Transform"></a>傅里叶变换Fourier Transform</h1><h2 id="引述"><a href="#引述" class="headerlink" title="引述"></a>引述</h2><p>傅里叶变换主要应用于将信号经过处理后变成不同频率的组成</p><p>大概就会将合成的频率组合拆分成单个信号</p><p>有点类似于棱镜对于光，白光透过棱镜会分成不同的彩光。</p><p>将傅里叶变换看做棱镜，信号看做光来理解就差不多</p><p><img src="/2020/10/09/SP学习笔记——理论篇/1.png" alt=""></p><h2 id="Types-of-Fourier"><a href="#Types-of-Fourier" class="headerlink" title="Types of Fourier"></a>Types of Fourier</h2><ul><li><p>Fourier series 傅里叶级数</p></li><li><p>Fourier transform 傅里叶变换</p></li><li><p>Continuous Fourier transform 持续傅里叶变换</p></li><li><p>Discrete-time Fourier transform 离散时间傅里叶变换</p></li><li><p>Discrete Fourier transform 离散傅里叶变换</p></li><li><p>Fast Fourier transform 快速傅里叶变换<del>（FFT 是法法塔！</del></p></li></ul><p>首先是傅里叶级数</p><h2 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h2><p><img src="/2020/10/09/SP学习笔记——理论篇/2.png" alt=""></p><p>傅里叶级数的公式<br>$$<br>u(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}(a_n\cos2\pi ft +b_n \sin 2\pi nft)<br>$$</p><p>$$<br>x(t) =\sum_{k=-\infty}^{\infty} a_{k}e^{jkw_{0}t}=\sum_{k=-\infty}^{\infty} a_{k}e^{jk\frac{2\pi}{T}t}<br>$$</p><p>$$<br>x[n] =\sum_{k \in \lt N \gt } a_{k}e^{jkw_{0}n}=\sum_{k \in \lt N \gt }a_{k}e^{jk\frac{2\pi}{T}n}<br>$$</p><p>$$<br>a_k =\sum_{n \in \lt N \gt} x[n]e^{-jkw_{0}n}=\sum_{x \in \lt N \gt}a_n e^{-jk\frac{2\pi}{T}n}<br>$$</p><h1 id="数字图像处理"><a href="#数字图像处理" class="headerlink" title="数字图像处理"></a>数字图像处理</h1><h2 id="拜尔滤镜-Bayer-Filter"><a href="#拜尔滤镜-Bayer-Filter" class="headerlink" title="拜尔滤镜(Bayer Filter)"></a>拜尔滤镜(Bayer Filter)</h2><p>主要把光分成红光</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;傅里叶变换Fourier-Transform&quot;&gt;&lt;a href=&quot;#傅里叶变换Fourier-Transform&quot; class=&quot;headerlink&quot; title=&quot;傅里叶变换Fourier Transform&quot;&gt;&lt;/a&gt;傅里叶变换Fourier Transfo</summary>
      
    
    
    
    <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    <category term="SIGNAL_PROCESSING" scheme="http://yoursite.com/categories/CS/SIGNAL-PROCESSING/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="信号处理" scheme="http://yoursite.com/tags/信号处理/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记</title>
    <link href="http://yoursite.com/2020/08/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/08/12/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-12T02:00:00.000Z</published>
    <updated>2021-04-28T11:03:51.961Z</updated>
    
    <content type="html"><![CDATA[<p>从今天起正式开始学习py！！！</p><p><del>咸鱼了这么多天了终于开始搞点东西了</del></p><p>以下为学习新语言py的学习笔记~ 大概学的是python3</p><p>MD为什么看了这么多教程基本没一个顺眼能第一次找到想写的东西）</p><p>*夹带私货注意</p><p>唯一顺眼的 -&gt;<a href="https://www.runoob.com/python3/python3-basic-syntax.html" target="_blank" rel="noopener">参考</a></p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>首先，语句末尾没有<strong>’;’</strong> <strong>划重点</strong></p><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>与c++不同，py里面是用缩进代替{}</p><p>例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 缩进不一致，会导致运行错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>python的数字变量</p><ul><li><p><code>int</code> 整型 包括c++中的long long 舒服</p></li><li><p><code>bool</code> 布尔型 这个都熟悉0，1判断</p></li><li><code>float</code> 浮点数 包括c++中的float和double 应该没有精度限制</li><li><code>complex</code> 复数 应该是高中那个i c++里面没用过不太清楚</li></ul><p>python的字符串（以下为ctrl+c Ctrl+v)</p><ul><li>python中单引号和双引号使用完全相同。</li><li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li><li>转义符 ‘\’</li><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n会显示，并不是换行。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li><li>Python中的字符串不能改变。</li><li>Python <strong>没有单独的字符类型</strong>，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标]</strong></li></ul><p><img src="/2020/08/12/python学习笔记/o99aU.png" alt=""></p><p>例子 </p><pre class="line-numbers language-python"><code class="language-python">str<span class="token operator">=</span><span class="token string">'Runoob'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 输出字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 输出第一个到倒数第二个的所有字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 输出字符串第一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 输出从第三个开始到第五个的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 输出从第三个开始后的所有字符</span><span class="token comment" spellcheck="true">#  str[起始：结束：步长]，范围包首不包尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串倒读技巧</p><p><code>str[::-1]</code></p><p>字符串常用函数</p><pre class="line-numbers language-python"><code class="language-python">str<span class="token operator">=</span><span class="token string">' Hello, world! '</span> <span class="token comment" spellcheck="true"># 以下函数均不会改变原有的字符串，需要一个新的string/list/tuple 来进行储存</span>new<span class="token operator">=</span><span class="token string">' '</span>newlist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>new<span class="token operator">=</span>str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 'Hello, World!'</span><span class="token comment" spellcheck="true"># .lstrip()，删除左侧的空白字符 .rstrip()，删除末尾的空白字符</span>new<span class="token operator">=</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 'Jello, world! ' 最后一个可以指定次数</span>newlist<span class="token operator">=</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello', ' World!'] split函数自动返回一个新的列表，以’st'为分割符号，生成新的列表</span>newlist<span class="token operator">=</span>list<span class="token punctuation">(</span>str<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello',',',' world! ']</span><span class="token comment" spellcheck="true">#该函数自动返回tuple 需要转一下类型</span><span class="token comment" spellcheck="true">#该函数已指定字符做为一个部分，分割两边，生成三部分的字符串</span><span class="token comment" spellcheck="true"># .capitalize()，将字符串第一个首字母大写（其它都小写）</span><span class="token comment" spellcheck="true"># .title()，将字符串中所有单词首字母大写（其它都小写）</span><span class="token comment" spellcheck="true"># .lower()转换所有大写字符为小写</span><span class="token comment" spellcheck="true"># .upper()转换所有小写字符为大写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python-关键字"><a href="#python-关键字" class="headerlink" title="python 关键字"></a>python 关键字</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'async'</span><span class="token punctuation">,</span> <span class="token string">'await'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="读入"><a href="#读入" class="headerlink" title="读入"></a>读入</h2><p><code>input()</code>函数，感觉类似快读<code>read()</code> 其实只是长得像罢了</p><p>找了半天才了解到py读入默认字符串模式</p><p>要输入<code>int</code> 需要<code>a=int(input())</code></p><p><strong>py读入默认数字换行输入，不能空格 </strong></p><p>空格输入读入方法</p><p><code>x, y = map(int, input().split())</code></p><h4 id="关于文件读入方式"><a href="#关于文件读入方式" class="headerlink" title="关于文件读入方式"></a>关于文件读入方式</h4><ol><li>整个文件读入（包括换行符）</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f <span class="token punctuation">:</span>    data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># read() 所有一起读包括'\n'</span>         f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># readlines() 一行行读入 不读换行符 自动去掉</span>         f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># readline() 读入'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>py输出默认换行输出</p><p><code>print()</code>注意不是<code>printf</code></p><p>若不需要换行则<code>end=&quot; &quot;</code></p><h4 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h4><pre class="line-numbers language-python"><code class="language-python">doc<span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>file<span class="token operator">=</span>doc<span class="token punctuation">)</span>doc<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 和read()相似 输出含'\n'</span><span class="token comment" spellcheck="true"># 其他运用的例子</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test1.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    此时test1.txt的内容为:123</span>f<span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test1.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1\n"</span><span class="token punctuation">,</span> <span class="token string">"2\n"</span><span class="token punctuation">,</span> <span class="token string">"3\n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    此时test1.txt的内容为:</span><span class="token comment" spellcheck="true">#    1</span><span class="token comment" spellcheck="true">#    2        </span><span class="token comment" spellcheck="true">#    3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>py所有常量赋值不论什么类型都直接= 可以自己识别</p><p>例 </p><pre class="line-numbers language-python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">2020</span>          <span class="token comment" spellcheck="true"># 整型变量</span>miles   <span class="token operator">=</span> <span class="token number">2020.0803</span>       <span class="token comment" spellcheck="true"># 浮点型变量</span>name    <span class="token operator">=</span> <span class="token string">"AokiUmi"</span>     <span class="token comment" spellcheck="true"># 字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>c++</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">2020</span>          # 整型变量<span class="token keyword">double</span> miles<span class="token operator">=</span> <span class="token number">2020.0803</span>       # 浮点型变量<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AokiUmi"</span>     # 字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>允许多变量赋值 </p><p>例<code>a=b=c=2020</code> 或<code>a,b,c=2020.0803,&#39;AokiUmi&#39;,2020</code></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>三种语法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单行</span><span class="token triple-quoted-string string">'''多行'''</span><span class="token triple-quoted-string string">"""多行2"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>number 和 string介绍过了</p><p>特别的是</p><ul><li>List（列表）可变</li><li>Tuple（元组）不可变</li><li>Set（集合）可变</li><li>Dictionary（字典）可变</li><li>Number（数字）不可变 这就意味着如果改变数字数据类型的值，将重新分配内存空间。<code>id()</code>用于查询储存地址，若改变数值id会变 其实还是可以变</li><li>String（字符串）不可变</li></ul><p>这里的可变不可变指一次赋值完成后就不能再改</p><h3 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h3><p>这个玩意好像很牛逼啊</p><p>可以数字，字符串混用6666</p><p>日常偷图 梅开二度</p><p><img src="/2020/08/12/python学习笔记/o99aU.png" alt=""></p><p><img src="/2020/08/12/python学习笔记/list_slicing1.png" alt=""><strong>变量[头下标:尾下标]</strong></p><p>这里注意单点更改/输出 看上面两行</p><p>区间更改/输出 看下面两行</p><p>和字符串一样+连接   * 复读</p><p>例如</p><pre class="line-numbers language-python"><code class="language-python">list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token number">2333.333</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#      0   1    2      3</span><span class="token comment" spellcheck="true">#    :   1    2     3       : </span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['a',20] : -> 2 指区间list[0] -> list[1]</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'AOKI'</span><span class="token punctuation">,</span><span class="token string">'UMI'</span><span class="token punctuation">,</span><span class="token string">'0315'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 玄学操作出现了 py经竟能凭空插入列表,长度乱改 牛逼！</span><span class="token comment" spellcheck="true">#    ['a', 'AOKI', 'UMI', '0315', 'error', 2333.333] 此时列表凭空变长</span><span class="token comment" spellcheck="true">#   :     1       2      3       4       5         :</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['a', 'AOKI', 'UMI', '0315', 'error', 2333.333]</span>list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'AOKI'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['UMI', '0315', 'AOKI', 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乱搞到这里py牛逼！</p><p>这就是py吗 i了i了  这比c++牛逼到哪里去了（bushi</p><p><strong>List中的元素是可以改变的</strong>  这是重点 ，真滴好用。所以字符串，数字为啥改不了？挺迷惑的</p><p>list和string截取还有一种写法 ，引入了步长（长度参数）</p><pre class="line-numbers language-python"><code class="language-python">lovelive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#            0   1   2   3   4   5   6   7</span><span class="token comment" spellcheck="true">#                ---------</span><span class="token keyword">print</span><span class="token punctuation">(</span>lovelive<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['o','e']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此写法不是截取一整段区间，而是打印出头尾字符</p><p><strong>ps：该长度不包含最尾</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>lovelive<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lovelive<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出都是['o']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>del删除函数，能删除列表中的东西</p><p>既能单点也能区间</p><p><code>len(a)</code> 求长度函数</p><pre class="line-numbers language-python"><code class="language-python">list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 增加元素</span><span class="token comment" spellcheck="true"># 常用遍历方法</span><span class="token keyword">for</span> x <span class="token keyword">in</span> list<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有很多函数就不列举了<a href="https://www.runoob.com/python3/python3-list.html" target="_blank" rel="noopener">参考</a></p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">list.append(x)</td><td style="text-align:left">把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。</td></tr><tr><td style="text-align:left">list.extend(L)</td><td style="text-align:left">通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。</td></tr><tr><td style="text-align:left">list.insert(i, x)</td><td style="text-align:left">在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td></tr><tr><td style="text-align:left">list.remove(x)</td><td style="text-align:left">删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td></tr><tr><td style="text-align:left">list.pop([i])</td><td style="text-align:left">从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）pop(1)删除第二个元素</td></tr><tr><td style="text-align:left">list.clear()</td><td style="text-align:left">移除列表中的所有项，等于del a[:]。</td></tr><tr><td style="text-align:left">list.index(x)</td><td style="text-align:left">返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td></tr><tr><td style="text-align:left">list.count(x)</td><td style="text-align:left">返回 x 在列表中出现的次数。</td></tr><tr><td style="text-align:left">list.sort()</td><td style="text-align:left">对列表中的元素进行排序。</td></tr><tr><td style="text-align:left">list.reverse()</td><td style="text-align:left">倒排列表中的元素。</td></tr><tr><td style="text-align:left">list.copy()</td><td style="text-align:left">返回列表的浅复制，等于a[:]。</td></tr></tbody></table><h3 id="元祖Tuple"><a href="#元祖Tuple" class="headerlink" title="元祖Tuple"></a>元祖Tuple</h3><p>据说这玩意和列表差不多，就是不能改？</p><p>定义方法 list用 []框起来，而元祖用()</p><p> 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>例</p><pre class="line-numbers language-python"><code class="language-python">tup<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'love'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'aoki'</span><span class="token punctuation">,</span><span class="token number">315</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'live'</span><span class="token punctuation">,</span><span class="token number">12345</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 套娃牛逼</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和list一样数字字符混用</p><p>额外语法</p><pre class="line-numbers language-python"><code class="language-python">tup<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 空</span>tup2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 一个元素，需要在元素后添加逗号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="notice："><a href="#notice：" class="headerlink" title="notice："></a>notice：</h4><ul><li><p>与字符串一样，元组的元素不能修改。</p></li><li><p>元组也可以被索引和切片，方法一样。</p></li><li>元组也可以使用+操作符进行拼接。</li></ul><p><del>讲真这玩意不支持修改，真的有啥大用处吗？列表他不香吗？</del></p><h3 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h3><p>定义方法 list用 []框起来，而set用{} 或者用<code>set()</code>用函数创建</p><p>例 <code>a=set(&#39;1234567&#39;)</code> ps: 此写法支持者一个长字符串</p><p>首先若是用{}来定义，套娃支持set套tup,list，dic</p><p>同时<code>set()</code>自带去重，自带字符串匹配算法。<del>kmp白学啦爽啦！</del></p><p>例</p><pre class="line-numbers language-python"><code class="language-python">b<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token string">'aabbccdd'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'b', 'a', 'c', 'd'}</span>a<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token string">'abcdaaasdsdscvcdcc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'c', 'b', 'a', 'v', 's', 'd'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说实话我没有看懂这个输出顺序以及set去重的算法原理，可能找人去问问）搞明白之后再写清楚</p><p>我在piazza上提问后我得到了明确的答复！</p><p>老师原文：</p><p><code>set</code> in Python is implemented with the hash table as you mentioned [1]. It is basically a <em>weaken</em> version of <code>dict</code> which allows single values to be stored in it instead of key-value pairs.</p><p>Both the Python language specification and the semantics of the data structure hash table do not require <code>set</code> to be operated in a predictable order (i.e., deterministic). In the implementation [2] of the initializer of <code>set</code>, function <code>set_update_internal</code> is called to update the set you are creating with the iterable supplied. In the function, the interpreter is basically doing the hashing operation and insert the objects to the set. For security reasons [3], a randomized hash function is used in the interpreter which gives the object a non-deterministic property. The interesting thing is that the security fix is originally for the <code>dict</code> type. Since most of the implementation of <code>set</code> is just some kind of copy-paste from the implementation of <code>dict</code>, the fix that is originally for <code>dict</code> is kept in <code>set</code>. For <code>dict</code>, starting from version 3.6, a new implementation is proposed and used that could preserve the insertion order of KV pairs. But for some reason, the new implementation is not yet applied to <code>set</code>.</p><p>In short, the non-deterministic property is caused by the randomized hash function used in the CPython interpreter. The language specification does not guarantee you as a user to expect a deterministic <code>set</code> implementation. But the situation may change from version to version.</p><p>翻译成人话就是用的确实是hash就是用了随机化数组输出，为了保证用户安全啥啥玩意 挺离谱的）</p><p>关于字符串匹配内置算法</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'aabbccdd'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abcdaaasdsdscvcdcc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a和b的差集 </span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a和b的并集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a和b的交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a和b中不同时存在的元素</span><span class="token comment" spellcheck="true"># set() 若是b-a则是 {'s', 'v'}</span><span class="token comment" spellcheck="true"># {'s', 'a', 'v', 'd', 'b', 'c'}</span><span class="token comment" spellcheck="true"># {'c', 'a', 'b', 'd'}</span><span class="token comment" spellcheck="true"># {'s', 'v'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个运算应该是直接根据set去重之后的结果进行简单的比较打标比较就完了用不到字典树，kmp这种高级玩意）</p><p>集合同样支持删除和增加</p><p><code>s.update() s.add()</code></p><p><code>s.remove()</code>如果元素不存在，则会发生错误。</p><p><code>s.discard()</code> 如果元素不存在，不会发生错误</p><p><code>s.pop()</code> 随机删元素？md绝了，你当我抽卡呢？</p><p>更多函数请见 <a href="https://www.runoob.com/python3/python3-set.html" target="_blank" rel="noopener">教程</a></p><p><strong>set不支持遍历，下标读取等操作，需要谨慎使用</strong></p><h3 id="字典dictionary"><a href="#字典dictionary" class="headerlink" title="字典dictionary"></a>字典dictionary</h3><p>dictionary与list区别看一看做list就是可以装各种东西的数组，下表都是固定的从0-？话说这些类似数组的东西储存空间有多大啊）突然迷惑</p><p>dictionary给我的感觉就是更加智能的数组，下标自定义，装的东西也非常丰富，好牛。</p><pre class="line-numbers language-python"><code class="language-python">dic<span class="token punctuation">[</span><span class="token string">'aoki'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">315</span>dic<span class="token punctuation">[</span><span class="token string">'园田海未'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'wife'</span> <span class="token comment" spellcheck="true"># 单点命名</span>dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'aoki'</span><span class="token punctuation">:</span> <span class="token number">315</span><span class="token punctuation">,</span><span class="token string">'园田海未'</span><span class="token punctuation">:</span> <span class="token string">'wife'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 多点命名</span>dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'aoki'</span><span class="token punctuation">,</span><span class="token number">315</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'园田海未'</span><span class="token punctuation">,</span><span class="token string">'wife'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此函数 直接输出用好像 </span>dict<span class="token punctuation">(</span>aoki<span class="token operator">=</span><span class="token number">315</span><span class="token punctuation">,</span>umi<span class="token operator">=</span>wife<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此函数 直接输出用好像 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内置函数介绍</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出键 下标</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出内容</span>dic<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 清楚 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>感觉这几个很像c++的string ，指函数写法</p><p>用字典来打标</p><pre class="line-numbers language-python"><code class="language-python">dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    dic<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># dic套list写法 初始化先把list都赋值</span>    dic<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment" spellcheck="true"># 普通的初始化</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    dic<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span>x    dic<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#这样就能打标了</span><span class="token comment" spellcheck="true"># ps list,tuple不能用来打标） list不好搞 tuple不能改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="notice：-1"><a href="#notice：-1" class="headerlink" title="notice："></a>notice：</h4><ul><li>字典的关键字必须为不可变类型，且不能重复。好理解下标嘛</li><li>创建空字典使用 <strong>{ }</strong>。</li></ul><h4 id="list与dic添加操作区分"><a href="#list与dic添加操作区分" class="headerlink" title="list与dic添加操作区分"></a>list与dic添加操作区分</h4><pre class="line-numbers language-python"><code class="language-python">list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># append一个值是可以重复添加的</span>dic<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">=</span>x dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>ch <span class="token punctuation">:</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dic中的key不可改变 若多次update相同的key 就会覆盖掉前面的</span><span class="token comment" spellcheck="true"># 所以dic能用来打标 list不行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于这几个类似数组的东西的储存空间</p><p>好像都是电脑默认最大储存值，和c++ (1&lt;&lt;30)那个不太一样吧，可能py没有爆空间的忧虑，很方便</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>常规与c++ 一致 不同的有</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>** 乘方（自带ksm？）</p><p>//  取整除</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p> **= 乘方赋值</p><p> //= 取整除赋值</p><p>:=  海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</p><p>例子 <code>if (n := len(a)) &gt; 10:</code></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>新增 <code>is</code>&amp;<code>is not</code> 能比较数值和类型</p><p><code>==</code> 只比较数值 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1.0</span> <span class="token boolean">True</span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token number">1.0</span> <span class="token boolean">False</span> <span class="token number">1</span> <span class="token operator">!=</span><span class="token number">1.0</span> <span class="token boolean">False</span>  <span class="token number">1</span> <span class="token keyword">is</span> <span class="token operator">not</span> <span class="token number">1.0</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li><p>&amp; binary AND – For a digit, if any number is 0, result is 0 </p></li><li><p>| binary OR – For a digit, if any number is 1, result is </p></li></ul><p>和c++一样呢懒得翻译了（bushi</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><strong>在python里面，0、’’、[]、()、{}、None为假，其它任何东西都为真</strong></p><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">逻辑表达式</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">and</td><td style="text-align:left">x and y</td><td style="text-align:left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td style="text-align:left">(a and b) 返回 20。</td></tr><tr><td style="text-align:left">or</td><td style="text-align:left">x or y</td><td style="text-align:left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td style="text-align:left">(a or b) 返回 10。</td></tr><tr><td style="text-align:left">not</td><td style="text-align:left">not x</td><td style="text-align:left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td style="text-align:left">not(a and b) 返回 False</td></tr></tbody></table><p>优先级or&gt;and&gt;not</p><p>not优先级低于非布尔运算符</p><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>in 判断该成员是否在制定序列中 </p><p>not in同理</p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">**</td><td style="text-align:left">指数 (最高优先级)</td></tr><tr><td style="text-align:left">~ + -</td><td style="text-align:left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td style="text-align:left">* / % //</td><td style="text-align:left">乘，除，求余数和取整除</td></tr><tr><td style="text-align:left">+ -</td><td style="text-align:left">加法减法</td></tr><tr><td style="text-align:left">&gt;&gt; &lt;&lt;</td><td style="text-align:left">右移，左移运算符</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">位 ‘AND’</td></tr><tr><td style="text-align:left">^ \</td><td style="text-align:left"></td><td>位运算符</td></tr><tr><td style="text-align:left">&lt;= &lt; &gt; &gt;=</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:left">== !=</td><td style="text-align:left">等于运算符</td></tr><tr><td style="text-align:left">= %= /= //= -= += *= **=</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:left">is is not</td><td style="text-align:left">身份运算符</td></tr><tr><td style="text-align:left">in not in</td><td style="text-align:left">成员运算符</td></tr><tr><td style="text-align:left">not and or</td><td style="text-align:left">逻辑运算符</td></tr></tbody></table><h2 id="整型相关函数"><a href="#整型相关函数" class="headerlink" title="整型相关函数"></a>整型相关函数</h2><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">int(x)</td><td style="text-align:left">将x转换为一个整数</td></tr><tr><td style="text-align:left">float(x)</td><td style="text-align:left">将x转换到一个浮点数</td></tr><tr><td style="text-align:left">complex(x)</td><td style="text-align:left">创建一个复数</td></tr><tr><td style="text-align:left">complex(x, y)</td><td style="text-align:left">将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</td></tr><tr><td style="text-align:left">str(x)</td><td style="text-align:left">将对象 x 转换为字符串</td></tr><tr><td style="text-align:left">repr(x)</td><td style="text-align:left">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:left">eval(s)</td><td style="text-align:left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td style="text-align:left">tuple(s)</td><td style="text-align:left">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:left">list(s)</td><td style="text-align:left">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:left">set(s)</td><td style="text-align:left">转换为可变集合</td></tr><tr><td style="text-align:left">dict(d)</td><td style="text-align:left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td style="text-align:left">frozenset(s)</td><td style="text-align:left">转换为不可变集合</td></tr><tr><td style="text-align:left">chr(x)</td><td style="text-align:left">将一个整数转换为一个字符</td></tr><tr><td style="text-align:left">ord(x)</td><td style="text-align:left">将一个字符转换为它的整数值</td></tr><tr><td style="text-align:left">hex(x)</td><td style="text-align:left">将一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:left">oct(x)</td><td style="text-align:left">将一个整数转换为一个八进制字符串</td></tr></tbody></table><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td style="text-align:left">abs(x)</td><td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td style="text-align:left">ceil(x)</td><td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td style="text-align:left">cmp(x, y)</td><td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td style="text-align:left">exp(x)</td><td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td style="text-align:left">fabs(x)</td><td style="text-align:left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td style="text-align:left">floor(x)</td><td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td style="text-align:left">log(x)</td><td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td style="text-align:left">log10(x)</td><td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td style="text-align:left">max(x1, x2,…)</td><td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td style="text-align:left">min(x1, x2,…)</td><td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td style="text-align:left">modf(x)</td><td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td style="text-align:left">pow(x, y)</td><td style="text-align:left">x**y 运算后的值。</td></tr><tr><td style="text-align:left">round(x [,n])</td><td style="text-align:left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td></tr><tr><td style="text-align:left">sqrt(x)</td><td style="text-align:left">返回数字x的平方根。</td></tr></tbody></table><p>其他见<a href="https://www.runoob.com/python3/python3-number.html" target="_blank" rel="noopener">不常用函数</a></p><h1 id="进阶编写"><a href="#进阶编写" class="headerlink" title="进阶编写"></a>进阶编写</h1><p><strong>所有东西后面：很重要千万别忘了</strong></p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul><li>for循环</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># = for(int i=1;i&lt;10;i+=3) </span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># for(int i=0;i&lt;10;i++)</span>a<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Aoki'</span><span class="token punctuation">,</span><span class="token string">'Umi'</span><span class="token punctuation">,</span><span class="token string">'0315'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历list 很慢千万别用）</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a <span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 这个好</span><span class="token comment" spellcheck="true"># : 别忘了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>while循环</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> a<span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># operation</span><span class="token keyword">else</span> <span class="token punctuation">:</span>     <span class="token keyword">break</span>    <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> a <span class="token operator">>=</span><span class="token number">2</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># operation</span><span class="token keyword">elif</span> a<span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># operation</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># operation</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数自定义"><a href="#函数自定义" class="headerlink" title="函数自定义"></a>函数自定义</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">aoki</span><span class="token punctuation">(</span>umi<span class="token punctuation">,</span> wife<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 变量</span>    <span class="token comment" spellcheck="true"># operation</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">aoki</span><span class="token punctuation">(</span>umi <span class="token punctuation">:</span>str <span class="token punctuation">,</span>wife <span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 定义变量类型</span><span class="token keyword">def</span> <span class="token function">aoki</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#放入list or tuple</span><span class="token keyword">def</span> <span class="token function">aoki</span><span class="token punctuation">(</span><span class="token operator">**</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 放入字典形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><h2 id="assert断言"><a href="#assert断言" class="headerlink" title="assert断言"></a>assert断言</h2><p>断言顾名思义</p><p>就是如果你的判断语句返回是否，程序终止进行并输出你想要的语句 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Div</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">assert</span> y<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"denominator is 0"</span>    <span class="token keyword">return</span> x<span class="token operator">/</span>y<span class="token keyword">print</span><span class="token punctuation">(</span>Div<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "d:\personal\homework\try\try.py", line 4, in &lt;module></span><span class="token comment" spellcheck="true">#     print(Div(1,0))</span><span class="token comment" spellcheck="true">#   File "d:\personal\homework\try\try.py", line 2, in Div     </span><span class="token comment" spellcheck="true">#     assert y!=0,"denominator is 0"</span><span class="token comment" spellcheck="true"># AssertionError: denominator is 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p><code>lambda</code>匿名函数，目前觉得在排序中用的很多 可以处理多key排序</p><p>主要是list，dic里面排序用的</p><p>首先list自带排序</p><pre class="line-numbers language-python"><code class="language-python">ans<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>revese<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 先按s[1],再s[0] revese表示升序还是降序，默认升序</span>ans<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s[1]降 s[0]升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h2><p>py中的结构体 称class 定义比c++麻烦很多，但仍然需要掌握</p><p><strong>类的属性：封装性，继承性，多态性</strong></p><p>判断一个对象是不是一个class <code>isinstance(x,demo)</code> <code>isinstance(demo,type)</code></p><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">aoki</span><span class="token punctuation">:</span>     value<span class="token operator">=</span><span class="token string">"aoki_umi"</span> <span class="token comment" spellcheck="true">#类变量 </span>    <span class="token keyword">def</span> __init__ <span class="token punctuation">(</span>self <span class="token punctuation">,</span>name <span class="token punctuation">,</span>age <span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name            self<span class="token punctuation">.</span>age<span class="token operator">=</span>age <span class="token comment" spellcheck="true"># 初始化自定义结构体的数值</span>    <span class="token keyword">def</span> __init__ <span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>None        self<span class="token punctuation">.</span>age<span class="token operator">=</span>None <span class="token comment" spellcheck="true"># 与前者的区别是后者数据可以为空</span>    <span class="token keyword">def</span> __init__ <span class="token punctuation">(</span>self<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 推荐写法</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>v         self<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'AOKI_UMI'</span>     <span class="token keyword">def</span> <span class="token function">pri</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 类中自定义函数 这个self好像必须写上去</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token keyword">def</span> <span class="token function">opr</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#在外面定义函数使用class aoki</span>    x<span class="token punctuation">.</span>name<span class="token operator">=</span>v <span class="token comment" spellcheck="true">#class的自定义属性可以动态改变</span><span class="token comment" spellcheck="true">#以第三种写法为例</span>AOKI<span class="token operator">=</span>aoki<span class="token punctuation">(</span><span class="token string">'umi'</span><span class="token punctuation">)</span>AOKI<span class="token punctuation">.</span>love<span class="token operator">=</span><span class="token string">'love'</span><span class="token keyword">print</span><span class="token punctuation">(</span>AOKI<span class="token punctuation">.</span>love<span class="token punctuation">,</span>AOKI<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#不会报错</span><span class="token keyword">del</span> AOKI<span class="token punctuation">.</span>name<span class="token keyword">print</span><span class="token punctuation">(</span>AOKI<span class="token punctuation">.</span>love<span class="token punctuation">,</span>AOKI<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>aoki<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># aoki_umi</span><span class="token keyword">print</span><span class="token punctuation">(</span>AOKI<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># AOKI_UMI</span>opr<span class="token punctuation">(</span>AOKI<span class="token punctuation">,</span><span class="token string">'2323'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>python支持不同类的套娃调用，还能支持多次套娃调用</p><p>很牛逼的地方就在于它的多次调用，这里面多次调用的内置顺序就是dfs和bfs</p><p>该说明搬运<a href="https://www.cnblogs.com/chengd/articles/7287528.html" target="_blank" rel="noopener">参考</a></p><p>传统的类的调用使用dfs</p><p>新类（object）使用bfs</p><p>盗的图x</p><p><img src="/2020/08/12/python学习笔记/272315068126604.jpg" alt=""></p><h4 id="标准类"><a href="#标准类" class="headerlink" title="标准类"></a>标准类</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_D</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'D.bar'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_C</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'C.bar'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_B</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B.bar'</span> <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_A</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'A.bar'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行bar方法时</span><span class="token comment" spellcheck="true"># 首先去A类中查找，如果A类中没有，则继续去B类中找，如果B类中么有，则继续去D类中找，如果D类中么有，则继续去C类中找，如果还是未找到，则报错</span><span class="token comment" spellcheck="true"># 所以，查找顺序：A --> B --> D --> C</span><span class="token comment" spellcheck="true"># 在上述查找bar方法的过程中，一旦找到，则寻找过程立即中断，便不会再继续找了</span>a<span class="token punctuation">.</span>bar_B<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新类"><a href="#新类" class="headerlink" title="新类"></a>新类</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_D</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'D.bar'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_C</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'C.bar'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_B</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'B.bar'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bar_A</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'A.bar'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行bar方法时</span><span class="token comment" spellcheck="true"># 首先去A类中查找，如果A类中没有，则继续去B类中找，如果B类中么有，则继续去C类中找，如果C类中么有，则继续去D类中找，如果还是未找到，则报错</span><span class="token comment" spellcheck="true"># 所以，查找顺序：A --> B --> C --> D</span><span class="token comment" spellcheck="true"># 在上述查找bar方法的过程中，一旦找到，则寻找过程立即中断，便不会再继续找了</span>a<span class="token punctuation">.</span>bar_C<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p><strong>多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）。也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。</strong></p><p>就是说不同的类里面可以用相同的自带函数名</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#多态：同一种事物的多种形态，动物分为人类，猪类（在定义角度）</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">'子类必须实现这个方法'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'人正在走'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pig is walking'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dog is running'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>ANIMAL<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#参数animal就是对态性的体现</span>   ANIMAL<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>people1<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#产生一个人的对象</span>pig1<span class="token operator">=</span>Pig<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#产生一个猪的对象</span>dog1<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#产生一个狗的对象</span>func<span class="token punctuation">(</span>people1<span class="token punctuation">)</span>func<span class="token punctuation">(</span>pig1<span class="token punctuation">)</span>func<span class="token punctuation">(</span>dog1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p>以下为可以重载的函数（运算符）</p><h4 id="构造和析构"><a href="#构造和析构" class="headerlink" title="构造和析构"></a>构造和析构</h4><p><code>__init__</code><br><code>__del__</code></p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p><code>__call__</code></p><h4 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h4><p><code>__str__</code><br><code>__repr__</code><br>str(x), print(X)：会先尝试<code>__str__</code>方法，然后尝试<code>__repr__</code>方法；repr(X)或交互模式下输入X，只会尝试<code>__repr__</code>方法。</p><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><p><code>__getattr__</code>：只有类中没有定义的属性点号运算才会尝试该方法<br><code>__setattr__</code>：类中所有属性的赋值语句都会尝试该方法，<code>self.attr=val</code>会变<code>self.setattr(&#39;attr&#39;,val)</code></p><p><code>__delattr__</code><br><code>__getattribute__</code>：类中所有属性的点号运算都会尝试该方法</p><h4 id="索引与分片"><a href="#索引与分片" class="headerlink" title="索引与分片"></a>索引与分片</h4><p><code>__getitem__</code><br><code>__setitem__</code><br><code>__delitem__</code></p><h4 id="迭代环境"><a href="#迭代环境" class="headerlink" title="迭代环境"></a>迭代环境</h4><p><code>__iter__</code><br><code>__next__</code><br>在所有的迭代环境中，会先尝试<code>__iter__</code>方法，然后在尝试<code>__getitem__</code>方法，但是注意迭代器根本没有重载索引表达式，所以如果需要通过while来根据下标手工迭代，那么需要定义<code>__getitem__</code>方法。</p><h4 id="成员测试"><a href="#成员测试" class="headerlink" title="成员测试"></a>成员测试</h4><p><code>__contains__</code><br>in成员测试会先尝试<strong>contains</strong>方法，然后是<code>__iter__</code>方法，最后是<code>__getitem__</code>方法。</p><h4 id="描述符属性"><a href="#描述符属性" class="headerlink" title="描述符属性"></a>描述符属性</h4><p><code>__get__</code><br><code>__set__</code><br><code>__delete__</code><br>主要这里是<code>__delete__</code>，也析构函数<code>__del__</code>是完全不同的。</p><h4 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h4><p><code>__lt__</code><br><code>__le__</code><br><code>__gt__</code><br><code>__ge__</code><br><code>__eq__</code>： !=和==都会尝试该方法，所以需要确保两个运算符都正确地作用。<br>请看下面的实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  self<span class="token punctuation">.</span>data <span class="token operator">==</span> valuex <span class="token operator">=</span> X<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为</p><pre><code>FalseTrue</code></pre><h4 id="数学运算操作"><a href="#数学运算操作" class="headerlink" title="数学运算操作"></a>数学运算操作</h4><p><code>__add__</code>, <code>__iadd__</code>, <code>__radd__</code><br><code>__sub__</code>, <code>__isub__</code>, <code>__rsub__</code><br><code>__mul__</code>, <code>__imul__</code>：乘法<br><code>__neg__</code>, <code>__pos__</code>：表示-obj， +obj<br><code>__abs__</code><br><code>__floordiv__</code>, <code>__ifloordiv__</code>, <code>__truediv__</code>, <code>__itruediv__</code><br><code>__mod__</code>, <code>__imod__</code>, <code>__imod__</code><br><code>__pow__</code>, <code>__ipow__</code><br>a += b会尝试增强加法<code>__iadd__</code>，然后尝试普通加法<code>__add__</code><br>x = b + obj：如果b不是类实例时，会调用右侧加法<code>__radd__</code><br>当我们把两个实例相加的时候，Python运行<code>__add__</code>，它反过来通过简化左边的运算数来触发<code>__radd__</code>。</p><h4 id="对象运算操作"><a href="#对象运算操作" class="headerlink" title="对象运算操作"></a>对象运算操作</h4><p><code>__concat__</code>：比如序列a,b的加法a+b<br><code>__iconcat__</code></p><h4 id="位运算符-1"><a href="#位运算符-1" class="headerlink" title="位运算符"></a>位运算符</h4><p><code>__and__</code>, <code>__iand__</code><br><code>__or__</code>, <code>__ior__</code>, <code>__xor__</code>, <code>__ixor__</code><br><code>__inv__</code>, <code>__invert__</code> : ~obj<br><code>__lshift__</code>, <code>__ilshift__</code>, <code>__rshift__</code>, <code>__irshift__</code><br>a &amp;=b：会先尝试<code>__iand__</code>，然后尝试<code>__add__</code></p><h4 id="布尔测试"><a href="#布尔测试" class="headerlink" title="布尔测试"></a>布尔测试</h4><p><code>__bool__</code><br><code>__len__</code><br>布尔测试会先尝试一个特定的<code>__bool__</code>方法，然后在尝试<code>__len__</code>方法。在Python2.6中使用的名称不是<code>__bool__</code>，而是<code>__nonzero__</code></p><h4 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h4><p>主要是用于with语句的上下文管理。<br><code>__enter__</code><br><code>__exit__</code></p><h4 id="用来定义类"><a href="#用来定义类" class="headerlink" title="用来定义类"></a>用来定义类</h4><p><code>__new__</code><br>这个函数会在类初始化函数<code>__init__</code>之前调用</p><h4 id="整数值"><a href="#整数值" class="headerlink" title="整数值"></a>整数值</h4><p><code>__index__</code><br>如果在<code>bin(X), hex(X), oct(X), O[X], O[X:]</code>等需要传入一个数字、索引、分片的值时传入一个对象，那么该对象的<code>__index__</code>会被调用。<br>主要是用来替代Python2.x中的<code>__oct__</code>， <code>__hex__</code></p><p><strong>举个栗子</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一个写法是加入了保护变量的写法</span><span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__value<span class="token operator">=</span>v        self<span class="token punctuation">.</span>__length<span class="token operator">=</span>len<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">,</span>item<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>item    <span class="token keyword">def</span> <span class="token function">getDim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__length    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>other<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__sub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>other<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>other        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__truediv__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>other        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        l<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>__value <span class="token punctuation">:</span>            l<span class="token operator">+=</span>i        <span class="token keyword">return</span> l    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__length<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            s<span class="token operator">+=</span><span class="token string">'{'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'},'</span>        s<span class="token operator">+=</span><span class="token string">'{'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'}'</span>        <span class="token keyword">return</span> <span class="token string">'Vector('</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">')'</span><span class="token comment" spellcheck="true"># 第二个不带锁定</span><span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value<span class="token operator">=</span>v        self<span class="token punctuation">.</span>length<span class="token operator">=</span>len<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>other<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__sub__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>other<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>other        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__truediv__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span> <span class="token punctuation">:</span>        target<span class="token operator">=</span>self<span class="token punctuation">.</span>value<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">:</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>other        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span> target<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        l<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>value <span class="token punctuation">:</span>            l<span class="token operator">+=</span>i        <span class="token keyword">return</span> l    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            s<span class="token operator">+=</span><span class="token string">'{'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'},'</span>        s<span class="token operator">+=</span><span class="token string">'{'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'}'</span>        <span class="token keyword">return</span> <span class="token string">'Vector('</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">')'</span>A<span class="token operator">=</span>Vector<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B<span class="token operator">=</span>Vector<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token operator">+</span>B<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token operator">-</span>B<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Try使用"><a href="#Try使用" class="headerlink" title="Try使用"></a>Try使用</h2><p>try也可以看成是一种if条件语句</p><p>但try有很多错误类型可以根据以下Exception hierarchy中类型进行判断</p><h3 id="Exception-hierarchy"><a href="#Exception-hierarchy" class="headerlink" title="Exception hierarchy"></a>Exception hierarchy</h3><pre class="line-numbers language-python"><code class="language-python">Exception hierarchy （异常继承关系）<span class="token comment" spellcheck="true">###########################################################################</span>BaseException （基本异常） <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SystemExit （系统退出） <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> KeyboardInterrupt （键盘中断） <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> GeneratorExit （生成器退出） <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> Exception （异常）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> StopIteration （停止迭代）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> StopAsyncIteration （停止不同步迭代）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ArithmeticError （代数错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FloatingPointError （浮点错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> OverflowError （溢出错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ZeroDivisionError （除零错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> AssertionError （声明错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> AttributeError （属性错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BufferError （缓冲错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> EOFError （文件结束符错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ImportError （导入错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ModuleNotFoundError （模块没有找到错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> LookupError （查找错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IndexError （索引错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> KeyError （关键字错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> MemoryError （内存错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NameError （命名错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnboundLocalError （没有边界局域错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> OSError （操作系统错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BlockingIOError （锁定IO错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ChildProcessError （子进程错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionError （连接错误）      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BrokenPipeError （打破管道错误）      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionAbortedError （连接失败错误）      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionRefusedError （连接拒绝错误）      <span class="token operator">|</span>    <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ConnectionResetError （连接重置错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FileExistsError （文件存在错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FileNotFoundError （文件没有找到错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> InterruptedError （中断错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IsADirectoryError （是目录错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NotADirectoryError （不是目录错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> PermissionError （允许错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ProcessLookupError （进程查找错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TimeoutError （超时错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ReferenceError （参考错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RuntimeError （运行时错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> NotImplementedError （不是应用错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RecursionError （递归错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SyntaxError （格式错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> IndentationError （缩进错误）      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TabError （Tab错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SystemError （系统错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> TypeError （格式错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ValueError （值错误）      <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeError （U编码错误）      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeDecodeError （U解编码错误）      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeEncodeError （U编码错误）      <span class="token operator">|</span>         <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeTranslateError （U翻译错误）      <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> Warning （警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> DeprecationWarning （反对警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> PendingDeprecationWarning （挂起反对警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> RuntimeWarning （运行警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> SyntaxWarning （格式警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UserWarning （用户警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> FutureWarning （未来警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ImportWarning （导入警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> UnicodeWarning （U编码警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> BytesWarning （字节警告）           <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span> ResourceWarning （资源警告）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运用实例"><a href="#运用实例" class="headerlink" title="运用实例"></a>运用实例</h4><p>try的判断好像很有趣 比如下面例子在除0时遇到错误，foo里面不会执行<code>print(&quot;try-2&quot;)</code>语句</p><p>会跳转到except里面判断错误类型是否符合若符合则进入except，但无论如何finally里面语句都会执行</p><p>用来证明该try判断已经执行过了</p><p>挺有趣的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x<span class="token operator">=</span>a<span class="token operator">/</span>b        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"try-2"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span>     AssertionError <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"except-A"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">finally</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"final-1"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"except-2"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"else-2"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finally-2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不实用的东西global-amp-nonlocal"><a href="#不实用的东西global-amp-nonlocal" class="headerlink" title="不实用的东西global&amp;nonlocal"></a>不实用的东西global&amp;nonlocal</h2><p>global 定义变量表示所有函数外的全局变量</p><p>nonlocal 定义上一个在函数中定义的x <strong>nonlocal不能调用global 会报错哦</strong></p><p>反正就这意思 懂得都懂应付考试用的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">global</span> y<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token operator">=</span><span class="token number">2</span>        <span class="token keyword">def</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal x            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>            <span class="token keyword">global</span> y            y<span class="token operator">=</span><span class="token number">3</span>        baz<span class="token punctuation">(</span><span class="token punctuation">)</span>    bar<span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span><span class="token keyword">global</span> y<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal x            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>        baz<span class="token punctuation">(</span><span class="token punctuation">)</span>    bar<span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用包介绍"><a href="#常用包介绍" class="headerlink" title="常用包介绍"></a>常用包介绍</h1><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>numpy好像是主要在多维数组，大数据的处理上有非常大的用处</p><p>ndarray，具有矢量运算能力，快速、节省空间。numpy支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>a<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># array([[1, 2, 3, 4],</span><span class="token comment" spellcheck="true"># [5, 6, 7, 8]])</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个5行6列的0数组</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [[2, 3, 4], [4, 5, 6]]</span>a<span class="token punctuation">.</span>ndim <span class="token comment" spellcheck="true">#dimension 2</span>a<span class="token punctuation">.</span>shape <span class="token comment" spellcheck="true"># 2x4</span>a<span class="token punctuation">.</span>dtype <span class="token comment" spellcheck="true">#int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="究极乱搞"><a href="#究极乱搞" class="headerlink" title="究极乱搞"></a>究极乱搞</h1><p>py这种神仙东西只用来写普通代码不搞事真的是太浪费了）</p><p>乱搞的小型爬虫</p><p>爬我自己 博客文章标题）只支持一页页的爬</p><p>我爬我自己</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouptitle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>small_thing <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">fillUnivList</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">:</span>    tit <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> h2 <span class="token keyword">in</span> tit<span class="token punctuation">:</span>        title<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h2<span class="token punctuation">.</span>string<span class="token punctuation">)</span>    cate<span class="token operator">=</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h6'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> h6 <span class="token keyword">in</span> cate<span class="token punctuation">:</span>         small_thing<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h6<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printUnivList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    doc <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        u<span class="token operator">=</span>title<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>file<span class="token operator">=</span>doc<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>small_thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>small_thing<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>file<span class="token operator">=</span>doc<span class="token punctuation">)</span>    doc<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>    fillUnivList<span class="token punctuation">(</span>soup<span class="token punctuation">)</span>    printUnivList<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    get_title<span class="token punctuation">(</span><span class="token string">'https://aokiumi.github.io'</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从今天起正式开始学习py！！！&lt;/p&gt;
&lt;p&gt;&lt;del&gt;咸鱼了这么多天了终于开始搞点东西了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;以下为学习新语言py的学习笔记~ 大概学的是python3&lt;/p&gt;
&lt;p&gt;MD为什么看了这么多教程基本没一个顺眼能第一次找到想写的东西）&lt;/p&gt;
&lt;p&gt;*夹</summary>
      
    
    
    
    <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    <category term="PYTHON" scheme="http://yoursite.com/categories/CS/PYTHON/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
    <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>再见了，我的高中；你好，我的十八岁</title>
    <link href="http://yoursite.com/2020/08/03/%E5%86%8D%E8%A7%81%E4%BA%86%EF%BC%8C%E6%88%91%E7%9A%84%E9%AB%98%E4%B8%AD%EF%BC%9B%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%88%91%E7%9A%84%E5%8D%81%E5%85%AB%E5%B2%81/"/>
    <id>http://yoursite.com/2020/08/03/%E5%86%8D%E8%A7%81%E4%BA%86%EF%BC%8C%E6%88%91%E7%9A%84%E9%AB%98%E4%B8%AD%EF%BC%9B%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%88%91%E7%9A%84%E5%8D%81%E5%85%AB%E5%B2%81/</id>
    <published>2020-08-02T16:00:00.000Z</published>
    <updated>2020-07-30T02:51:24.311Z</updated>
    
    <content type="html"><![CDATA[<p>Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ</p><p>高中三年转瞬即逝，一转眼之间，就来到了2020这个特殊的一年。</p><p>感觉高中三年过得非常的充实，但却又总觉得缺了点什么。</p><p>可能一心就在学校学习，没有同好，没有初中那种快乐（）</p><p>但高中确实也应该以学习为主，所以其实也有很多收获。</p><p>在高中我遇到了OI，遇到了许多有趣的老师同学，学到了很多知识，体验了不一样的高中生活。</p><p>但我觉得自己仿佛还是初中的那个我，没有很大的改变，甚至可以说小学毕业的我。</p><p>我的想法一直没有怎么改变过，确实很奇怪。</p><p>在这个炎炎夏日，我走出高考考场的那一刻，心情十分平和，几乎没有什么波动。</p><p>直到现在回想起来，高考仿佛也就是一个平常而普通的考试罢了。唯一高兴地是我终于有暑假了！</p><p>借此篇博文，不仅想给自己的高中三年做个了结，也是对自己18岁的展望。</p><p><img src="https://i.loli.net/2020/07/29/Mf5lmkD2CNIcOdn.jpg" alt="0016.jpg"></p><h1 id="Ⅰ-邂逅-Encounter"><a href="#Ⅰ-邂逅-Encounter" class="headerlink" title="Ⅰ 邂逅 Encounter"></a>Ⅰ 邂逅 Encounter</h1><p>刚踏入武钢三中的校园时，其实我也没有特别抱有期待？毕竟和最好的朋友分开了，对高中生活没有什么期望。对我这种严重社恐来说，交到什么特别深交的朋友可能性小之又小（）</p><p>再者武钢三中这么个破学校，也没什么值得期待的（迫真）</p><p>但我有幸遇到了OI，遇到了我真正非常喜欢的东西。</p><p>这也是我去其他学校可能不会拥有的契机，所以我也从不后悔自己的选择，这一点我很早也表达过。虽然没有那么完美的高中生活，但我也从未后悔与沮丧。</p><p>遇到OI，不仅为我以后的专业选择奠定了基础，也让我重新认识了自我。</p><p>再者，我遇到了一批不同的初中老师的一群可爱而有趣的高中老师。至今我见到phw也不会十分尴尬，就像朋友一样，感觉没有很大隔阂，和初中老师疏远的感觉完全不同。</p><p>我也挺喜欢我的主科老师。</p><p>qd虽然嘴臭但其实我很佩服他，毕竟他是这么多年我第一个觉得语文课能听进去的老师，而且事实说明他也有点东西x</p><p>lkc老要努力了 作为啥都不管的憨憨班主任也没啥说的（）数学教的也中规中矩的，口音挺搞笑的。</p><p>hzx最帅老师没得说的，看着爽就完了（什 物理教的怎么说，水平在那里，但讲课划水就另一码事了x</p><p>phw最牛的不解释</p><p>说到换了三个的英语老师，想念xzm .jpg zl做事老认真了，可水平不太行啊x cxm中规中矩吧x 还是xzm牛逼，真的牛逼。。</p><p>高中同学也。。。。挺假的。。。假，就硬假。。各个牛逼的一批，天天假别人（害）当代OIer现状。</p><p>感觉其实也都挺有趣的，二次猿浓度颇高（bushi 挺难得了 老二刺猿不禁流下泪水。</p><p><del>草越写越不正经了啊喂x</del></p><p>虽然没有深交的朋友，没有同好，但总归和他们一起很开心，学习挺快乐的。虽然总是孤单一人，也不觉得非常寂寞，习惯了就好（害）老社恐了。</p><p>虽然很多同学至今可能没说过话，没说过几句话，但也。。（害）是我社交圈小，没办法。希望几年之后同学聚会大家不会忘记我x</p><p>总之，</p><blockquote><p>有幸能邂逅你，OI</p></blockquote><blockquote><p>有幸能遇到这么多有趣的灵魂</p></blockquote><p><img src="https://i.loli.net/2020/07/29/jytuA3Zs8hC5f4E.jpg" alt="1.jpg"></p><h1 id="Ⅱ-历练-Challenge"><a href="#Ⅱ-历练-Challenge" class="headerlink" title="Ⅱ 历练 Challenge"></a>Ⅱ 历练 Challenge</h1><p>高中三年，就从初三暑假开始，就基本没有暑假了（</p><p>一直都在忙碌，基本从上高中来就没有暑假。初三高一暑假在机房，高一寒假在机房，高二暑假在学校补课，寒假在外面培训，所以基本就没有假期。。。</p><p>虽然其实在家里比较水，但我也觉这种比较高强度的学习也是一种历练和经历吧。牺牲假期时间不停地沉迷于学习其实也挺充实的。</p><p>在高中以及初中我的感觉就是如果没有在一天中做什么题，我就会觉得难受，有种做贼心虚的感觉（）然后就经常写也没写几道题，玩的也不尽兴，很奇怪。明明不愿意写题，但在玩的时候又有一种奇怪的罪恶感，挺离谱的。</p><p>估计这是初高中生的通病？有要好好学习的自知，却又不愿意一直学习放弃玩耍，还是会想玩。。</p><p>要说高中三年就是在题海中徜徉，天天泡在题目里，除了做题就是做题。高三更是如此，基本就没有其他的娱乐活动，每天就是一本书不断往后写，卷子不断的发。</p><p>讲实话，那么多卷子就没写多少，也不知道搞那么多资料干嘛x这本写几张，那本写几张的。</p><p>但其实说高三有多累，有多么的不同，我也没有觉得有什么特殊的。不就是考试多了点，压力稍微大了点。要说作业还没初三作业多呢）高中老师比较佛，考试很多时候都自己改，和初中完全不一样x</p><p>最大的差别就感觉高中相对初中是自主学习，老师管的比初中少很多，后期基本高三作业都是自己改或者没交也没有人说，主要靠自觉。不做没人说，自己对自己负责。</p><p>作业有时候也不会很多，额外刷题也看自己意愿。夜自习资本也看自觉，想偷偷玩手机是可以的，想认真学习也靠自己。</p><p>特别是临近高考那一个月，可以看到很多人都几乎处于崩溃状态，什么题都不想做，在学校也总想玩手机去休息，十分的疲惫痛苦。特别是今年考生，疫情对状态的影响极其巨大。</p><p>就我自己来说，网课时期心情极其的差，疫情加上肖战事件的影响，我一度无法集中精力学习，非常的烦躁不堪，就感觉大部分时间都花在了刷微博上，每天看这些鬼消息都想骂人。</p><p>以至于成绩也下滑非常厉害，网课真的害人。。本来上网课学习质量就极其差，再加上各种因素影响，网考易于作弊，成绩缺乏可信性，搞得人一度十分低迷。所以说真的，疫情害人不浅。肖战是真的恶心吐了。</p><p>最后返校后成绩明显就回升了，网课真的离谱。。并且因为网课耽误，高考都被迫延期一个月，可想而知如果不延期，我又会考成什么鬼样子。</p><blockquote><p>这也许也是一种另类的考验，在这种乌烟瘴气的网络环境和低迷的心情里谁能坚持下来，不被外界影响，谁就能成为最后的赢家。</p></blockquote><p>显然，我就没有经受住考验，只能说227事件影响真的太大了，以至于我后面直接把微博卸了。</p><blockquote><p>远离微博，迎接美好的一天。</p></blockquote><p>也许也正是因为这特殊的历练，2020届毕业生也一定能在未来大放光彩，迎来光辉的人生。</p><h1 id="Ⅲ-认知-Cognition"><a href="#Ⅲ-认知-Cognition" class="headerlink" title="Ⅲ 认知 Cognition"></a>Ⅲ 认知 Cognition</h1><p>经历了高中三年的洗礼，我也对自己有了更清楚的认知。特别是通过OI的学习，我也对自己有了更深入的了解。</p><p>首先我个人理性&gt;感性，我做任何事情都喜欢逻辑严密的安排，没有逻辑的人我不愿意和他/她过多做无意义的争吵。撕逼，无意义的对骂是很无聊的事情。对面本来就是傻逼，没什么交流的余地。</p><p>在我这里逻辑可能高于很多东西，这也是OI里面逻辑严密性让我能真正认识到这一点。</p><p>尽管我刚开始对OI并不是很感兴趣，甚至想选择放弃，但当我真正退役了之后，没有了竞赛的压力，我才发现我无比喜欢对计科相关知识的研究。</p><p>比如这个博客，当初建立初衷其实也是跟随机房大佬的脚步，方便联赛复习，方便整理，搭博客其实真的很麻烦，各种奇怪的问题，美化也十分艰难，git莫名其妙抽风，github日常连不上。</p><p>但其实退役后，我也仍然在继续”经营”这个博客，发一些学习相关的东西，能有一个个人网站，在现在网络环境如此恶劣的情况下有个人自由表达的空间。</p><p>我现在也对网页设计方面有一定兴趣，但让我更坚定想选择软件工程的原因，应该也是我非常享受自己创造，自行设计，在自我创造中获得满足的感觉。</p><p>有了一个小程序/app构想，就很想知道实现它的方法，<del>比如我现在其实就想设计一个全自动排谷小程序（什）</del></p><p>最后，我发现我真的十分享受自我自由支配时间的感觉，我会非常喜欢自习课，自己制定计划，自己安排时间，自己寻找所需要刷的题。有自己主导不受他人约束的感觉真的很爽。</p><p>当一起都按计划实施，按自己安排的方案实施的时候，感到极度的满足。就如我写自主复习计划，只要我写了我一定会照做。<del>但如果我没写出来，很可能就无事发生</del> </p><p>可以说我的自我意识相当的强，很不喜欢被他人左右，可能有时候确实听不进去他人意见。</p><p>但其实也不是完全这样，有用的意见我会默默记住，但我可能不会表现出来，记住了不等于实践（）有很多不可控的因素我记住了不代表我会照做）</p><p>特别是对方态度越差，越表示你怎么总不听别人意见，我也是为你好之类道德绑架，我就会越不想理，潜意识无比排斥和拒绝，有了这样的前提，基本我听到了也会当没听到。</p><p>我也知道要这么做，但没这么做总有我自己的个人原因并不代表我没听到。有些事情说一遍就够了，我也不是不知道，天天说我</p><p>就只会逐渐烦躁，越来越没有好态度。/望周知</p><p><img src="https://i.loli.net/2020/07/29/EiNu8wfrLZYaDxy.jpg" alt="0022.JPG"></p><h1 id="Ⅳ-经验-Experience"><a href="#Ⅳ-经验-Experience" class="headerlink" title="Ⅳ 经验 Experience"></a>Ⅳ 经验 Experience</h1><p>再浅谈一下自己关于高考或者学习的一些经验。</p><p>首先我觉得高中学习以自主学习为主，选择怎样学习完全靠自己。你可以上课不听讲，可以不写作业，可以不学习；你也可以认真听讲，主动完成作业，积极学习。</p><p>可以说你不好好学习会被查水表，但真正到最后，其实老师也不会频繁管你了，毕竟大家也都是人生中的过客，自己的未来只能由自己掌控，你考的好不好也与他没多大关系。</p><p>但总归还是应该珍惜这三年的机会，虽然高考不是唯一出路，但真正大多数人都是从高考作为人生的起点。有的人可能确实不好好学习能有好的未来，但这也是极少数人，你不能肯定你就是那万分之一。好好学习终究对你只是有利无弊罢了。</p><p>讲这么多废话，进入正题。</p><p>我的建议首先上课还是认真听讲，跟着老师走 <del>（前提是你学校确实还不错x）</del></p><p>一个好的老师一定有多年的教学经验，他知道如何学好这门课，如何避开别人走错的老路，跟着他的教学进度走一定是一条捷径，能让你少走不少弯路。</p><p>话是这么说，其实很多理科生对语文英语都不以为然（我也一样），<strong>但我觉得如果你的老师真的很优秀，真的有水平，这课必须还是要听的</strong>。比如我们高二英语老师，听一节课就知道他贼牛逼，他的课堂笔记受用整个英语学习，不仅是高中。<del>可惜高三换了海灵</del> 还有语文老师，好的语文老师自己也有自己的教育体系，讲题思路清晰。这种老师讲的课建议还是听会更好x</p><p>我个人觉得数学课，如果你真的全都会做，这类题高考能100%不出错，你可以不听。前提是你真的有这个水平，题目熟练且一遍就对。一旦要犹豫，就是你掌握的还是有漏洞，需要听讲解思路和方法。再就是多做题，见多识广。</p><p>化学生物属于细节非常多的学科，笔记一定要滚动复习，讲评一定要听，你会的也要听，老师会把一道题讲透，不只限于这个题选什么。<strong>有任何选项有细节不清楚的一定要问，勇于去问问题把不知道的搞清楚非常重要，这样才能避免失分</strong>。</p><p>物理和数学感觉差不多，需要做题，但不用很多，主要掌握思路和方法，<strong>练习思维模式，敢于举一反三，不思考自己的弱点做针对训练，做多少题都没有用的</strong>。</p><p>答题规范也要十分注意，每道题都要思考为什么你和标答写的不一样，如何表达地更加规范，避免不必要的失分。2020高考就是很好的例子x</p><p>最后高考前重要的是心态，<strong>只有心态调整好了才能发挥出最高水平</strong>！不要过于紧张，也不要太放松，平常心就好。我觉得我高考心态挺好的基本就当成普通的考试去应对，这样就能考得好。</p><h1 id="Ⅴ-展望-Expectation"><a href="#Ⅴ-展望-Expectation" class="headerlink" title="Ⅴ 展望 Expectation"></a>Ⅴ 展望 Expectation</h1><p>目前现在其实大学已经确定了，我终究还是来到了上海，我曾今很早就说过自己想去上海上大学，阴差阳错之间本来以为只是口嗨，还真的能去上海上大学。</p><p>我之前还坚定的以为自己和SUSTech会比较有缘分，毕竟SHTech面试就没给我加分，我也没放在眼里。</p><p>哎，谁知道呢，命运弄人）</p><p>谁还能想到我高一还在口嗨我华武保底呢（）我现在就想笑笑，真就17分空手送人呗）笑死，多那17分我也许就不会选择SHTech，虽然也不好说就是了。</p><p>上海对我来说是无比向往的城市，新星科技，展会云集，做梦也想生在上海（）如今真的能过去了，在SHTech这样一所优秀的大学上学我真的赚暴！</p><p>据说SHTech的课程很繁重，但我本来也不是天天混日子的人，更有压力的课程，更好的教学环境，真的非常令人向往不已，可以说我对我的大学生活充满了无限期待。</p><p>对于计算机专业课程我也十分好奇，能选择真的感兴趣的专业真的非常难得，况且还是在师资力量如此优秀的学校。</p><p>希望自己的大学生活能十分丰富多彩。</p><h2 id="上海，我来了！"><a href="#上海，我来了！" class="headerlink" title="上海，我来了！"></a>上海，我来了！</h2><h2 id="Hello-SHTech"><a href="#Hello-SHTech" class="headerlink" title="Hello SHTech!"></a>Hello SHTech!</h2><p><img src="https://i.loli.net/2020/07/29/9M5dVJ3xGfFQrah.jpg" alt="0021.JPG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ&lt;/p&gt;
&lt;p&gt;高中三年转瞬即逝，一转眼之间，就来到了2020这个特殊的一年。&lt;/p&gt;
&lt;p&gt;感觉高中三年过得非常的充实，但却又总觉得缺了点什么。&lt;/p&gt;
&lt;p&gt;可能一心就在学校学习，没有同好，没有初中那种快乐（）&lt;/p&gt;
&lt;p&gt;但高中确实也应该以学习为主</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="Aoki_umi" scheme="http://yoursite.com/tags/Aoki-umi/"/>
    
    <category term="congratulations" scheme="http://yoursite.com/tags/congratulations/"/>
    
  </entry>
  
  <entry>
    <title>自主复习计划</title>
    <link href="http://yoursite.com/2020/06/24/%E8%87%AA%E4%B8%BB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2020/06/24/%E8%87%AA%E4%B8%BB%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2020-06-24T13:21:21.000Z</published>
    <updated>2020-06-29T13:12:35.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于自主复习5天"><a href="#关于自主复习5天" class="headerlink" title="关于自主复习5天"></a>关于自主复习5天</h3><p>计划一下自主复习每日计划</p><p>说实话直到现在仍然没有什么复习思路，看了一下感觉做题时间会比较多？</p><p>但我觉得我很多东西感觉都不太记得，复习还是蛮重要的？</p><p>不知道是否有必要看一下一轮复习资料的东西再看一下知识细节啥的，特别是化学细节特别多，我最近看生物的力度比较大，可能还是需要加强化学基本知识点的巩固与复习。</p><p>物理感觉还是要看公式，选修啥的，保持选择题手感？</p><p>生物看书，看笔记，背书，背东西。</p><p>数学做题就完了，复习错题本，复习公式，大概就行。</p><p>语文背书，文常？要背的部分背一下？</p><p>然后之前有些积压的问题要问一下？</p><p>记得把化学物理的书找出了，最后阶段做题没那么重要了，方法基本已经记在心里了。可卷子太多了还是要做啊）））</p><p>然后就是制定每天具体的计划，时间安排，我发现只有计划定的足够详细，我才能高效学习）</p><p>然后每天就只提前一天制定计划，根据情况可以一直改动。</p><p>计划是每天都要保持每科一定的手感，看书+做题结合应对（数学除外x</p><p>每天若完成请打勾 未完成请打叉</p><h1 id="计划列表"><a href="#计划列表" class="headerlink" title="计划列表"></a>计划列表</h1><p><strong>需要做的卷子</strong></p><p>语文 冲刺训练7，冲刺训练8？</p><p>数学 华师一压轴卷，本来要考的周考卷，其他卷子选择性挑选要做的题目</p><p>英语 高考真题（待定）</p><p>物理 两套理综卷子的物理单科 其他待定</p><p>化学 一套二模7+4 理综两套卷子单科？</p><p>生物 训练十 理综单科？</p><p><strong>单科复习任务</strong></p><p>语文 重新滚动复习必背古诗词（重点看批注，字，翻译，理解），每日古诗词还是要写下去找问题和漏洞 以及写某人出的卷子x</p><p>数学 主要以刷题训练为主，注重导数的非常规做法，复习笔记本改错本</p><p>英语 适当做高考题目，复习<strong>单词</strong>和语法点 重点词组继续加强复习</p><p>物理 选修课本系统复习，加适当单科训练 ，及时补救复习弱点体型</p><p>化学 一轮复习书<strong>薄弱知识点加强记忆</strong>，复习知识细节，遗忘点补救，加适量单科训练，回归选修课本</p><p>生物 回归课本必备知识点，关注课本细节，课后习题，加适量单科训练</p><h2 id="·-6-25"><a href="#·-6-25" class="headerlink" title="· 6.25"></a>· 6.25</h2><h3 id="早上-（8-00-11-40"><a href="#早上-（8-00-11-40" class="headerlink" title="早上 （8 :  00-11 :  40)"></a>早上 （8 :  00-11 :  40)</h3><ol><li>做完语文限时训练7（大概1个小时左右，作文写大纲）√</li><li>语文古诗词系统性复习+古诗词默写训练（30-40分钟左右）应该还剩余大概1个半小时 √ <del>可能要问物理题</del> ×</li><li>数学做卷子 √</li></ol><h3 id="下午（14-00-17-00"><a href="#下午（14-00-17-00" class="headerlink" title="下午（14:  00- 17:  00)"></a>下午（14:  00- 17:  00)</h3><ol><li>化学回归书本复习+练习 ×（没时间了）</li><li>物理回归课本+练习 √</li></ol><p>晚上 总结错题+英语单词复习+做题？</p><p>大概先这么安排一天试试？</p><p>萎了啊，语文直接超了30分钟，物理就搞了一下午，太惨了人没了</p><p>晚上准备生物十写完，再复习一下</p><h2 id="·-6-26"><a href="#·-6-26" class="headerlink" title="· 6.26"></a>· 6.26</h2><h3 id="早上-（8-00-11-40-1"><a href="#早上-（8-00-11-40-1" class="headerlink" title="早上 （8:  00-11:  40)"></a>早上 （8:  00-11:  40)</h3><ol><li><p>7:  50-8:  20 例行语文古诗文复习和默写训练 √</p></li><li><p>8:  30-10:  10 化学单科7+4训练+课本回归复习 √</p></li><li><p>10:  10-11:  40 英语套题训练+部分词组复习 √</p><p>上午估计要找胡问题目 √</p></li></ol><h3 id="下午（14-00-17-00-1"><a href="#下午（14-00-17-00-1" class="headerlink" title="下午（14:  00- 17:  00)"></a>下午（14:  00- 17:  00)</h3><ol><li>14:  00-15:  00 数学华师一押题卷训练（能做多少是多少）√ 基本该写的都写了</li><li>15:  00-15:  15英语听力 √</li><li>剩余时间 物理单科训练 √</li></ol><p><del>晚上估计看牙齿 回家整理错题 那估计从6.27开始晚上去学校自习？</del> </p><p>晚上去学校看了qd视频 +写完了物理单科+生物单科</p><p>最近写了 两套物理单科 两套生物单科 零碎的数学 一套语文 一套英语 </p><p>明天准备减少做题量 回归课本为主复习</p><h2 id="·-6-27"><a href="#·-6-27" class="headerlink" title="· 6.27"></a>· 6.27</h2><h3 id="早上-（8-00-11-40-2"><a href="#早上-（8-00-11-40-2" class="headerlink" title="早上 （8:  00-11:  40)"></a>早上 （8:  00-11:  40)</h3><ol><li>7:  55-8:  25 例行语文古诗文复习和默写训练 √</li><li>8:  25-9:  45 语文冲刺训练8 √</li><li>9:  50-10:  40 化学7+4单科训练 √</li><li>剩余时间 化学回归课本复习总结 √</li></ol><h3 id="下午（14-00-17-00-2"><a href="#下午（14-00-17-00-2" class="headerlink" title="下午（14:  00- 17:  00)"></a>下午（14:  00- 17:  00)</h3><ol><li>14:  10-15:  00 物理回归课本复习选修 （做题暂时停止）√</li><li>15:  00-15:  15英语听力 √</li><li>剩余时间做数学石家庄模拟题 √</li></ol><h3 id="晚上（18-00-20-00或延长"><a href="#晚上（18-00-20-00或延长" class="headerlink" title="晚上（18:  00- 20:  00或延长)"></a>晚上（18:  00- 20:  00或延长)</h3><ol><li><p>18:  00-19: 00 生物笔记本复习 适当选择题目 ×</p></li><li><p>剩余时间 英语阅读等题目手感训练+ 复习单词+背范文 做了一套题 √</p><p>今天快乐的自习到了9点</p></li></ol><h2 id="6-28"><a href="#6-28" class="headerlink" title="6.28"></a>6.28</h2><h3 id="早上-（8-00-11-40-3"><a href="#早上-（8-00-11-40-3" class="headerlink" title="早上 （8:  00-11:  40)"></a>早上 （8:  00-11:  40)</h3><ol><li>7:  55-8:  25 例行语文古诗文复习和默写训练 √</li><li>8:  25-9:  45 物理单科训练 √</li><li>剩余时间生物复习+适当练习 √</li></ol><h3 id="下午（14-00-17-00-3"><a href="#下午（14-00-17-00-3" class="headerlink" title="下午（14:  00- 17:  00)"></a>下午（14:  00- 17:  00)</h3><ol><li>14:  10-15:  00 化学知识点复习 √</li><li>15:  00-15:  15英语听力 √</li><li>英语阅读完型训练+词组复习 √</li></ol><h3 id="晚上（18-00-20-00"><a href="#晚上（18-00-20-00" class="headerlink" title="晚上（18:  00- 20:  00)"></a>晚上（18:  00- 20:  00)</h3><ol><li>18:  00-19: 30数学题目选做 （剩下卷子不是很多x √</li><li>剩余时间 改错本笔记本复习 生物选修复习 其实是复习试卷x</li></ol><p>今天有事回来早点 我发现我复习顺序完全错的xx</p><h2 id="6-29（最后一天）"><a href="#6-29（最后一天）" class="headerlink" title="6.29（最后一天）"></a>6.29（最后一天）</h2><h3 id="早上-（8-00-11-40-4"><a href="#早上-（8-00-11-40-4" class="headerlink" title="早上 （8:  00-11:  40)"></a>早上 （8:  00-11:  40)</h3><ol><li>7:  55-8:  30 例行语文古诗文复习和默写训练 √</li><li>8:  30-10:  00 数学选做题目 √</li><li>剩余时间 生物选修复习 √</li></ol><h3 id="下午（14-00-17-00-4"><a href="#下午（14-00-17-00-4" class="headerlink" title="下午（14:  00- 17:  00)"></a>下午（14:  00- 17:  00)</h3><ol><li>14:  10-15:  00 化学7+4练手 √</li><li>15:  00-15:  15英语听力 √</li><li>剩余时间 物理题目复习改错本总结 </li></ol><h3 id="晚上（18-00-21-00"><a href="#晚上（18-00-21-00" class="headerlink" title="晚上（18:  00- 21:  00)"></a>晚上（18:  00- 21:  00)</h3><p>  各科复习总结 没复习完的一起看一下</p><p>目前自主复习告一段落了 继续努力吧x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;关于自主复习5天&quot;&gt;&lt;a href=&quot;#关于自主复习5天&quot; class=&quot;headerlink&quot; title=&quot;关于自主复习5天&quot;&gt;&lt;/a&gt;关于自主复习5天&lt;/h3&gt;&lt;p&gt;计划一下自主复习每日计划&lt;/p&gt;
&lt;p&gt;说实话直到现在仍然没有什么复习思路，看了一下感觉做题</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>高三考试试卷分析汇总</title>
    <link href="http://yoursite.com/2020/05/17/%E9%AB%98%E4%B8%89%E8%AF%95%E5%8D%B7%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2020/05/17/%E9%AB%98%E4%B8%89%E8%AF%95%E5%8D%B7%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/</id>
    <published>2020-05-17T11:57:22.000Z</published>
    <updated>2020-09-04T14:49:16.550Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前排提示：本分析写给自己 并不适合长时间阅览）</strong></p><h1 id="武汉市四月调考总结"><a href="#武汉市四月调考总结" class="headerlink" title="武汉市四月调考总结"></a>武汉市四月调考总结</h1><p>额因为考得实在是稀烂所以真的需要总结一下各科的问题顺便制定一下后期的目标的对策</p><p>首先是试卷分析</p><h2 id="分析和总结"><a href="#分析和总结" class="headerlink" title="分析和总结"></a>分析和总结</h2><hr><h3 id="·-语文"><a href="#·-语文" class="headerlink" title="· 语文"></a>· 语文</h3><p>首先我仍未知道最近语文为何真的稀烂无比</p><p>这次考试首先是选择题错的还是多了，无脑错的大概是第一题，还真没发现均字有什么问题，但总觉得价值取向怪怪的害。接着题目出的不好的有2,4，设误点着实比较迷惑，出题人脑子有坑系列。。。然后就是文言文第10题，是我自己没理解对我承认，最后两道题确实有难度，关联没注意调序就一起蒙了。。</p><p>再是文字题，首先出的确实有点问题。。但小说分和翻译并不低哈，最后古诗题是我没解读清楚，我的锅。最后两道文字题。。。答案着实迷惑，逻辑欠妥，我真写不出来着答案。改错题可能有段时间没做我本来就不擅长找这种错，需要加强训练。</p><p>作文我以为必须以诗歌为中心，看来好像并不是这样，，全文中心还是抗疫我佛了。</p><p><strong>总结</strong>： 重视选择题训练，锻炼手感，后三题保证语感，掌握技巧。文字题逻辑理清楚，分条分点先总后分。总之还是要多练吧。。。。永远捉摸不透出题人在想什么，可能高考题还是正常一些。。。</p><h3 id="·-数学"><a href="#·-数学" class="headerlink" title="· 数学"></a>· 数学</h3><p>首先这次真的没发挥好，没什么不会的题，说真的。。选择题那个属于莫名搞错了x 第一个大题没注意A的下限，后面解析几何弱智算错了。。。倒数题估计是觉得我第一问做的不好吧。。。画图明明很清楚。。。</p><p><strong>总结</strong>：加强准确率！！！！</p><h3 id="·-英语"><a href="#·-英语" class="headerlink" title="· 英语"></a>· 英语</h3><p>不行我英语又翻车了。。。锤死自己</p><p>首先3.5的低级错误佛了。。看错选项和词也是醉了、、、、</p><p>听力可能是我没感受到她的愤怒。。。。以为她对这个电影讲什么很迷惑，实则人只关注前面人挡着她了。</p><p>阅读A我可能不认识英尺，以为没有大的表现，实则也没有specially-designed的表述。。。</p><p>B篇我的锅，我以为他grandson20多岁了。。实则是儿子20多岁，写一起用的定语从句真的误导人啊喂。。。我真的佛了，可能我一直在啃那句话没注意后面grow up 虽然我觉得20多岁grow up没啥问题。。。</p><p>D篇至今不能说服我，我觉得branch很形象啊一个分支=&gt;一个领域一个全新问题。。。different places明显不对啊佛了 每次将阅读永远往答案上扯，，，难受的很</p><p>完型我可能理解有点偏差导致刚好选反过来了。。。</p><p>作文。。。。我觉得我写的挺真实的扯高大尚有啥用。。。。佛了以后就往全球发展扯就完了</p><p><strong>总结</strong>：加强阅读，七选五，改错的训练，感觉前段时间过于忽略原文，这段时间ptsd又开始疯狂抠原文导致两边不讨好，可能就平衡度没有掌握好导致翻车。。。什么时候阅读能对我口味我真的迷惑了。。。。</p><h3 id="·-物理"><a href="#·-物理" class="headerlink" title="· 物理"></a>· 物理</h3><p>物理错的最后一道题当时因为题目看错了可能就慌了导致搞错了orz 实验摆长只能用刻度尺x我傻逼了实验怪我啊啊啊选修也是我的锅orz</p><p><strong>总结</strong>：加强弱点训练具体下文说</p><h3 id="·-化学"><a href="#·-化学" class="headerlink" title="· 化学"></a>· 化学</h3><p>化学选择那个就不提了，其实大题后两道海星吧，第一道题主要是被他的图误导了，对的改成错的之后错上加错，再是细节没处理好害，有机真的恶心吐了我太难了</p><p><strong>总结</strong>：加强训练提升能力吧害，可能也有需要强化的点（五一放假整理）</p><h3 id="·-生物"><a href="#·-生物" class="headerlink" title="· 生物"></a>· 生物</h3><p>生物又双叒叕翻车了我死了</p><p>选择题是我睿智了orz，植物不能吸收有机物我又忘记了啊啊啊</p><p>大题第一题表述不规范我的锅已经学习了选修又翻车 ，我忘了检查灭菌是否合格的表述了啊啊啊 然后我理解错选菌落的意思了我以为要生存的久，结果是要分解的快</p><p><strong>总结</strong>：落实基础，回归课本，表述规范</p><h2 id="对策与计划"><a href="#对策与计划" class="headerlink" title="对策与计划"></a>对策与计划</h2><hr><ol><li>语文重视起日常作业，不放过每一个题目。</li><li>英语每天刷几道阅读后面的题目，锻炼手感。</li><li>物理我觉得加强光电效应，选修，动量大题的解题手感，电磁感应难题要会做，反正要做到熟练，具体模块可能需要具体到细节之类的需要详细琢磨。</li><li>化学加强训练，可能化工流程需要加强训练，具体还需总结。</li><li>生物可能需要继续回归课本，必备知识点必须牢记，时时回顾orz</li></ol><h1 id="武汉市八校第二次联考试卷分析"><a href="#武汉市八校第二次联考试卷分析" class="headerlink" title="武汉市八校第二次联考试卷分析"></a>武汉市八校第二次联考试卷分析</h1><p>最近连着一起考了两次试，真的是起起落落，感觉还是有必要总结一下，害离高考没多久了，真的要好好找问题了。</p><h2 id="分析和总结-1"><a href="#分析和总结-1" class="headerlink" title="分析和总结"></a>分析和总结</h2><h3 id="·-语文-1"><a href="#·-语文-1" class="headerlink" title="· 语文"></a>· 语文</h3><p>这两次语文发挥的都不错，终于不是倒数了（bushi，以至于之前一度让我疯狂怀疑人生。</p><p>希望只要作业认认真真做，积极问问题语文还是可以正常发挥的害，继续加油吧！！哭鸟</p><h3 id="·-数学-1"><a href="#·-数学-1" class="headerlink" title="· 数学"></a>· 数学</h3><p>这两次数学考得也还行，说实话也没啥特别多说的（草太混了吧）</p><p>不过感觉还是有很多漏洞啊，你看这次周考不就原形毕露（妈咪!.jpg)(泪，射了出来.jpg)</p><p>感觉数学真的就是多做题就行，方法啥的都是做题做出来的，也没什么巧）</p><p>然后还是希望继续提高准确率，提高作业质量！希望不要再犯傻逼错误害</p><h3 id="·-英语-1"><a href="#·-英语-1" class="headerlink" title="· 英语"></a>· 英语</h3><p>事实证明我的英语问题仍然很大orz 我好难，每次阅读题都和出题人理解有出入（轻轻跪下.jpg)</p><p>如何才能把脑回路摆正了，是理科生的通病吗，自从疯狂不关注原文到疯狂扒原文细节理解感觉不会犯睿智错误了，以至于我每次选错都觉得自己有理有据（什）</p><p>以至于疯狂开始问问题（ 还好有外援人家不嫌我烦555555，海玲我真的不敢问啊x问了也讲不清楚（bushi</p><p>太难了希望还是能在最后把脑回路掰正（</p><p>感觉自己还是对一些单词的理解记忆啥的有偏差，我仍然记得那个之前考试arbitrary和autonomous的惨剧（凋谢.jpg)可能是平时记单词都是过一眼的锅x</p><p>百词斩轮一遍完估计还是在高考前集中再把容易记忆偏差的单词再搞一遍？</p><p>希望能有所帮助555555</p><h3 id="·-物理-1"><a href="#·-物理-1" class="headerlink" title="· 物理"></a>· 物理</h3><p>您好这边物理又双叒叕翻车了呢（</p><p><del>至于物理没考好是怎么一回事呢？物理相信大家都很熟悉，但是物理没考好又是怎么回事呢？下面</del> </p><p>拖出去打死x 首先我物理学史这块一直有不太清楚的地方，所以这周专门做了一个十分详细的整理，希望以后不会在这题栽跟头x</p><p>感觉选择题可能还是做的太快没有思考清楚就选了）还是不要太追求速度x太过于追求速度也没好结果x只是还是有漏洞orz，之前总结的东西会刷刷选择专项和必刷题来训练的x</p><p>以及虽然我最后一题是混的，但其实也没有算错两遍x就是没算平抛罢了，恰巧平抛那段不影响结果而已x</p><p>选修那个光学我之前就错过，这次又在棱角的折射上出了问题，亏我考试前还特意看了草这。。。</p><h3 id="·-化学-1"><a href="#·-化学-1" class="headerlink" title="· 化学"></a>· 化学</h3><p>您好这边化学又双叒叕翻车了呢（ 好了打住x</p><p>考的烂的原因让我回忆下x首先是自己睿智，做的比较快容易忽略一些东西）然后也是有一些基本操作记忆不清，于是又严重失误 太惨了</p><p>然后就是题目看清楚再做，不要擅自怀疑题目（bushi 感觉化学也是各种细节很多的学科，做起来也很麻烦，细节很容易忽略，希望能变得更细致一些）</p><p>然后就是每道题还是要想清楚为什么这样写，把逻辑链理清楚吧害</p><p>说实话还是不清楚化学要怎么样提升呢，让我再想想办法x</p><h3 id="·-生物-1"><a href="#·-生物-1" class="headerlink" title="· 生物"></a>· 生物</h3><p>这次生物终于翻身了！！yeah！！开心了</p><p>其实主要还是因为比较简单吧（ 难一点照样还是会错，而且选择题再做的时候还是没有完全弄清楚，说明还是有错的可能x</p><p>这次做生物没以前那么粗糙了？还是继续加油，生物一堆要背的东西真的贼难受x会继续加油的(妈咪.jpg)</p><hr><p>好了我水完一篇总结了x</p><p>对策基本上面已经说了就不列一遍了orz</p><p>以后基本每次大考考完都会利用星期天写总结x</p><h1 id="武汉市五月调考试卷分析"><a href="#武汉市五月调考试卷分析" class="headerlink" title="武汉市五月调考试卷分析"></a>武汉市五月调考试卷分析</h1><p>终于又考了一次大考，害极其难受到自闭）吐血了</p><h2 id="分析与总结"><a href="#分析与总结" class="headerlink" title="分析与总结"></a>分析与总结</h2><h3 id="·-语文-2"><a href="#·-语文-2" class="headerlink" title="· 语文"></a>· 语文</h3><p>语文又烂了（ 主要是选择题弱智了害（</p><p>起码多错了两个，加上古诗默写令人窒息一共10分我吐了</p><p>真的不是我不会背，我是真的没搞清楚要考哪句话x吐了 这个作文也是迷惑的一批）</p><p>希望尽量不要错弱智选择题，古诗不能错了真的不能错了x</p><p>简单题也只能靠命了</p><h3 id="·-数学-2"><a href="#·-数学-2" class="headerlink" title="· 数学"></a>· 数学</h3><p>不说了翻车最惨的就是数学</p><p>首先本来选择题就有不会的，然后可能因为我看题太急了，没动笔心算还把题看错了（是说怎么这么简单？</p><p>然后就是第8题不等式这个我又蒙圈了（ 可能需要加强不等式练习？</p><p>然后最后那个12题我本来是会做的，不知道在搞啥又搞错了x服了</p><p>填空题第2题，草，lg5=lg2+lg3不愧是我哈哈哈哈 甚至忘了lg5+lg2=1。。。</p><p>16题确实不会x当时就没想</p><p>你看看5个选填是人错的？25分白给？</p><p>再说17题，我十分优秀的做出来了，结果第一问求了个角度就走了？啊这）</p><p>18题够简单了吧，行吧法向量正负号写错一个 牛逼啊</p><p>果然脑子已经锈掉了哈哈哈哈哈哈哈</p><p>19题优秀啊 唯一一个全对答题））））））</p><p>20题 害考虑掉了最后只剩一个不用再检测了）</p><p>21题就不说了太秀了</p><p>22题简直毒瘤东西，极坐标大吃亏</p><p>希望能加强练习吧</p><h3 id="·-英语-2"><a href="#·-英语-2" class="headerlink" title="· 英语"></a>· 英语</h3><p>英语仍然是老问题了，还是想的太多，已经交流过了会尽量改正的）</p><p>难受了）</p><p>主要还是不能主观臆断，虽然确实很迷惑。。。。我再也不想做高中英语阅读了，四级阅读做的都比这强</p><h3 id="·-物理-2"><a href="#·-物理-2" class="headerlink" title="· 物理"></a>· 物理</h3><p>物理还是害 实验算错了太多，数据算错就尼玛离谱得很，选修选择题又翻车，这次也不小心错了</p><p>吐了 会加强训练的 物理还是又很多地方不太熟练的</p><p>会针对性进行训练</p><h3 id="·-化学-2"><a href="#·-化学-2" class="headerlink" title="· 化学"></a>· 化学</h3><p>这次化学考得倒是还行，因为比较简单，会在训练中继续查漏补缺</p><h3 id="·-生物-2"><a href="#·-生物-2" class="headerlink" title="· 生物"></a>· 生物</h3><p>生物这次同理，也很简单，但自己概念还是有很多不熟悉的地方，会继续加强训练。</p><p>害水的不行，没心情写了orz</p><h1 id="武汉市六月第一套供题试卷分析"><a href="#武汉市六月第一套供题试卷分析" class="headerlink" title="武汉市六月第一套供题试卷分析"></a>武汉市六月第一套供题试卷分析</h1><p>最近考试真的频繁还是写一下分析继续找问题吧）））</p><h2 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h2><p>这次语文翻车大概在选择题？害这选择题确实比较恶心，就是没有计算没发现4C错了 但我觉得4B真的有问题吧，可能还要去问一下。</p><p>层层递进，看到首先再 对不起被蒙蔽了，为啥我真的没看出来比喻论证？？</p><p>断句不会orz 害挺迷惑的哈</p><p>作文这次难得有48 争气了（（（（太难了吧</p><p>语文就是这样，脑回路没对上真的没办法</p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>数学这次真就两个睿智选择题吧害）））说实话后面确实没有难点</p><p>17题范围写错都看出来真的改的挺仔细了，还好后面过程写的很详细没啥问题</p><p>以后确实写题还是每步都写清楚免得要扣分）））</p><p>希望继续保持，别再犯傻逼错误了</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>英语终于争气了害</p><p>总算掌握了一点阅读套路？？？？文章写啥就选啥 想多就错没有用的害</p><p>希望能继续保持感觉吧，英语真的天天对电波，真的难顶，会努力整好脑回路的）</p><h2 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h2><p>这次选修真的司马了吐了吐了我服了（（（（（</p><p>一开始没发现两个k不一样，懵逼了很久</p><p>结果发现是个数论题？？？？我？？？？？</p><p>后来只有3分钟了，啥也憋不出来了））））</p><p>电磁感应那个最后是我没分析清楚orz 模型不太记得，以为不一样）））</p><p>太惨了orz</p><h2 id="化学"><a href="#化学" class="headerlink" title="化学"></a>化学</h2><p>化学翻车说是难那是简单</p><p>说没就没</p><p>方程式写错一没就全没我死了</p><p>选修有机司马了</p><p>是我手抖啥也没看清楚（）（）（）（）我会看看结构的orz</p><p>主要这次结构第一题我也没看懂）</p><p>吐了真的佛了</p><p>orz</p><h2 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h2><p>生物老师改卷司马了）））））））</p><p>怎么遗传最后一问没分呢？？？？？草死了））））</p><p>什么垃圾题出的 吐了啊真的就恶心人吧</p><p>真的无语 生物出的什么东西好恶心人啊</p><p>nmsl</p><p>完了总结越写越水，有的时候真的刷题也不知道刷什么题，物理大概有方向，化学真的没有方向，生物也感觉很模糊不清 难顶 英语高考题大概也要多看看 太难顶了 现在真的什么地方都乌烟瘴气 吐了 不想上网了 喷子司马了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前排提示：本分析写给自己 并不适合长时间阅览）&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;武汉市四月调考总结&quot;&gt;&lt;a href=&quot;#武汉市四月调考总结&quot; class=&quot;headerlink&quot; title=&quot;武汉市四月调考总结&quot;&gt;&lt;/a&gt;武汉市四月调考总结&lt;/</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="paper_analysis" scheme="http://yoursite.com/tags/paper-analysis/"/>
    
  </entry>
  
  <entry>
    <title>高中相关资料整理汇总</title>
    <link href="http://yoursite.com/2020/05/17/%E9%AB%98%E4%B8%AD%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/05/17/%E9%AB%98%E4%B8%AD%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-17T06:44:11.000Z</published>
    <updated>2020-07-04T14:04:49.093Z</updated>
    
    <content type="html"><![CDATA[<p>最近也许会根据自己的问题整理一些学习资料，有需要的可以自取啦</p><p>高中物理学史总结→<a href="http://qatm6poz0.bkt.clouddn.com/%E9%AB%98%E4%B8%AD%E7%89%A9%E7%90%86%E5%AD%A6%E5%8F%B2%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93new.docx" target="_blank" rel="noopener">点击下载物理学史</a> </p><p>高中必背古诗→<a href="http://qatm6poz0.bkt.clouddn.com/%E9%AB%98%E4%B8%AD%E8%AF%AD%E6%96%8764%E7%AF%87%E5%BF%85%E8%83%8C%E5%8F%A4%E8%AF%97%E6%96%87.docx" target="_blank" rel="noopener">点击下载必背古诗</a>（ps：论语部分每年不太一样，请以当年为准，我这个有点问题懒得改了x）</p><p>老师整理的生物教材课后习题答案</p><p>必修一→<a href="http://qatm6poz0.bkt.clouddn.com/%E5%BF%85%E4%BF%AE1%E6%95%99%E6%9D%90%E8%AE%A8%E8%AE%BA%E3%80%81%E6%97%81%E6%A0%8F%E6%80%9D%E8%80%83%E9%A2%98%E3%80%81%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88.doc" target="_blank" rel="noopener">点击下载</a></p><p>必修二→<a href="http://qatm6poz0.bkt.clouddn.com/%E5%BF%85%E4%BF%AE2%E7%AD%94%E6%A1%88%EF%BC%88%E6%8E%92%20%E7%89%886%E5%8F%B7%EF%BC%89.doc" target="_blank" rel="noopener">点击下载</a></p><p>必修三→<a href="http://qatm6poz0.bkt.clouddn.com/%E5%BF%85%E4%BF%AE3%E6%95%99%E6%9D%90%E8%AE%A8%E8%AE%BA%E3%80%81%E6%97%81%E6%A0%8F%E6%80%9D%E8%80%83%E9%A2%98%E3%80%81%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88.doc" target="_blank" rel="noopener">点击下载</a></p><blockquote><p>7.4更新 由于买不起域名 还要备案，还想看的直接评论或者私信我qq吧x 2830760496</p></blockquote><blockquote><p>评论不常看orz</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近也许会根据自己的问题整理一些学习资料，有需要的可以自取啦&lt;/p&gt;
&lt;p&gt;高中物理学史总结→&lt;a href=&quot;http://qatm6poz0.bkt.clouddn.com/%E9%AB%98%E4%B8%AD%E7%89%A9%E7%90%86%E5%AD%A6%E5</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>每日学习打卡&amp;整理合集</title>
    <link href="http://yoursite.com/2020/04/29/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1&amp;%E6%95%B4%E7%90%86%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2020/04/29/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1&amp;%E6%95%B4%E7%90%86%E5%90%88%E9%9B%86/</id>
    <published>2020-04-29T12:42:22.000Z</published>
    <updated>2020-06-24T11:38:30.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="具体计划与安排"><a href="#具体计划与安排" class="headerlink" title="具体计划与安排"></a>具体计划与安排</h2><hr><h3 id="物理模块（持续更新中）"><a href="#物理模块（持续更新中）" class="headerlink" title="物理模块（持续更新中）"></a>物理模块（持续更新中）</h3><ol><li>静电屏蔽等专题，感觉还是有点迷</li><li>多用电表电流表的量程大小比较</li><li>发现电磁感应大题仍有失误</li><li>发现动量大题综合计算仍然不熟练</li><li>需要加强选择题训练</li><li>力学分析小题总有欠缺</li><li>电学题目需要加强，需要针对性训练</li><li>核物理需要加强，看书复习</li></ol><h3 id="生物复习计划（持续更新中）"><a href="#生物复习计划（持续更新中）" class="headerlink" title="生物复习计划（持续更新中）"></a>生物复习计划（持续更新中）</h3><p>粗略的计划是从必修一第4章，开始每天1节，从今天4.29开始打卡，共50节</p><p>预计4.29–6.16号结束（无特殊情况不可不打卡）如每日单词要坚持到底</p><ul><li>4.29打卡完成第4章第1节物质跨膜运输的实例（找出了从前不知道的误区）</li><li>4.30打卡完成第4章第2节生物膜的流动镶嵌模型</li><li>5.1打卡完成第4章第3节物质的跨膜运输的方式</li><li>5.2打卡完成第5章第1节降低化学反应活化能的酶（这节比较长，巩固了蛮多的）</li><li>5.3打卡完成第5章第2节细胞能量的通货——ATP</li><li>5.4打卡完成第5章第3节ATP的主要来源——细胞呼吸</li><li>5.5打卡完成第5章第4节能量之源——光与光合作用的第一部分：捕获光能的色素和结构（因时间和内容较多的原因分为两天复习） </li><li>5.6打卡完成必修二第1章第一节孟德尔的豌豆杂交实验（一） （我的必修一忘带回来了orz） </li><li>5.7打卡完成必修一第5章第4节量之源——光与光合作用剩余部分 </li><li>5.8打卡完成第6章第1节细胞的增殖 </li><li>5.9由于没带生物书，今天暂且以看笔记本为主（习惯养成了太难改了😂</li><li>5.10打卡完成第6章第2节细胞的分化 </li><li>5.11打卡完成第6章第3节细胞的衰老和凋亡 </li><li>5.12打卡完成第6章第4节细胞的癌变 </li><li>5.13打卡完成必修二第1章第2节孟德尔的豌豆杂交实验（二）  </li><li>5.14打卡完成第2章第1节减数分裂和受精作用 </li><li>5.15打卡完成第2章第2节基因在染色体上 </li><li>又忘带书了下次一定）</li><li>5.17打卡完成第2章第3节伴性遗传 </li><li>5.18打卡完成第3章第1节DNA是主要的遗传物质 </li><li>5.19打卡完成第3章第2节DNA分子的结构 </li><li>5.20打卡完成第3章第3节DNA的复制 </li><li>5.21打卡完成第3章第4节基因是有遗传效应的DNA片段 </li><li>5.22打卡完成第3章后3节（遗传部分比较快x </li><li>5.23打卡完成第4章第1节基因指导蛋白质的合成（带书了！！</li><li>5.24打卡完成第4章剩余+第5章第一节基因突变和基因重组（我之前好像一起复习了？ </li><li>5.25打卡完成第5章第2节染色体变异 </li><li>5.26打卡完成第5章第3节人类遗传病 </li><li>5.27打卡完成第6章第1节杂交育种与诱变育种 </li><li>5.28打卡完成第6章第2节基因工程及其应用 </li><li>5.29打卡完成第6章第1节现代生物进化理论的主要内容 </li><li>5.30打卡完成第6章第2节第一部分种群基因频率的改变与生物进化</li><li>5.31打卡完成第6章第2节剩余部分 </li><li>6.1打卡完成必修三第1章第1节细胞生活的环境 </li><li>6.2打卡完成第1章第2节内环境稳态的重要性 </li><li>6.3打卡完成第3章第1节通过神经系统的调节 </li><li>6.4打卡完成第3章第2节激素调节部分内容） </li><li>6.5打卡完成第3章第2节激素调节剩余 </li><li>没带书orz</li><li>6.7打卡完成第2章第3节神经调节与体液调节的关系 </li><li>6.8打卡作业太多太困了免疫调节看了一点先睡了orz </li><li>6.9打卡完成第2章第4节免疫调节 </li><li>6.10打卡完成第3章第1节植物生长素的发现 </li><li>6.11打卡完成第3章后两节 </li><li>6.12打卡完成第4章第1节种群的特征</li><li>又没带书草x</li><li>6.14打卡完成第4章第2节种群数量的变化 </li><li>搞课改网太晚了））） </li><li>6.16打卡完成第4章第3节群落的结构 </li><li>6.17打卡完成第4章第4节群落的演替 </li><li>6.18打卡完成第5章第1节生态系统的结构 </li><li>6.19打卡完成第5章第2节生态系统的能量流动 </li><li>带错书了xxx </li><li>6.21打卡完成第5章后两节 </li><li>6.22打卡完成第6章生态环境的保护 </li></ul><h3 id="至此，生物三本必修终于复习完毕"><a href="#至此，生物三本必修终于复习完毕" class="headerlink" title="至此，生物三本必修终于复习完毕"></a>至此，生物三本必修终于复习完毕</h3><h3 id="化学模块（持续更新中）"><a href="#化学模块（持续更新中）" class="headerlink" title="化学模块（持续更新中）"></a>化学模块（持续更新中）</h3><p>· 实验大题中对一些装置作用的解答怎样写的全面准确</p><p>· 大题中各种对现象的解释有时候写不出来</p><p>· 平衡大题中什么时候从平衡的角度答，什么时候从反应速率来答</p><p>总体来说还是简单题问题大于计算吧，具体的太细了感觉找不出来只能大题概括一下x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;具体计划与安排&quot;&gt;&lt;a href=&quot;#具体计划与安排&quot; class=&quot;headerlink&quot; title=&quot;具体计划与安排&quot;&gt;&lt;/a&gt;具体计划与安排&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;物理模块（持续更新中）&quot;&gt;&lt;a href=&quot;#物理模块（持续更新中）&quot; clas</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>生物遗忘知识点总结</title>
    <link href="http://yoursite.com/2020/04/11/%E7%94%9F%E7%89%A9%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/11/%E7%94%9F%E7%89%A9%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-11T12:42:22.000Z</published>
    <updated>2020-07-30T03:59:16.975Z</updated>
    
    <content type="html"><![CDATA[<p>开坑了开坑了！！！</p><p>鉴于最近考试很多，发现自己写必备知识点的时候总是写不出来，于是开坑查漏补缺嗷~</p><p><strong>ps:冷门知识点总结，常用的没有x</strong></p><h1 id="必修部分"><a href="#必修部分" class="headerlink" title="必修部分"></a>必修部分</h1><h2 id="·-生态与种群"><a href="#·-生态与种群" class="headerlink" title="· 生态与种群"></a>· 生态与种群</h2><ol><li>分解者作用：将<strong>动植物遗体和动物排遗物</strong>中的有机物分解为无机物。</li><li>生产者作用：把太阳能变成可被生物利用的有机物中的化学能。</li><li>消费者作用：<strong>直接或间接依赖于植物</strong>，加快生态循环，<strong>帮助植物传粉和播种</strong>。</li><li>次生演替概念：在原有植被虽然已经不存在但<strong>保留原有土壤条件</strong>，甚至<strong>保留了植物种子或其他繁殖体的地方发生演替</strong>。</li><li>垂直结构的意义：提高生物群落整体对<strong>自然资源</strong>的充分利用，对植物来说<strong>提高光能的利用率</strong>，对动物来说为<strong>动物创造多种多样的栖息空间和食物条件</strong>。</li><li>生物多样性价值区分：直接价值：旅游，<strong>科研</strong>，艺术。间接价值：<strong>生态价值</strong>。</li><li>种间竞争的概念：两种生物生活在一起，互相争夺。</li><li>K值定义：<strong>在环境条件不受破坏的情况下</strong>，一定空间中所能维持的种群最大数量。 </li><li>研究种群变化意义：对于<strong>有害动物的防治</strong>，野生生物资源的<strong>保护和利用</strong>，以及濒危动物种群的<strong>拯救和恢复</strong>。 </li><li>对酵母菌计数前要<strong>先摇匀再吸取</strong>培养液。 </li><li>群落定义：<strong>同一时间</strong>内聚集<strong>在一定区域中</strong>各种生物种群的集合。 </li><li>群落的<strong>物种组成</strong>是区别不同群落的重要特征。 </li><li>互利共生：两种生物共同生活在一起，<strong>相互依存，彼此有利</strong>。 </li><li>竞争：两种或两种以上生物相互<strong>争夺资源或空间</strong>（而表现出来的相互抑制的现象）。 </li><li>水平结构：由于地方变化、土壤湿度和盐碱度的差异，光照强度、生物自身生长特点的不同以及人与动物的影响因素，生物常呈现镶嵌分布。 </li><li>演替定义：随着时间推移，一个群落被另一个群落代替的过程。 </li><li>地衣分泌的<strong>有机酸加速岩石风化</strong>形成土壤过程，使苔藓有生存基础。苔藓使岩石分解，有机物增多，群落越来越丰富。 </li><li>初生演替概念：一个从来没有被植物覆盖的表面，或者是原来存在过植被、但被彻底消灭了的地方发生的演替。 </li><li>生态系统：由生物群落与它的<strong>无机环境相互作用</strong>而形成的统一整体。 </li><li>未利用的能量：指未被自身呼吸呼吸作用消耗，也未被后一营养级利用和分解者分解的能量。</li></ol><h2 id="稳态与环境"><a href="#稳态与环境" class="headerlink" title="稳态与环境"></a>稳态与环境</h2><ol><li>效应器：<strong>传出神经末梢</strong>及其所支配的肌肉或腺体。</li><li>神经  中枢的作用：<strong>对信号分析综合，产生处理意见</strong>。</li><li>感受器作用：<strong>感受外界刺激，产生兴奋</strong>。</li><li>兴奋的概念：某些<strong>组织或细胞</strong>受到外界刺激后，由<strong>相对静止</strong>变为<strong>显著活跃</strong>。</li><li>血糖的正常范围：0.8-1.2g/L</li><li>产热的主要器官：<strong>肝脏和骨骼肌</strong>。 温度感受器的分布：<strong>皮肤，黏膜，内脏器官</strong>。</li><li>血浆组成：<strong>90%约为水</strong>，无机盐1%，蛋白质（7%-9%），以及各种血浆运输的物质。 </li><li>细胞外液理化性质：渗透压，酸碱度，温度。 </li><li>细胞外液渗透压90%来源于<strong>Na+和Cl-</strong>。 </li><li>溶液渗透压概念：溶质微粒对水的吸引力，取决于单位体积溶液中<strong>溶质微粒的数目</strong>。 </li><li>血浆PH：7.35～7.45 </li><li>组织水肿的原因：1.淋巴管堵塞：不能回流。2.过敏反应、炎症：血浆蛋白渗出。3.营养不良：血浆蛋白减少。4.局部活动性加强：代谢加快，组织渗透压增大。 </li><li>兴奋定义：动物体或人体内某些组织（如神经组织）或细胞受到外界刺激后，由相对静止状态变为<strong>显著活跃状态</strong>的过程。 </li><li>反射定义：在中枢神经系统的参与下，<strong>动物体或人体</strong>对内外环境变化作出的<strong>规律性应答</strong>。 </li><li>效应器：<strong>传出神经末梢</strong>和<strong>它所支配的肌肉或腺体</strong>。 </li><li>常见神经递质：乙酰胆碱，多巴胺，去甲肾上腺素，肾上腺素，5-羟色胺，氨基酸类，NO。 </li><li>脑中枢作用：下丘脑：水盐平衡，血糖平衡，体温调节，水平衡，控制生物节律。脑干：维持生命必要中枢（如呼吸中枢）大脑皮层：调节机体活动。小脑：维持身体平衡。脊髓：调节躯体运动的低级中枢。 </li><li>反馈调节定义：在一个系统中，<strong>系统本身的工作效果</strong>反过来又作为<strong>信息调节</strong>该系统的工作。 </li><li>激素一经<strong>靶细胞接受并起作用</strong>后就被灭活了。</li><li>非免疫调节特点：人人生来具有的，也<strong>不针对某一类特定病原体</strong>。 </li><li>植物激素：有植物体内产生，能从<strong>产生部位运送到作用部位</strong>，对植物的生长发育有显著影响的微量有机物。 </li><li>植物生长调节剂：人工合成的<strong>对植物生长发育有调节作用</strong>的化学物质。</li><li>生长素产生的部位：<strong>幼嫩的芽,叶，发育的种子</strong>。赤霉素合成的部位：<strong>未成熟的种子，幼根和幼芽</strong>。</li><li>生长素与乙烯的关系：生长素浓度高时，会促进乙烯的合成，而乙烯含量低时也会促进生长素合成。</li><li><strong>单细胞生物</strong>与和<strong>一些多细胞低等动物</strong>只有体液调节。</li><li>肾上腺素作用：反应灵敏，警惕性提高，呼吸速率增加，心率加快。</li><li>过敏反应：只已经产生免疫的机体<strong>再次接受相同抗原</strong>时所引起的<strong>组织损伤或功能紊乱</strong>。</li></ol><h2 id="分子与细胞"><a href="#分子与细胞" class="headerlink" title="分子与细胞"></a>分子与细胞</h2><ol><li>活化能定义：分子从常态转变为容易发生化学反应的活跃状态所需要的能量。</li><li>酶专一性的意义：<strong>细胞代谢能有条不紊</strong>的进行，离不开酶的专一性。</li><li>胃蛋白酶最适PH：1.5。</li><li>溶菌酶作用：溶菌酶能<strong>溶解细菌细胞壁</strong>，具有<strong>抗菌消炎</strong>的作用。</li><li>提取叶绿素用无水乙醇，若没有可用95%的乙醇替代并加入碳酸钠吸收水分。 </li><li>叶绿素提取实验注意事项：要将研磨液迅速倒入玻璃漏斗，漏斗基部放一块单层尼龙布，<strong>不能让滤液细线触及层析液</strong>。 </li><li>波长小于390nm是紫外光，大于760nm是红外光。 </li><li>细胞分化定义：在个体发育中，由一个或一种细胞增殖产生的后代，在<strong>形态、结构和生理功能</strong>上发生<strong>稳定性差异</strong>的过程。 </li><li>细胞的全能性定义：已经分化的细胞，仍然具有<strong>发育成完整个体的潜能</strong>。 </li><li>细胞凋亡的意义：对于多细胞生物完成正常发育，<strong>维持内部环境的稳定，抵御外界各种因素的干扰</strong>起非常关键的作用。 </li><li>自由基学说：攻击和破坏细胞内各种执行正常功能的生物分子，还能<strong>攻击DNA，引起基因突变</strong>，攻击蛋白质，使活性下降，使细胞衰老。 </li><li>端粒学说：每条染色体的两端有一段特殊序列的DNA，对细胞分裂次数的增加，截短的部分会逐渐向内延伸，使内测正常序列受损。</li><li>细胞膜上<strong>大多数</strong>蛋白质可以运动。</li><li>细胞骨架的功能：与细胞运动，分裂，分化，与物质运载，能量转化，信息传递与生命活动密切相关。</li><li>白细胞的凋亡速率<strong>大于</strong>红细胞。</li><li>生命活动的<strong>蓝图</strong>——遗传信息。</li><li>胆固醇饮食中若摄入过多会在血管壁上形成沉积堵塞血管。</li><li>哺乳动物的红细胞的核逐渐退化并从细胞中排出是<strong>胞吐</strong>。</li><li>主动运输意义：普遍存在于动植物和微生物细胞中 ，保证活细胞能够按照生命活动的需要，主动选择吸收所需要的营养物质，<strong>排除代谢废物和对细胞有害的物质</strong>。</li><li>抗生素：四环素，氯霉素，红霉素，链霉素。</li><li>囊性纤维病和<strong>Na+,Cl-</strong>的转运都有关系</li></ol><h2 id="遗传与进化"><a href="#遗传与进化" class="headerlink" title="遗传与进化"></a>遗传与进化</h2><ol><li>性状分离的定义：<strong>杂种后代</strong>中，同时出现显性性状和隐形性状的现象。  </li><li>孟德尔提出的假说内容：1.生物的性状是由遗传因子决定的。2.体细胞中遗传因子成对存在。3.形成配子时，成对的遗传因子<strong>彼此分离</strong>，分别进入不同的配子中，配子只含有遗传因子中的一个。4.受精时，雌雄配子随机结合。 </li><li>假说演绎法的概念：在观察和分析的基础上提出问题以后，通过<strong>推理和想象提出解释问题的假说</strong>，根据实验检验演绎推理的结果。</li><li>噬菌体侵染实验中搅拌作用：让吸附在大肠杆菌上的<strong>噬菌体</strong>与细菌分离。<strong>不能说蛋白质外壳</strong></li><li>噬菌体侵染实验中离心作用：让上层清液中留下被感染的大肠杆菌。</li><li>DNA精确复制的原因：DNA分子独特的双螺旋结构，<strong>复制提供了精确的模板</strong>。<strong>通过碱基互补配对</strong>，保证了复制能准确进行。</li><li>遗传咨询：询问对象，了解家庭病史诊断遗传病→分析传递方式→<strong>推算后代再发风险率</strong>→提出防治对策和建议 </li><li>黑农五号大豆<strong>基因突变</strong>，青霉素<strong>选育诱变育种</strong>。 </li><li>基因工程相关：常用运载体：质粒，噬菌体，动植物病毒。质粒存在许多细菌以及酵母菌等生物细胞中，是<strong>拟核或细胞核外能够自主复制的很小的环状DNA上</strong>。 </li><li>基因工程步骤：提取目的基因→目的基因与运载体结合→将目的基因导入受体细胞→目的基因的检测与鉴定。</li><li>基因自由组合的定义：杂合子细胞中同源染色体上等位基因彼此分离的同时<strong>非同源染色体</strong>上<strong>非等位基因</strong>自由组合。</li><li>花药离体培养为<strong>有性生殖</strong>。</li><li>基因分离定义定义：杂合子细胞中等位基因<strong>随同源染色体的分开而分离</strong>，分别进入两个配子，独立的随配子遗传给后代。</li></ol><h1 id="生物学科学家各种事件归纳"><a href="#生物学科学家各种事件归纳" class="headerlink" title="生物学科学家各种事件归纳"></a>生物学科学家各种事件归纳</h1><ul><li>施旺和施莱登建立细胞学说。</li><li>1665年虎克是细胞的发现和命名者。</li><li>列文虎克自制显微镜。</li><li>1858年魏尔肖总结出细胞通过分裂产生新细胞，所有细胞都来自先前的细胞。  </li><li>欧文顿提出膜是由脂质组成的。</li><li>罗比特森提出暗–亮–暗的细胞膜结构，为蛋白质–脂质–蛋白质。</li><li>桑格和尼克森提出流动镶嵌模型。</li><li>1857年巴斯德提出酿酒中的发酵是由于酵母菌的存在。</li><li>李比希认为影响的发酵的是酵母细胞中的某些物质。</li><li>毕希纳进行实验将酵母细胞中引起发酵的物质成为脲酶。</li><li>萨姆纳认为酶是蛋白质并做了许多实验验证。</li><li>切赫和奥特曼发现少数RNA也具有生物催化功能。</li><li>萨克斯发现叶绿素集中在叶绿体中。 </li><li>恩格尔曼做水绵实验发现好氧细菌都集中在叶绿体所有受光部位。 </li><li>普利斯特利用实验验证植物可以更新因蜡烛燃烧或小白鼠呼吸而变得污浊的空气。 </li><li>英格豪斯发现上面实验要在阳光下才能成功。 </li><li>梅耶指出植物在进行光合作用时，把光能转化为化学能储存起来。 </li><li>萨克斯做半叶实验证明光合作用产物除氧气之外还有淀粉。 </li><li>鲁宾和卡门用同位素标记法证明氧气只来自水。 </li><li>卡尔文用小球藻证明碳在光合作用中的循环，称为卡尔文循环。</li><li>道尔顿是第一个提出色盲问题的人。 </li><li>格里菲思做了肺炎双球菌体外转化实验发现有某种转化因子能将R型菌转化为S型菌。 </li><li>艾弗里做S型菌内物质的分离实验提出DNA是S型菌稳定遗传变化的物质。 </li><li>赫尔希和蔡斯用放射性同位素标记的新技术做了噬菌体侵染细菌实验。 </li><li>沃森和克里克以及富兰克林构建DNA双螺旋结构模型，威尔金斯展示X射线衍射图谱。 </li><li>克里克提出中心法则（传统版本）。</li><li>1857年贝尔纳提出内环境是生命能独立和自由存在的首要条件。 </li><li>1926年坎农提出稳态是动态平衡的。 </li><li>沃泰默发现稀盐酸能促进小肠胰液分泌。 </li><li>斯他林和贝利斯发现小肠黏膜分泌化学物质进入血液引起胰液分泌。</li><li>达尔文用锡纸罩上尖端，发先无法弯曲生长，提出尖端受单侧光刺激后能传递某种影响。 </li><li>1910年鲍森詹森证明胚芽鞘尖端产生的影响可以透过琼脂片传递给下部。 </li><li>1914年拜尔证明胚芽鞘弯曲生长是因为尖端产生的影响在其下部部分分布不均匀造成的。 </li><li>1928年温特证明弯曲生长由化学物质引起，并命名这种物质为生长素。</li></ul><p><a href="http://qcwa2zkhv.bkt.clouddn.com/%E7%94%9F%E7%89%A9%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%932.md" target="_blank" rel="noopener">点击源文件获取（md格式）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开坑了开坑了！！！&lt;/p&gt;
&lt;p&gt;鉴于最近考试很多，发现自己写必备知识点的时候总是写不出来，于是开坑查漏补缺嗷~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ps:冷门知识点总结，常用的没有x&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;必修部分&quot;&gt;&lt;a href=&quot;#必修部分&quot; clas</summary>
      
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>临近高考的我--随笔</title>
    <link href="http://yoursite.com/2020/02/18/%E4%B8%B4%E8%BF%91%E9%AB%98%E8%80%83%E7%9A%84%E6%88%91/"/>
    <id>http://yoursite.com/2020/02/18/%E4%B8%B4%E8%BF%91%E9%AB%98%E8%80%83%E7%9A%84%E6%88%91/</id>
    <published>2020-02-18T14:35:55.000Z</published>
    <updated>2020-05-31T06:40:41.098Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="6d1599005fe0ee4350bc36b6d183f40f7a5e5ca81253765d81fead6a259f56e7"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="STUDY" scheme="http://yoursite.com/categories/STUDY/"/>
    
    
    <category term="study_notes" scheme="http://yoursite.com/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>再见了, OI</title>
    <link href="http://yoursite.com/2018/11/11/%E5%86%8D%E8%A7%81%E4%BA%86,OI/"/>
    <id>http://yoursite.com/2018/11/11/%E5%86%8D%E8%A7%81%E4%BA%86,OI/</id>
    <published>2018-11-11T12:14:34.000Z</published>
    <updated>2020-05-24T06:49:42.649Z</updated>
    
    <content type="html"><![CDATA[<p>2018.11.11 NOIP2018day2 结束，我坦然的走出考场。</p><p>绵绵细雨中，抬头望着阴沉的天空，回望身后的考场，我微笑着走向出口。</p><p>——再见了，OI</p><p>这一切也许都有些不真实，但我是真的离开了。</p><p>我有点想笑，又有些想哭。</p><p>笑自己的不甘与奢望，哭自己的脆弱与愚蠢。</p><p>没有拿到想要的成绩，就只能止步与此，留下一个并不值得骄傲的收场。</p><p>也许是因为不够努力，也也许是因为紧张。但过去的事就已经过去了，再去追究也并无他用。</p><p>但我从不后悔，就算一无所获，我也不虚此行。</p><p><img src="https://i.loli.net/2018/11/11/5be821a48cf0f.jpg" alt=""></p><h1 id="I-遇见"><a href="#I-遇见" class="headerlink" title="I 遇见"></a>I 遇见</h1><hr><p>还记得刚走进这个机房时的好奇，抱着玩玩的心态，看着谭浩强写的《C语言程序设计》，还不知所云——编程是个什么东西。直到我开始码我的第一份代码，不会用IDE，也不懂程序构架，只是照着黑板上的代码一通抄，最后也什么都不懂。</p><p>教练开始细心指导时，我才仿佛第一次走进了OI。</p><p><img src="https://i.loli.net/2018/11/11/5be82577ae2c8.jpg" alt=""></p><h1 id="II-迷茫"><a href="#II-迷茫" class="headerlink" title="II 迷茫"></a>II 迷茫</h1><hr><p>几次测试的成绩并不理想，像我这个OI小白，之前从未接触过程序什么都不懂，当上到循环这节时是真的头大，最终选拔测试拿到了20分的好成绩，竟然莫名其妙的被教练选中。</p><p>当时我已经准备放弃，觉得OI太难完全无法坚持，却在家长同学的劝说和迷茫的心态下继续学了下去。</p><p>我也不知道是否能走到最后，感觉什么都学的很模糊，感觉仿佛什么都懂，又什么也不懂，但还是咬牙坚持。</p><h1 id="III-决心"><a href="#III-决心" class="headerlink" title="III 决心"></a>III 决心</h1><p>NOIP2017光荣的拿到了40分的好成绩，我安慰我自己，只是因为自己懂得不够多，只是因为不会猜结论，我还是有实力，我还有明年。</p><p>此时学校已经在周六时安排考试，因为学习的重压，机房的两个女生选择退出OI。</p><p>当她跟我说她的决定时，我曾经也笑着说道：我也要退役了。</p><p>当教练宣布退役决定时，话说的很重，说我们中还有谁不想干就赶快走人。</p><p>这次，教练的话让我真正明白了自己的选择，我已经在心里选择了坚持走下去。</p><p>虽然每天周末都要在路上，车上挤时间出来完成额外的卷子，但我却觉得这样的生活也还能接受。大家都纷纷抱怨竞高班的苦与累，却都只是嘴上说说，都是边骂着校长边完成着卷子。</p><p>在公交车上写化学卷子的时候，我还有些暗暗骄傲，用车上时间完成了大部分试卷。沐浴着想象中大人们欣赏的目光，还仿佛更有动力，有点身处闹市独我一人情境的清高感。</p><p>说实话我心里一直自我感觉良好，感觉能一边竞赛一边保持文化课还能有些时间画画的我十分厉害（<del>但事实并非如此</del>），一直带着这种伪自傲感，我糊里糊涂的过完了高一上学期。</p><p>在前面光荣的领奖学金的时候，我一直是这样自我感觉良好的。</p><blockquote><p>自己选的路，跪着也要走完。</p></blockquote><p><img src="https://i.loli.net/2018/11/11/5be829bcc3266.jpg" alt=""></p><p>2017 NOIP</p><p>十分高大的毛爷爷像，考前一膜%%</p><p><img src="https://i.loli.net/2018/11/13/5bea984d41052.jpg" alt="IMG_4793(20181113-172330).jpg"></p><p><img src="https://i.loli.net/2018/11/13/5bea9851c4db7.jpg" alt="IMG_4792.JPG"></p><h1 id="IV-前进"><a href="#IV-前进" class="headerlink" title="IV 前进"></a>IV 前进</h1><hr><p>到了下学期，随着学习难度的增加以及补课的安排，我已经渐渐地有些力不从心，考试成绩波动也大，OI测试也一直是中游。算法学的也越来越多，当我开始独立刷题时我才意识到自己的缺陷，之前学的算法全都没有弄懂，只能靠自己刷题时重新自学，看着题解注释，一步步理解。</p><p>这时我开始有些后悔，当初为何没有认真学。这才发现自己的感觉都是假的，不知不觉中已经落下大家一大步。</p><blockquote><p>父母总说我学习不用心，不认真，无论学什么都没有付出很多，总想着凭自己的小聪明拿到好成绩。</p></blockquote><p>事实证明这在初中是管用的，在每天和同桌互抄作业的初三生活中我做到了这点，最后中考还考得不错，但却没有考的非常好。这时我仍觉得自己没付出多少却又拿到了这样的成绩，这是很值得的，我还非常高兴。但其实现在想想，当时已经暴露出了我的问题。</p><p>但总之，我还是慢慢补了回来一些知识，虽然做题仍然不顺利，却总算都有收获。</p><p>不知不觉中，到了暑假我开始了人生中最长的一次集训。</p><p>在不断的模拟赛中学习，抽时间复习算法学新算法，每天都过得很快，看着一摞暑假作业我第一次露出了笑容。</p><p>终于我可以远离他们了，我这么想着。</p><p>暑假生活转瞬即逝，我也不知道在暑假我补回了多少，我又和大家缩小了多少差距。</p><p>某天拍的照片，进击的数竞</p><p><img src="https://i.loli.net/2018/11/13/5bea98510188e.jpg" alt="IMG_4791.JPG"></p><h1 id="V-备考"><a href="#V-备考" class="headerlink" title="V 备考"></a>V 备考</h1><hr><p>转眼间到了10月，当我还在思考在听课前我应该如何坚固文化课和OI的时候，就已经到了这里。</p><p>事实上我还是以文化课为主，每天还是在为了作业而奔波。心里想着应该更重视OI一些，联赛前了应该要多刷一点题目，却还是偷懒选择了写作业，玩手机，玩游戏看番，过着惬意的生活。也许就是这样的颓废导致了我联赛的不堪吧。</p><p>这时我还自以为OI还不错，拿个省一应该稳了，但事实上并不如此。</p><p>真正停课了，我开始了针对性复习和刷题，dp，平衡树，数论都在做一些题，好像自己有所领悟，实际上在考场上还是傻子一个。</p><p>上午模拟赛，下午改题，晚上时不时还在水，听着对面教学楼老师讲课声，我还在为他们而悲哀，不得不说停课的生活非常惬意，上午8点到校，中午可以看看番和小说，晚上也能水水。没有了卷子和作业的压力，我第一次觉得一身轻松，数着联赛快到的日子，过着毫无压力的生活。</p><p>我还觉得我已经足够努力了，在不断的练习中我觉得我已经可以赶上大家的步伐，在NOIP中能获得不错的成绩。</p><p>直到NOIP前一天试机时我还是这么想的，还在为自己手打FHQ成功了而沾沾自喜。</p><p>但真理是</p><blockquote><p>一份耕耘，一份收获</p></blockquote><p>没有别人努力，就会失败。</p><p>现在想想 ，当初再努力一点，也许就不会迎来这样的结局。</p><h1 id="VI-退役"><a href="#VI-退役" class="headerlink" title="VI 退役"></a>VI 退役</h1><hr><p>Day1考完出考场的那一刻，我就知道自己已经完了，T1正解没有想出来，线段树还打挂了，大样例没出，直接爆炸，调了一年没看出来错误。T2,T3脑子都是昏的，什么也不会。其实想想也就差一点就想出来了，但临时换了思路，最终爆炸。</p><p>当dalao们都说是三道原题的时候我彻底的崩溃了，大家200+，我也100不到，我已经做好了打铁的准备。看这day1的难度，我知道我day2已经不可能翻盘了。</p><p>正所谓</p><blockquote><p>一年OI一场空，原题不会见祖宗</p></blockquote><p>回家心情仍然很低落，把往年题目扫了一遍，感觉做过的全都不会，积木大赛当时做题完全抄题解也没怎么想，导致有印象却完全没有思路。这再次印证了我上半年做题质量之差。转移心情失败，在家长的劝说下选择9点多睡觉。</p><p>我十分后悔拿不到T1，没有那100分我就已经宣布退役了。</p><p>但再怎么绝望也没有用了，只能整理心情准备Day2。沉默了一天的我，在迷迷糊糊中睡着了。</p><p>Day2早上我已经释然了，在看到题目的那一刻我已经放下了一切。打满了能做到的所有暴力，我毫无感觉的走出了考场，心想着终于结束了呀。</p><p>最后还机房5个人一起看了毒液，快乐退役。</p><p>想想从被逼着坚持到一点点喜欢上OI，不知从何时起已经习惯了这样的生活，突然离开还有些不适应。</p><p>不过一切将全部成为回忆，也许我以后也会经常回忆这段时光。</p><blockquote><p>『此情可待成追忆，只是当时已惘然。』</p></blockquote><p>也许我是个什么都没拿到的丢人的OIer，也不值得学习和称赞，留下这篇博客只为纪念自己的OI生涯。</p><p>其实这个博客也是为了证明我曾是一名OIer而存在的，这是当初建博客的初衷。</p><p>为了自己还有一点留恋和记录，而不是什么都没留下。</p><p>希望看过这篇博客的人都引以为鉴，不要犯我这样的错误，走我的老路。</p><p>NOIP2018</p><p><img src="https://i.loli.net/2018/11/13/5bea9a433b870.jpg" alt="IMG_4773.JPG"></p><hr><h1 id="THE-LAST"><a href="#THE-LAST" class="headerlink" title="THE LAST"></a>THE LAST</h1><p>人生总有遗憾，有幸遇见你，OI。</p><p>虽然并没有收获想要的成绩，但我仍会继续前行，实现自己的理想。</p><p>我永不后悔自己的选择，就算换来一场空，也不枉此行。</p><p>​                                                                                                                        ————2018.11.10 退役感言</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2018.11.11 NOIP2018day2 结束，我坦然的走出考场。&lt;/p&gt;
&lt;p&gt;绵绵细雨中，抬头望着阴沉的天空，回望身后的考场，我微笑着走向出口。&lt;/p&gt;
&lt;p&gt;——再见了，OI&lt;/p&gt;
&lt;p&gt;这一切也许都有些不真实，但我是真的离开了。&lt;/p&gt;
&lt;p&gt;我有点想笑，又</summary>
      
    
    
    
    <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
    <category term="Aoki_umi" scheme="http://yoursite.com/tags/Aoki-umi/"/>
    
  </entry>
  
  <entry>
    <title>题解：LUOGU P4380 Multiplayer Moo</title>
    <link href="http://yoursite.com/2018/11/08/%E9%A2%98%E8%A7%A3%EF%BC%9ALUOGU%20P4380%20Multiplayer%20Moo/"/>
    <id>http://yoursite.com/2018/11/08/%E9%A2%98%E8%A7%A3%EF%BC%9ALUOGU%20P4380%20Multiplayer%20Moo/</id>
    <published>2018-11-08T03:40:00.000Z</published>
    <updated>2020-03-01T08:56:48.092Z</updated>
    
    <content type="html"><![CDATA[<p>来自今天模拟赛一道很有意思 的题</p><h1 id="关于HACK"><a href="#关于HACK" class="headerlink" title="关于HACK"></a>关于HACK</h1><p>之前我也是像一篇题解一样的做法，但是发现这样是错的。</p><p><code>(!mmp[mp[i][j]][mp[frx][fry]])</code></p><p>这一句话的判断又明显的问题，如果之前已经在左上角配过了两种颜色，</p><p>但同样的颜色配对在右下角的联通块大于左上角，但因为左上角已经搜过了，此时右下角不会搜到。</p><p>例如这个数据</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">5</span><span class="token number">5</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span><span class="token number">5</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">5</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确答案是10,错解6。</p><p>或这个</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">5</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">8</span>   <span class="token number">1</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">1</span><span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">11</span> <span class="token number">10</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确答案是10,错解4。</p><p>更多数据请看讨论</p><p>不加这个优化又会TLE，我又不想换算法，那怎么办呢</p><p>于是在此提供一种比较难叉掉的随机算法</p><p><del>（欢迎大家来叉掉）</del></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>首先大家都知道这题是个暴力搜索，第一问很简单，直接对于每个点暴力dfs</p><p>关键是第二问，我们如何找到两种颜色来bfs</p><h2 id="1-我会枚举"><a href="#1-我会枚举" class="headerlink" title="- 1.我会枚举"></a>- 1.我会枚举</h2><p>既然已经说了前面一种优化是错的</p><p>所以我们就直接暴力枚举不考虑颜色。。</p><p>于是可以获得TLE一个点的好成绩</p><p>代码如下</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ans2<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>col<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>ans1<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>flag<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span>match<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    tmp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> tx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ty<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token operator">||</span><span class="token operator">!</span>ty<span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>n<span class="token operator">||</span>vis<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">==</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> point<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> stx<span class="token punctuation">,</span><span class="token keyword">int</span> sty<span class="token punctuation">,</span><span class="token keyword">int</span> sttx<span class="token punctuation">,</span><span class="token keyword">int</span> stty<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接暴力bfs</span><span class="token punctuation">{</span>    tmp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其实这里还可以优化</span>    queue<span class="token operator">&lt;</span>point<span class="token operator">></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>stx<span class="token punctuation">,</span>sty<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>stx<span class="token punctuation">]</span><span class="token punctuation">[</span>sty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">int</span> tx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> ty<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token operator">||</span><span class="token operator">!</span>ty<span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>n<span class="token operator">||</span>flag<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">!=</span>mp<span class="token punctuation">[</span>stx<span class="token punctuation">]</span><span class="token punctuation">[</span>sty<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">!=</span>mp<span class="token punctuation">[</span>sttx<span class="token punctuation">]</span><span class="token punctuation">[</span>stty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             tmp<span class="token operator">++</span><span class="token punctuation">;</span>             flag<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>             q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans2<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans2<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>col<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>col<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span>ans1<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans1<span class="token punctuation">,</span>col<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">int</span> tx<span class="token operator">=</span>i<span class="token operator">+</span>dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> ty<span class="token operator">=</span>j<span class="token operator">+</span>dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token operator">||</span><span class="token operator">!</span>ty<span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>n<span class="token operator">||</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">==</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次暴力找周边的点进行bfs</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-我会随机化"><a href="#2-我会随机化" class="headerlink" title="- 2.我会随机化"></a>- 2.我会随机化</h2><p>基于之前的枚举，我们加入随机化操作。</p><h3 id="1-我会rand-shuffle"><a href="#1-我会rand-shuffle" class="headerlink" title="1.我会rand_shuffle"></a>1.我会rand_shuffle</h3><p>之前是从头枚举到尾，这一次我们用rand_shuffle随机一个排列，按这个顺序进行bfs</p><p>我们惊奇的发现，成功A掉了这题，包括hack的数据！！！</p><p>当然我们还要加入卡时间操作</p><p>第一种随机化操作，正确性还是比较高的</p><pre class="line-numbers language-cpp"><code class="language-cpp">    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>rak<span class="token punctuation">[</span>N<span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      rak<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">random_shuffle</span><span class="token punctuation">(</span>rak<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>rak<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> t <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC <span class="token operator">&lt;</span> <span class="token number">0.9</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           <span class="token keyword">int</span> i<span class="token operator">=</span>rak<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>j<span class="token operator">=</span>rak<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">int</span> tx<span class="token operator">=</span>i<span class="token operator">+</span>dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> ty<span class="token operator">=</span>j<span class="token operator">+</span>dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token operator">||</span><span class="token operator">!</span>ty<span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>n<span class="token operator">||</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">==</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         t<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-我还会直接暴力rand"><a href="#2-我还会直接暴力rand" class="headerlink" title="2.我还会直接暴力rand()"></a>2.我还会直接暴力rand()</h3><p>我们不用rand_shuffle一个顺序，直接每次rand两个点，</p><p>虽然有rand到两个相同点的机率，但是这样被叉掉 的机率很高</p><p>还是rand_shuffle更优秀</p><pre class="line-numbers language-cpp"><code class="language-cpp">   <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token operator">&lt;=</span><span class="token number">60000</span><span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC <span class="token operator">>=</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">int</span> tx<span class="token operator">=</span>i<span class="token operator">+</span>dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> ty<span class="token operator">=</span>j<span class="token operator">+</span>dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token operator">||</span><span class="token operator">!</span>ty<span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>n<span class="token operator">||</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">==</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-我还会时间戳优化"><a href="#3-我还会时间戳优化" class="headerlink" title="- 3.我还会时间戳优化"></a>- 3.我还会时间戳优化</h2><p>我们发现在每次bfs的过程中其实没必要每次都memset一下，</p><p>把<code>flag</code>变成<code>int</code>类型，增加一个时间变量<code>TIM_CNT</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> stx<span class="token punctuation">,</span><span class="token keyword">int</span> sty<span class="token punctuation">,</span><span class="token keyword">int</span> sttx<span class="token punctuation">,</span><span class="token keyword">int</span> stty<span class="token punctuation">)</span><span class="token punctuation">{</span>    tmp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    TIM_CNT<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间戳优化</span>    queue<span class="token operator">&lt;</span>point<span class="token operator">></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>stx<span class="token punctuation">,</span>sty<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>stx<span class="token punctuation">]</span><span class="token punctuation">[</span>sty<span class="token punctuation">]</span><span class="token operator">=</span>TIM_CNT<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">int</span> tx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> ty<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tx<span class="token operator">||</span><span class="token operator">!</span>ty<span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>n<span class="token operator">||</span>flag<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">==</span>TIM_CNT<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">!=</span>mp<span class="token punctuation">[</span>stx<span class="token punctuation">]</span><span class="token punctuation">[</span>sty<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">!=</span>mp<span class="token punctuation">[</span>sttx<span class="token punctuation">]</span><span class="token punctuation">[</span>stty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>             tmp<span class="token operator">++</span><span class="token punctuation">;</span>             flag<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">=</span>TIM_CNT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把flag赋值为当前时间</span>             q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans2<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans2<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会发现这样就又快了接近1000ms，是真的非常有用</p><p>至此，我们发现随机化真的难卡掉，可以说除了慢了一些真的非常优秀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来自今天模拟赛一道很有意思 的题&lt;/p&gt;
&lt;h1 id=&quot;关于HACK&quot;&gt;&lt;a href=&quot;#关于HACK&quot; class=&quot;headerlink&quot; title=&quot;关于HACK&quot;&gt;&lt;/a&gt;关于HACK&lt;/h1&gt;&lt;p&gt;之前我也是像一篇题解一样的做法，但是发现这样是错的。&lt;/p&gt;</summary>
      
    
    
    
    <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    <category term="Search" scheme="http://yoursite.com/categories/OI/Search/"/>
    
    
    <category term="搜索" scheme="http://yoursite.com/tags/搜索/"/>
    
    <category term="随机化" scheme="http://yoursite.com/tags/随机化/"/>
    
  </entry>
  
  <entry>
    <title>USACO18OPEN 主题模拟赛</title>
    <link href="http://yoursite.com/2018/11/07/USACO18OPEN%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>http://yoursite.com/2018/11/07/USACO18OPEN%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%8B%9F%E8%B5%9B/</id>
    <published>2018-11-07T06:02:02.000Z</published>
    <updated>2018-11-07T07:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次的题目都不算很水，还是比较有价值的一套题来纪念一下</p><h1 id="USACO18OPEN-主题模拟赛"><a href="#USACO18OPEN-主题模拟赛" class="headerlink" title="USACO18OPEN 主题模拟赛"></a>USACO18OPEN 主题模拟赛</h1><h2 id="T1-Out-of-Sorts"><a href="#T1-Out-of-Sorts" class="headerlink" title="T1: Out of Sorts"></a>T1: Out of Sorts</h2><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><pre class="line-numbers language-python"><code class="language-python">sorted <span class="token operator">=</span> false<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">not</span> sorted<span class="token punctuation">)</span><span class="token punctuation">:</span>   sorted <span class="token operator">=</span> true   moo<span class="token operator">+</span><span class="token operator">+</span>   <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span> to N<span class="token number">-2</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>         swap A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token keyword">for</span> i <span class="token operator">=</span> N<span class="token number">-2</span> downto <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>         swap A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span> to N<span class="token number">-2</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>         sorted <span class="token operator">=</span> false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给一段伪代码，求出最后答案的moo值是多少，（这段代码是根据冒泡排序改的）</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>事实上交以上伪代码的c++版本可获得40分的好成绩，稍加一些优化有50分。</p><p>然而正解其实很玄学。</p><p>这个moo的值实际上就是离散化之后的序列中，前$i$个数中大于$i$的数的最大值。</p><p>对于一个（伪）冒泡排序的过程，以一个$i$为界限，</p><ol><li>向后扫会保证把前 𝑖 个位置上一个值$&gt; 𝑖$ 的数扔到后边去</li><li>向前扫会保证被换到前𝑖 个位置上的新数的值是$≤ 𝑖 $的</li></ol><p>于是前$i$个中大于$i$的数就是需要交换的次数，扫一遍求最大值就行。</p><p>至于求法，可以模拟，也可以树状数组，我就只打了模拟。。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>模拟代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>Case<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>pos<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag<span class="token punctuation">,</span>vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        sum<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">,</span>num<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token keyword">const</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> val<span class="token operator">&lt;</span>v<span class="token punctuation">.</span>val<span class="token operator">||</span>val<span class="token operator">==</span>v<span class="token punctuation">.</span>val<span class="token operator">&amp;&amp;</span>num<span class="token operator">&lt;</span>v<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">></span>i<span class="token punctuation">)</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>sum<span class="token operator">--</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意有可能是0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>树状数组</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 100005</span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span><span class="token macro property">#<span class="token directive keyword">define</span> INF 2147483640</span><span class="token macro property">#<span class="token directive keyword">define</span> MOD 100000007</span><span class="token macro property">#<span class="token directive keyword">define</span> lowbit(x) ((x&amp;(-x))) </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> L<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>x<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">==</span>b<span class="token punctuation">.</span>x<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">.</span>num<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>node a<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>L<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        res<span class="token operator">+</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ins</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token function">ask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="T2-Milking-Order"><a href="#T2-Milking-Order" class="headerlink" title="T2: Milking Order"></a>T2: Milking Order</h2><h3 id="题意简述-1"><a href="#题意简述-1" class="headerlink" title="题意简述"></a>题意简述</h3><p>共有$n$头牛，给定$m$个排列顺序（可以只有部分牛），求在满足最大的x的情况下，找到最终的一个排列顺序，满足前x个给出的排列顺序，且放在前面的牛尽量小。。题意很长我尽力了。</p><p><a href="https://www.luogu.org/problemnew/show/P4376" target="_blank" rel="noopener">完整版题意</a></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>是一个裸的拓扑。。。</p><p>二分一个最大的x，每一次可以拓扑或tarjan判环，最后用小根堆拓扑排序一下就行。</p><p>关于每次check，可以选择每一次摧毁之前所有的边，重新建边。</p><p>也可以定一个time，一次行先建完所有的边，最后只查time&lt;=当前x的边就行，跑的很快</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>in<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> nt<span class="token punctuation">,</span>to<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>node edge<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    edge<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ve<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>ve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>ve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">[</span>ve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">build</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>            in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">build</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater <span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">></span> <span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>            in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="T3-Talent-Show"><a href="#T3-Talent-Show" class="headerlink" title="T3: Talent Show"></a>T3: Talent Show</h2><h3 id="题意简述-2"><a href="#题意简述-2" class="headerlink" title="题意简述"></a>题意简述</h3><p>每个物品有一个$w_i,t_i$,求当总的w大于等于一个给定值$W$使$\sum_{t_i}/\sum_{w_i}$的最大值</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>裸的01分数规划背包dp，可惜我不会，因为数据水就混到了90分。。。。</p><p>考虑$ans=\sum_{t_i}/\sum_{w_i}$ 是最优的解，Z是当前不那么优秀的解</p><p>则有$\sum_{t_i}/\sum_{w_i}&gt;=Z$</p><p>移项得$\sum_{t_i}-\sum_{w_i} \times Z&gt;=0$</p><p>此时一个i的贡献值就只和i有关了！！</p><p>于是可以考虑二分答案，在check的时候做一个01背包dp</p><p>设$dp[i]$表示当容量与i的时候$t[i]-w[i] \times Z$的最大值，当$dp[W]$ 为非负值时，说明此时的答案时成立的</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> eps 1e-6</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">260</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>W<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token keyword">double</span> dp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">double</span> ans<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>ans<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>W<span class="token punctuation">;</span><span class="token operator">~</span>j<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span>j<span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           dp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>W<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sum<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">>=</span>eps<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token operator">+</span>eps<span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span>eps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次的题目都不算很水，还是比较有价值的一套题来纪念一下&lt;/p&gt;
&lt;h1 id=&quot;USACO18OPEN-主题模拟赛&quot;&gt;&lt;a href=&quot;#USACO18OPEN-主题模拟赛&quot; class=&quot;headerlink&quot; title=&quot;USACO18OPEN 主题模拟赛&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    <category term="Contest" scheme="http://yoursite.com/categories/OI/Contest/"/>
    
    
    <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
    <category term="模拟赛" scheme="http://yoursite.com/tags/模拟赛/"/>
    
    <category term="二分" scheme="http://yoursite.com/tags/二分/"/>
    
    <category term="拓扑排序" scheme="http://yoursite.com/tags/拓扑排序/"/>
    
    <category term="模拟" scheme="http://yoursite.com/tags/模拟/"/>
    
    <category term="树状数组" scheme="http://yoursite.com/tags/树状数组/"/>
    
  </entry>
  
  <entry>
    <title>数论——高斯消元</title>
    <link href="http://yoursite.com/2018/11/06/%E6%95%B0%E8%AE%BA%E2%80%94%E2%80%94%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    <id>http://yoursite.com/2018/11/06/%E6%95%B0%E8%AE%BA%E2%80%94%E2%80%94%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</id>
    <published>2018-11-06T11:16:11.000Z</published>
    <updated>2020-09-14T09:51:36.550Z</updated>
    
    <content type="html"><![CDATA[<p>主要是用于解多元线性方程</p><p><a href="https://blog.csdn.net/pengwill97/article/details/77200372" target="_blank" rel="noopener">快速入门</a>我就不想多讲</p><h2 id="普通版高斯消元"><a href="#普通版高斯消元" class="headerlink" title="普通版高斯消元"></a>普通版高斯消元</h2><p>大概思路是每次一行中某一列的最大系数，</p><p>用解方程的思路消掉这一列其余行的系数，每一往后找一列，且保持上一次消过的一行不再被消掉，</p><p>直到最后形成一个集中与右上角的直角三角行，然后从最后一列只有一个系数的方程不断往上代就能求出所有的答案</p><p><a href="https://www.luogu.org/problemnew/show/P3389#sub" target="_blank" rel="noopener">洛谷模板</a></p><p>先上代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>flag<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">501</span><span class="token punctuation">;</span><span class="token keyword">double</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-7</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//列数</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找最大系数</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>eps<span class="token punctuation">)</span><span class="token punctuation">{</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//逐步消元</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> bi<span class="token operator">=</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>bi<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从下往上依次代数</span>    <span class="token punctuation">{</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可省</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简化版约旦消元"><a href="#简化版约旦消元" class="headerlink" title="简化版约旦消元"></a>简化版约旦消元</h2><p>在高斯消元的基础上简化的求法，每一次把所有除自己行的系数全部消掉，最后每一行就得到的是一元一次方程，直接把系数一除过去就行了</p><p>我悟了，差别就是jordan把从第一行开始所有非自己行的全部消除一遍）</p><p>高斯就是不消除前面的只删后面）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> eps 1e-5</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">140</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>flag<span class="token punctuation">;</span><span class="token keyword">double</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">guass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//列数</span>    <span class="token punctuation">{</span>         <span class="token keyword">int</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token operator">=</span>j<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>eps<span class="token punctuation">)</span><span class="token punctuation">{</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">double</span> ai<span class="token operator">=</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>ai<span class="token operator">*</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">guass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="1-poj1222-经典关灯问题"><a href="#1-poj1222-经典关灯问题" class="headerlink" title="1.poj1222 经典关灯问题"></a>1.<a href="http://poj.org/problem?id=1222" target="_blank" rel="noopener">poj1222 经典关灯问题</a></h3><p>大概是建立30个方程求解</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>flag<span class="token punctuation">;</span><span class="token keyword">int</span> _map<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-7</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//列数</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找最大系数</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>_map<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">abs</span><span class="token punctuation">(</span>_map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>_map<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//逐步消元</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token operator">&amp;&amp;</span>_map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>             <span class="token keyword">int</span> bi<span class="token operator">=</span>_map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                _map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span> _map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">-</span>bi<span class="token operator">*</span>_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意负数</span>          <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// ans[i]=_map[i][n+1]/_map[i][i];</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> Case<span class="token punctuation">;</span>   <span class="token keyword">int</span> kn<span class="token punctuation">,</span>km<span class="token punctuation">,</span>kx<span class="token punctuation">,</span>ky<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Case<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>Case<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">memset</span><span class="token punctuation">(</span>_map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           kn<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">;</span>km<span class="token operator">=</span>i<span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>               kx<span class="token operator">=</span>j<span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">;</span>ky<span class="token operator">=</span>j<span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>kx<span class="token operator">-</span>kn<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>ky<span class="token operator">-</span>km<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>                 _map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>               <span class="token keyword">else</span>                 _map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PUZZLE #%d\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-JSOI2008-球形空间产生器"><a href="#2-JSOI2008-球形空间产生器" class="headerlink" title="2.[JSOI2008]球形空间产生器"></a>2.<a href="https://www.luogu.org/problemnew/show/P4035" target="_blank" rel="noopener">[JSOI2008]球形空间产生器</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有一个球形空间产生器能够在 $n$维空间中产生一个坚硬的球体。现在，你被困在了这个$n$维球体中，你只知道球面上$n+1$个点的坐标，你需要以最快的速度确定这个 $n$维球体的球心坐标，以便于摧毁这个球形空间产生器。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这也是一个比较水的板子题。</p><p>首先提示：</p><p>距离：设两个n为空间上的点A, B的坐标为$(a_1, a_2, \cdots , a_n), (b_1, b_2, \cdots , b_n)$，</p><p>则AB的距离定义为：<br>$$<br>dist = \sqrt{ (a_1-b_1)^2 + (a_2-b_2)^2 + \cdots + (a_n-b_n)^2 }<br>$$</p><p>利用这个式子得到<br>$$<br>-2 a_0x_0+a_0^2-2a_1x_1+a_1^2····-2a_nx_n+a_n^2=-2 b_0x_0+b_0^2-2b_1x_1+b_1^2····-2b_nx_n+b_n^2<br>$$<br>移相得到<br>$$<br>x_0 \times 2(b_0-a_0)+x_1 \times 2(b_1-a_1)+···+x_n \times 2(b_n-a_n)=b_0^2-a_0^2+b_1^2-a_1^2+···+b_n^2-a_n^2<br>$$<br>于是列n个方程就显而易见了。。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> eps 1e-5</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">140</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>flag<span class="token punctuation">;</span><span class="token keyword">double</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//列数</span>    <span class="token punctuation">{</span>         <span class="token keyword">int</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token operator">=</span>j<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>eps<span class="token punctuation">)</span><span class="token punctuation">{</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">double</span> ai<span class="token operator">=</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>ai<span class="token operator">*</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            tmp<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf "</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-poj1681画家问题"><a href="#3-poj1681画家问题" class="headerlink" title="3.poj1681画家问题"></a>3.<a href="http://poj.org/problem?id=1681" target="_blank" rel="noopener">poj1681画家问题</a></h3><p>也是一个模板题，多年之前做的东西就不讲解了。。。</p><p>当年卡了很久</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>flag<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-7</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//列数</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找最大系数</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">abs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//逐步消元</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>             <span class="token keyword">int</span> bi<span class="token operator">=</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span> mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">-</span>bi<span class="token operator">*</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">*</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> Case<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> kn<span class="token punctuation">,</span>km<span class="token punctuation">,</span>kx<span class="token punctuation">,</span>ky<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>Case<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token function">memset</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'w'</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>               <span class="token keyword">else</span> mp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>               cnt<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           kn<span class="token operator">=</span>i<span class="token operator">/</span>n<span class="token punctuation">;</span>km<span class="token operator">=</span>i<span class="token operator">%</span>n<span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>               kx<span class="token operator">=</span>j<span class="token operator">/</span>n<span class="token punctuation">;</span>ky<span class="token operator">=</span>j<span class="token operator">%</span>n<span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>kx<span class="token operator">-</span>kn<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>ky<span class="token operator">-</span>km<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>                 mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>               <span class="token keyword">else</span>                 mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">gauss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"inf\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">/</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要是用于解多元线性方程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/pengwill97/article/details/77200372&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;快速入门&lt;/a&gt;我就不想多讲&lt;/p&gt;</summary>
      
    
    
    
    <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    <category term="Maths" scheme="http://yoursite.com/categories/OI/Maths/"/>
    
    
    <category term="数论" scheme="http://yoursite.com/tags/数论/"/>
    
    <category term="高斯消元" scheme="http://yoursite.com/tags/高斯消元/"/>
    
  </entry>
  
  <entry>
    <title>题解：BZOJ1033 杀蚂蚁</title>
    <link href="http://yoursite.com/2018/11/05/%E9%A2%98%E8%A7%A3%EF%BC%9ABZOJ1033%20%E6%9D%80%E8%9A%82%E8%9A%81/"/>
    <id>http://yoursite.com/2018/11/05/%E9%A2%98%E8%A7%A3%EF%BC%9ABZOJ1033%20%E6%9D%80%E8%9A%82%E8%9A%81/</id>
    <published>2018-11-05T07:14:10.000Z</published>
    <updated>2018-11-05T11:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>NOIP考前想练一下码力就挑了一道不算非常难的大模拟来写了一下。</p><p>首先，因为此题题面过长就不放题目</p><p>原题请去<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1033" target="_blank" rel="noopener">Link</a></p><p>ps：因为一开始打的代码非常丑，还很繁复所以部分借鉴了一下黄学长的写法见谅。我的代码也是对着黄学长的std步步输出才调出来的，因为一些很智障的错误调了一年。。。</p><p><strong>代码又臭又长注意</strong> </p><p><strong>不过此题解不压行，思路清晰好评！</strong> </p><h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><ul><li>原题描述如下 </li></ul><p>​     “ 激光塔有个比较奇怪的特性：它在选定了打击目标后，只要目标在其射程内，塔到目标蚂蚁圆心的连线上的所有蚂蚁（这里“被打到”的判定变成了表示激光的线段与表示蚂蚁的圆有公共点）都会被打到并损d格血，<strong>但激光不会穿透它的打击目标打到后面的蚂蚁。</strong> ”</p><p>​      这里就可以清晰的发现这里不仅是要判断直线和圆有没有交点，而是要判断<strong>线段和圆是否有交点</strong></p><p>​      所以这里的判断函数一定要写对<del>否则会调一年，就像我</del></p><ul><li><p>注意先判断蚂蚁死了没有，先更新状态再judge是否成功。</p></li><li><p>蚂蚁年龄一开始是0，而存活时间一开始的就是1。</p></li><li><p>所有的炮是同时开炮，所以要先统计一边每个炮台的target再统一扣血。</p></li><li><p>题目中的坐标不是平面直角坐标系中的坐标，是广义OI理解中的行列。。我就写反了。。</p></li><li>蚂蚁半径0.5不是1！！！！我卡了很久！！</li></ul><p>相信注意到这些地方会使你的代码形成更加清晰，<del>这可是血的教训</del></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>现在开始放题解。</p><p>首先我们看一下美观的主工作函数，这部分代表了我写题的思路和流程，下面就按照这些函数的排列顺序依依讲解每个步骤们也是严格按照题目描述来的</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">birth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">take_cake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本变量"><a href="#基本变量" class="headerlink" title="基本变量"></a>基本变量</h2><p>先把每个变量列出来方便理解</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>H<span class="token punctuation">,</span>T<span class="token punctuation">,</span>total<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//total场上总蚂蚁的个数，H 炮台伤害——>harm</span><span class="token keyword">bool</span> cake_taken<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//蛋糕现在是否被拿走</span><span class="token keyword">double</span> R<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//R 炮台射程半径，防止掉精度</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//信息素，记录障碍物</span><span class="token keyword">int</span> dy1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dx1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顺时针</span><span class="token keyword">int</span> dy2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dx2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逆时针</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ch<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> ant<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>age<span class="token punctuation">,</span>hp<span class="token punctuation">,</span>rk<span class="token punctuation">,</span>sur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//坐标，年龄，血量，级别,存活时间</span>    <span class="token keyword">int</span> pre_x<span class="token punctuation">,</span>pre_y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一秒所在的坐标</span>    <span class="token keyword">double</span> mx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大血量上限</span>    <span class="token keyword">bool</span> cake<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>live<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否拿着蛋糕，是否活着</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> point<span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp_age</span><span class="token punctuation">(</span>ant A<span class="token punctuation">,</span>ant B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> A<span class="token punctuation">.</span>age<span class="token operator">></span>B<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> turret<span class="token comment" spellcheck="true">//炮台</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>t<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="出生"><a href="#出生" class="headerlink" title="出生"></a>出生</h2><p>birth函数比较简单，注意每个数值要赋清楚</p><p>还有就是存储蚂蚁的方式选择，这是非常重要的！！因为选择方式不当可能会造成写代码很大的困扰。</p><p>例如我之前就是每次把死的蚂蚁sort到数组最后，再下一次出生蚂蚁的时候就直接覆盖掉</p><p>然而这样会出一些奇怪的问题，对于cnt的控制就有些奇怪的细节。。。反正调了很久没有A</p><p>于是后来就换成了每次找到一只死蚂蚁就直接覆盖，所有操作都只针对活着的蚂蚁操作而不是前cnt个这样的，毕竟场上最多也就6只蚂蚁，复杂度不用担心。。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">birth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>total<span class="token operator">/</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_x<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rk<span class="token operator">=</span>l<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mx<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        total<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就不解释了</p><h2 id="留标"><a href="#留标" class="headerlink" title="留标"></a>留标</h2><p>这个很简单不解释，走流程</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//每个操作都要判断死活注意。。</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>这是非常麻烦的一个函数，思路一定要清晰，否则非常惨痛。</p><p>想了解移动是否正确可以调BZOJ第4组数据，这个是没有攻击操作的，纯移动。数据哪来的？大家都心知肚明就不说了。。</p><h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><ul><li>枚举方向时按顺时针直接写好，这样就不用多次判断</li><li>先扫遍找到信息素最大的一个方向，（不用管有没有多个相同的，因为顺时针枚举相当于已经筛过一遍）</li><li>再判断时间是否为5的倍数，是就再进行逆时针筛选操作</li><li>注意清零之前的标记，处理pre_x,pre_y</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> tx<span class="token punctuation">,</span><span class="token keyword">int</span> ty<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_x<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_y<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>tx<span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>ty<span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> tx<span class="token punctuation">,</span><span class="token keyword">int</span> ty<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>ty<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>tx<span class="token operator">></span>n<span class="token operator">||</span>ty<span class="token operator">></span>m<span class="token operator">||</span>vis<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>tx<span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_x<span class="token operator">&amp;&amp;</span>ty<span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>cmp_age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_val<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> choose_dirtion<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> tx<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>dx1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ty<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>dy1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            max_val<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_val<span class="token punctuation">,</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找最大值</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> tx<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>dx1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>ty<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>dy1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max_val<span class="token operator">==</span>mp<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>choose_dirtion<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//找到最优方向</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>choose_dirtion<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sur<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//时间是否为5的倍数</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> change<span class="token operator">=</span><span class="token function">c</span><span class="token punctuation">(</span>choose_dirtion<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力打表转换</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>change<span class="token punctuation">;</span>k<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>change<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> tx<span class="token operator">=</span>dx2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>                    <span class="token keyword">int</span> ty<span class="token operator">=</span>dy2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token function">update</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token comment" spellcheck="true">//不是直接处理</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> tx<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>dx1<span class="token punctuation">[</span>choose_dirtion<span class="token punctuation">]</span><span class="token punctuation">,</span>ty<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>dy1<span class="token punctuation">[</span>choose_dirtion<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">update</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_x<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pre_y<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拿物"><a href="#拿物" class="headerlink" title="拿物"></a>拿物</h2><p>先注意判断此时是否有蛋糕，且这只蚂蚁是否活着就行。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">take_cake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cake_taken<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">==</span>n<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">==</span>m<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mx<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mx<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止掉精度</span>            cake_taken<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>这又是本题的一个大难点，有很多细节特别是对线段与直线是否有交点的判断。</p><h3 id="思路整理-1"><a href="#思路整理-1" class="headerlink" title="思路整理"></a>思路整理</h3><ul><li>先按年龄sort一遍</li><li>先扫一遍判断是否可以攻击目标，不行再根据距离远近选择一个最终目标</li><li>只有打拿蛋糕的蚂蚁是才会有躺枪的情况，我只写了判断线段两点都在圆外的情况，避免麻烦</li></ul><p>关于如何判断交点的问题。</p><p>可以看这篇<a href="https://blog.csdn.net/syz201558503103/article/details/78400858" target="_blank" rel="noopener">BLOG</a></p><p>因为这道题只存在两点都在圆外的情况（只算躺枪），所以首先求出直线表达式，用$ax+by+c=0$来表示</p><p>用公式算出点到直线的距离<br>$$<br>d=\frac{|a \times x_0+b \times y_0 + c|}{\sqrt{a^2+b^2}}<br>$$<br>当且仅当$d&lt;=r$时才符合条件</p><p>最后判断时再线段上而不是在延长线上有交点，利用线段两个端点与圆心构成的三角形是否是锐角三角形即可。</p><p>令端点$A(x_a,y_a)​$ ,$B(x_b,y_b)​$ 圆心$C(x_0,y_0)​$</p><p>则$\overrightarrow{A B} = (x_b-x_a,y_b-y_a)$ $\overrightarrow{A O } = (x_0-x_a,y_0-y_a)$<br>$$<br>\cos\theta  =\frac{\overrightarrow{A B} ·\overrightarrow{A O}}{|\overrightarrow{A B}|·|\overrightarrow{A O}|}<br>$$<br>满足$\cos\theta $ 大于0，因为向量的模一定使正数，满足$\overrightarrow{A B} ·\overrightarrow{A O}&gt;0$且$\overrightarrow{B A} ·\overrightarrow{B O}&gt;0$ 就行</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>判断函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">Cross</span><span class="token punctuation">(</span>point A<span class="token punctuation">,</span>point B<span class="token punctuation">,</span>point O<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否有交点的函数</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ax+by+c=0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x<span class="token operator">==</span>B<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token operator">-</span>A<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>y<span class="token operator">==</span>B<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token operator">-</span>A<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        a<span class="token operator">=</span>A<span class="token punctuation">.</span>y<span class="token operator">-</span>B<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        b<span class="token operator">=</span>B<span class="token punctuation">.</span>x<span class="token operator">-</span>A<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        c<span class="token operator">=</span>A<span class="token punctuation">.</span>x<span class="token operator">*</span>B<span class="token punctuation">.</span>y<span class="token operator">-</span>A<span class="token punctuation">.</span>y<span class="token operator">*</span>B<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> dis1<span class="token operator">=</span>a<span class="token operator">*</span>O<span class="token punctuation">.</span>x<span class="token operator">+</span>b<span class="token operator">*</span>O<span class="token punctuation">.</span>y<span class="token operator">+</span>c<span class="token punctuation">;</span>dis1<span class="token operator">*</span><span class="token operator">=</span>dis1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用平方代替sqrt防止掉精</span>    <span class="token keyword">double</span> dis2<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dis1<span class="token operator">></span>dis2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> angle1<span class="token operator">=</span><span class="token punctuation">(</span>O<span class="token punctuation">.</span>x<span class="token operator">-</span>A<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>x<span class="token operator">-</span>A<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>O<span class="token punctuation">.</span>y<span class="token operator">-</span>A<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>y<span class="token operator">-</span>A<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断余弦</span>    <span class="token keyword">double</span> angle2<span class="token operator">=</span><span class="token punctuation">(</span>O<span class="token punctuation">.</span>x<span class="token operator">-</span>B<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x<span class="token operator">-</span>B<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>O<span class="token punctuation">.</span>y<span class="token operator">-</span>B<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>y<span class="token operator">-</span>B<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>angle1<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>angle2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过程函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ATTACK</span><span class="token punctuation">(</span><span class="token keyword">int</span> t_x<span class="token punctuation">,</span><span class="token keyword">int</span> t_y<span class="token punctuation">,</span><span class="token keyword">int</span> tur<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//避免点在圆内的情况</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">-</span><span class="token operator">=</span>H<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cake_taken<span class="token punctuation">)</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Cross</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">[</span>tur<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>t<span class="token punctuation">[</span>tur<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>t_x<span class="token punctuation">,</span>t_y<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">-</span><span class="token operator">=</span>H<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>cmp_age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> goal<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>goal<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>goal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min_dis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token function">dist</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&lt;=</span>R<span class="token operator">*</span>R<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先找target</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token operator">&amp;&amp;</span>d<span class="token operator">&lt;</span>min_dis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//再根据距离判断</span>                    <span class="token punctuation">{</span>min_dis<span class="token operator">=</span>d<span class="token punctuation">,</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token function">ATTACK</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>i<span class="token punctuation">,</span>goal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逐个击破</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="击杀"><a href="#击杀" class="headerlink" title="击杀"></a>击杀</h2><p>真· 杀蚂蚁啦~~</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> kill_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token operator">=</span>cake_taken<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意归零</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="赢局"><a href="#赢局" class="headerlink" title="赢局"></a>赢局</h2><p>直接check没什么说的</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">check_win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//先判断存活</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>回合结束，土地信息素– ，蚂蚁年龄增长</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>live<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sur<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码很丑就不放了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>对于一个300行左右的大模拟，需要耐心，码力，以及永不言弃的调试能力。</li><li>对于大模拟，唯有输出调试才能解决问题，其中输出一定不要怕写的很繁复，越清晰越好。</li></ul><p>例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp">        cout<span class="token operator">&lt;&lt;</span><span class="token string">"******************"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用适当星号隔离</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"ant_id "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"ant_hp "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hp<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"now_pos "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"ant_age "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"ant_mx "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mx<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"ant_cake "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cake<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个变量名字清晰</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当然在非考场的情况下，与std进行输出调试对拍也是非常不错的找错方法</li><li>考试就只能自己整理思路从头到尾查一遍错了。。。</li></ul><p>最终祝各位NOIP2018rp++！！</p><p>QWQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOIP考前想练一下码力就挑了一道不算非常难的大模拟来写了一下。&lt;/p&gt;
&lt;p&gt;首先，因为此题题面过长就不放题目&lt;/p&gt;
&lt;p&gt;原题请去&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1033&quot; targe</summary>
      
    
    
    
    <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    <category term="Simulation" scheme="http://yoursite.com/categories/OI/Simulation/"/>
    
    
    <category term="模拟" scheme="http://yoursite.com/tags/模拟/"/>
    
  </entry>
  
</feed>
